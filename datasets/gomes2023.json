[
    {
        "id": 523,
        "title": "How to appropriately balance project activities with support tasks",
        "body": "I have a small team of experts (12 staff) who do great project work. Unfortunately, their expertise makes them the go-to individuals on support tasks as well. The inability to focus on projects affects their productivity and sometimes has a negative impact on morale. Am I the only one who has this problem? For those who manage small teams without the luxury of dedicated project staff versus support staff, what strategies have you implemented to ensure high morale and productivity and manage staff who feel like they are being pulled in a hundred different directions?",
        "score": 19,
        "creationdate": "2011-02-20 16:28:58.860000",
        "viewcount": 2058,
        "tags": "<process><roles><human-resources><maintenance>",
        "answercount": 4,
        "favoritecount": 9,
        "userId": 114,
        "comments": [
            {
                "text": "Thanks for all the great suggestions below...I wish I could accept more than one answer!",
                "score": 0,
                "userId": 114
            }
        ]
    },
    {
        "id": 871,
        "title": "Is the PMP or other project management certification worth while to have?",
        "body": "This is a classic question whose answer would likely help a lot of people on this site. Is it worth it to get the PMP? How about other project management certifications?",
        "score": 10,
        "creationdate": "2011-03-06 14:57:33.040000",
        "viewcount": 6914,
        "tags": "<pmp><certification>",
        "answercount": 8,
        "favoritecount": 3,
        "userId": 14,
        "comments": []
    },
    {
        "id": 888,
        "title": "What to do with a messy project when it's close to be finished",
        "body": "It happened to me in the past that for some reasons a project (software app) has become very messy, or we inherited it that way. With messy I mean that some basic best practices was not followed at some point, and as a result everybody was a little scared to touch anything because you don't know how it's going to affect the whole (say at this point the project misses 10% to be completed), this leaded to a even worse situation. We realized this status too late, when the project was close to be finished and we hoped we needed very little maintenance. But I'm wondering what to do if the situation comes again, of course you should avoid the project to get to a point where you're afraid to touch it, but once it's there, is it acceptable to make an exception, limit the work do do on it and fix each problem the short way. When does it worth to refactor it anyway, going out of budget? thanks",
        "score": 4,
        "creationdate": "2011-03-07 00:41:04.510000",
        "viewcount": 584,
        "tags": "<development-process>",
        "answercount": 3,
        "favoritecount": 2,
        "userId": 97,
        "comments": [
            {
                "text": "Yes sure, I'm sorry, but unfortunately I'll have the time only in a few hour.",
                "score": 0,
                "userId": 97
            }
        ]
    },
    {
        "id": 1264,
        "title": "What criteria should be considered when deciding to do work which goes beyond project scope?",
        "body": "Answering my recently asked question whether to \"deliver results when finished significantly prior to the agreed deadline\", Smandoli suggested to fill the slack with \"Look for places to exceed expectations, exceed the spec.\" I understand that deciding whether to do work which goes beyond defined project scope depends on a number of factors. Which ones do you consider to be particularly important to make a qualified decision?",
        "score": 5,
        "creationdate": "2011-03-26 16:34:23.687000",
        "viewcount": 160,
        "tags": "<politics><customer-satisfaction><relationships>",
        "answercount": 6,
        "favoritecount": null,
        "userId": 699,
        "comments": [
            {
                "text": "@jmort253, yes I intentionally open a new question instead of commenting on Smandoli's answer on the previous question, because in my understanding the new question is about a wider scope and therefore deserves a separated question. Also, naturally I added part of my understanding of that topic as well, in order to give a hint into which direction my question is targeting. Do you think the question would be acceptable had I left the three bullet points?",
                "score": 1,
                "userId": 699
            }
        ]
    },
    {
        "id": 1279,
        "title": "What role should a technical architect play in Project Management?",
        "body": "I've recently been given the role of Technical Architect in my organization (I will also be project managing some projects and developing if the 10-12 senior developers are all too busy).   I'm wondering whether a technical architect should have a strong role at the start in defining the project architecture and the right developers for the project - but then takes a back-seat during the actual project.  Is that reasonable?",
        "score": 22,
        "creationdate": "2011-03-27 12:48:52.303000",
        "viewcount": 16966,
        "tags": "<project-team><technical-leader>",
        "answercount": 6,
        "favoritecount": 7,
        "userId": 693,
        "comments": []
    },
    {
        "id": 1539,
        "title": "How to measure quality in a software development project?",
        "body": "Quality is one of the four key project constraints, which need to be planned and controlled by a project manager during the entire project lifecycle. In order to plan and control it the PM, first of all, has to understand how to measure it. What are possible and most effective methods of measurement of quality in a software development project?",
        "score": 21,
        "creationdate": "2011-04-06 10:33:18.243000",
        "viewcount": 50297,
        "tags": "<quality><quality-management>",
        "answercount": 7,
        "favoritecount": 10,
        "userId": 91,
        "comments": []
    },
    {
        "id": 1725,
        "title": "Starting to learn Project Management, which book or path to follow ?",
        "body": "As I started to search to learn more about project management on Google, I was overwhelmed by all the certification links. All I want to learn is about the various software (especially web development) related to project management and all about the models like scrum or Price2 or agile development. What would be the best resource, like a free online resource, or better, a book, which would get me started learning about project management. Also please note that I may have asked the wrong question, because I'm very confused after searching on Google, and here I came as a last resort to clarify.",
        "score": 14,
        "creationdate": "2011-04-15 17:18:42.467000",
        "viewcount": 2045,
        "tags": "<agile><books><learning>",
        "answercount": 12,
        "favoritecount": 12,
        "userId": 616,
        "comments": []
    },
    {
        "id": 2043,
        "title": "How to choose, motivate & develop a newbie programmer?",
        "body": "Imagine that you need to hire new programmer, however you are 100% sure that there are not experienced (what you need) developers on the local market and you need to work with newbies. A couple of months ago we hired such developer with the clause that he will learn & learn to satisfy the needs of the company however that did not happened and his progress is disappointing. Anyway he is leaving in two weeks and we will need a new one. It is important to mention that we have a policy for 6 months test period which I cannot change. My idea was to hire not 1 programmer for six months, but 2 programmers for 3 months and make it like a game -- set goals, make a competition,  set a final test and choose the better one the other one will leave (in the best scenario we will have 2 good programmers :) -- basically the issue is with the lack of quality programmers we can find on the local market and outsourcing is absolutely not an option, I suffered this before). Do you have any ideas how to motivate the future programmer to become the greatest one in the universes within 3-6 months? I need quick results in short time or the Director will say \"This one is not good enough, we need another one.\" and everything will start over (which is such a pain).",
        "score": 16,
        "creationdate": "2011-05-04 13:15:48.273000",
        "viewcount": 1060,
        "tags": "<team-management><human-resources><team-building><motivation>",
        "answercount": 8,
        "favoritecount": 2,
        "userId": 1136,
        "comments": []
    },
    {
        "id": 2212,
        "title": "Gameification - How would you gameify work in an Agile team?",
        "body": "During a recent open session at RallyON 2011 we talked about paradoxes in Agile. One of the items that came up during the conversation is when a high-performing team becomes so well greased that all the \"agile-ness\" has been sucked from the process. When introducing NEW change to the well-oiled Scrum team, they balk because things are going so well... A way to keep learning going, we talked briefly about \"gameification of work\" in an Agile team. Has anyone done this before? What are ways to keep an Agile team fresh?",
        "score": 15,
        "creationdate": "2011-05-13 00:48:33.623000",
        "viewcount": 402,
        "tags": "<agile>",
        "answercount": 3,
        "favoritecount": 3,
        "userId": 1124,
        "comments": [
            {
                "text": "Oh and... I'm not looking for an answer like: \"Have your team unlock the \"Sprint Complete Badge!\"",
                "score": 2,
                "userId": 1124
            }
        ]
    },
    {
        "id": 2309,
        "title": "How do you schedule maintenance work in Scrum?",
        "body": "What are some of the different patterns you use to schedule maintenance work (any non-feature work like bug fixes, technical debt reduction, etc.)?  In our organization, we've considered mash-ups of the following:  Finish feature commitments and then peel off teams for maintenance work during test or warranty cycles Bug Quash (a social event where the goal is to fix, or \u201cquash\u201d, as many bugs as is humanly possible in a time-boxed period) Schedule fixed capacity up front in each release (e.g. plan for 1 sprint per team in a release) Dedicated full-time bugmeister to triage and coordinate fixes with teams Ping-pong the maintenance work between off-shore teams  Note, we follow two guiding principles in this area of practice:  People should fix their own bugs to the extent possible No dedicated maintenance teams  Note, too, the reality is we have bugs.  Please don't tell me to find a way to eliminate bugs so that we don't have to worry about solving for this problem.  I'm interested in other ideas about how to approach the problem.   (P.S. credit Nate Beck for the Bug Quash idea - thanks Nate!)",
        "score": 19,
        "creationdate": "2011-05-18 06:04:37.243000",
        "viewcount": 2437,
        "tags": "<scrum><planning><maintenance><defect-fixing>",
        "answercount": 3,
        "favoritecount": 5,
        "userId": 1213,
        "comments": []
    },
    {
        "id": 2316,
        "title": "How to handle user stories that cannot be split and do not fit even a 30 days long sprint?",
        "body": "Given a small team (3 people or so) and a technically challenging area (e.g. middleware, embedded software etc.), and  Assuming that a user story is a smallest thing that has value for the end user,  how do you go about handling stories that take more than one month to reach the DONE-DONE state? Of course one could always split them into several so called \"technical stories\", but they are, with the exception of refactoring spikes, a big no-no in Agile, aren't they?",
        "score": 11,
        "creationdate": "2011-05-18 09:00:43.040000",
        "viewcount": 6153,
        "tags": "<agile><scrum><planning><sprint><backlog>",
        "answercount": 7,
        "favoritecount": 2,
        "userId": 1281,
        "comments": []
    },
    {
        "id": 2434,
        "title": "How do I encourage team members to accurately log their work?",
        "body": "One thing that I noticed is that lots of employees forget to log the number of hours that they worked on a task. Is there a way to provide incentives for them to measure their work accurately? (either in time spent or progress on a specific task)",
        "score": 14,
        "creationdate": "2011-05-25 11:23:17.287000",
        "viewcount": 1168,
        "tags": "<progress-monitor><timeline><timekeeping>",
        "answercount": 6,
        "favoritecount": 3,
        "userId": 1284,
        "comments": []
    },
    {
        "id": 2635,
        "title": "Leading (predictive) Metrics?",
        "body": "I was wondering what useful leading metrics people might be using to predict failures/issues after release.  (I'm assuming SW projects). There are lots of lagging metrics that capture what has already happened after release (e.g. weekly number of defects reported by customers) and those can be used to build a predictive model themselves.  But I am wondering if anyone else tracks things like \"number of high level defects per total defects\" and uses that to predict (with some level of accuracy :-) the number of defects that customers will see/report. Reason/context: I'd like to be able to have something (measurable) in my back pocket in 12 months (the next big project) that says \"sure, we can lower the quality bar and cut $$$ for quality improvements, but it'll result in a higher maintenance budget by about x%\"  That is, start measuring now, validate the data and results then use it as a guide on the next project(s). thanks!",
        "score": 19,
        "creationdate": "2011-06-17 13:14:27.253000",
        "viewcount": 2447,
        "tags": "<metrics><quality>",
        "answercount": 9,
        "favoritecount": 8,
        "userId": 1125,
        "comments": [
            {
                "text": "I agree they could be applied on the project right now, but validating that they work (or how well they work) won't be \"proven out\" till the first data set... So, record them now and validate the signal they produce for use on future projects.  Better?",
                "score": 1,
                "userId": 1125
            }
        ]
    },
    {
        "id": 2659,
        "title": "Would/should the PM define the code style for a software project?",
        "body": "In terms of specifying the actual code/syntax style that all developers should use in a project, should the project manager do this? Or would that be under the realm of a technical lead/lead developer? Or would it vary from organization to organization? Or all of the above? I ask because I feel having uniform, readable, commented code is extremely important for a project's success because it makes debugging and maintenance so much easier - so this seems like it'd be under the PM realm.",
        "score": 6,
        "creationdate": "2011-06-21 11:23:49.090000",
        "viewcount": 792,
        "tags": "<software-development>",
        "answercount": 9,
        "favoritecount": null,
        "userId": 1558,
        "comments": []
    },
    {
        "id": 2765,
        "title": "Why use story points instead of hours for estimating?",
        "body": "After using hours to estimate our projects for a long time and rarely coming within 20% of actual \"work-to-ship,\" I have been told by a handful of people that \"points\" work a lot better at gauging the complexity and estimated length of tasks within a project.   How are story points better at estimating the work required for a project?",
        "score": 158,
        "creationdate": "2011-07-04 19:25:46.013000",
        "viewcount": 93991,
        "tags": "<agile><scrum><estimation><story-points>",
        "answercount": 19,
        "favoritecount": 111,
        "userId": 1640,
        "comments": []
    },
    {
        "id": 3343,
        "title": "How do \"action items\" relate to various task identification and tracking methods used by agile methodologies?",
        "body": "I'm specifically thinking about the relationship between action items and various methods of organizing tasks in agile methodologies, such as user stories. I think this requires a little bit of a leap, but I don't think it's too off-base. My understanding of an action item is that it is something that needs to be done. It could be a task to write a document, review a document, implement functionality, write a test case, prepare a presentation, send an email, sign a document, and so on. An action item is also something that can be handled by (and is assigned to) a single individual. As I understand it, a user story is a requirement in the form of \"As a {role}, I want {output} so that {benefit}\". Quite simply, it's a representation task. Usually, user stories are used to capture the functional requirements of a system, and then someone will use this requirement to implement a solution. However, I see nothing in this definition that precludes it from capturing non-functional requirements (\"As a user, I want this program to respond to {input X} within 1 second so that I can complete this task within the deadlines.\") I also don't see a reason why stories can't be written for internal tasks as well (\"As a project manager, I want a regular status report on the health of this project to determine scheduling, budgeting, and risks.\" -> realized through things like daily standups or weekly status meetings). I came across the INVEST mnemonic when searching about this relationship between action items and user stories. It means that user stories must be independent (self-contained), negotiable (changed up to the time they are added to an iteration), valuable, can be estimated, appropriately sized (4-40 or 8-80 rule?), and testable. I disagree that all stories must be independent (some features or tasks do depend on others existing first) and testable (you can't necessarily \"test\" a presentation in the development sense, but it can be reviewed and assessed, so it might be close). It seems like with the exception of independent and testable, the same rules should apply to an action item. Ultimately, the question is: Are \"user stories\" and \"action items\" (and any other methods of task identification and tracking) generally interchangable? It seems like a good task is a good task, regardless of how it's presented, and the only significant difference between the two is how they are formatted and presented. Is the only consideration which presentation of tasks bests suits the project and team, and maintaining consistency (in the format used to express tasks) throughout the project?",
        "score": 5,
        "creationdate": "2011-09-08 13:11:03.340000",
        "viewcount": 2682,
        "tags": "<planning><tasks>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 30,
        "comments": []
    },
    {
        "id": 3953,
        "title": "How can I avoid team burnout?",
        "body": "I work for a small web company that deals with a lot of projects, a few at any given time are development heavy for us (400-1500 hours or more) and I've been noticing developers get extremely burnt out on a project after 150 hours or so. I've been toying around with the idea of working some form of rotation/rest so when someone reaches the threshold, they at least get some time off of working on that project. Is there an industry standard approach?",
        "score": 36,
        "creationdate": "2011-11-28 22:53:05.563000",
        "viewcount": 3032,
        "tags": "<team-management><motivation><team-building>",
        "answercount": 11,
        "favoritecount": 25,
        "userId": null,
        "comments": []
    },
    {
        "id": 4037,
        "title": "Do you know any companies that rotate developers between different projects on regular basis?",
        "body": "I work for a smallish outsourcing company of about 30 people, nearly all of them developers. At any given moment we have 6-9 projects in development for various clients. Most of the projects are developed by 3 programmers and one tester and last around 6 months, but we have also some long-running projects lasting up to two years. We have been practicing Agile methodologies for a couple of years, and now we use Kanban more and more. Most of our developers are highly-skilled and while we have only a couple of \"real TDD\" practitioners, everybody does at least \"test-after\". We don't pair a lot, but instead rely on hallway testing and code reviews. The problem we have encountered is that after having been acquired by a corporation, which has in the past outsourced all of it's programming work to India, we now handle multiple projects with very significant technical debt, almost all of which will probably run for quite a long time. This is a problem, because morale of the people working on those projects is very low (some people already quit), and the programmers are getting burned out quickly. It has been said that it feels like a prison sentence to be a part of those teams, especially with no end in sight for those projects. We are looking for a way of increasing morale of the unlucky employees who have to handle the worst projects. One of our ideas is to start rotating people regularly between projects, so that even if someone ends up in a really nasty project, they know that they only have to endure this for a couple of months, and not as long as they work for our company. We have looked into this idea before, because we think it might be a good way to improve knowledge transfer, shared code ownership and encourage pair programming, but now we have a much stronger incentive to pursue this. I know of two companies that practice rotating people among projects: Relevance and Pivotal Labs. Relevance has posted an entry on their blog about rotating people, and Pivotal hints about it in some job offers and it was mentioned on Quora. Do you know any other companies that apply this technique (I'm especially interested in any experience reports)? Is it a good or a bad idea in our situation?  EDIT: After reading the responses, I have come to the realization, that I might have over-stressed the burnout/prison-projects angle a little bit. In fact, as I have mentioned above, we have had the idea of rotating people regularly before, and the reason for that is that we expect this to:  Promote knowledge-sharing, because people who are experts in various fields (DB, JavaScript), will have chance to work with a larger subset of other employees. Improve code quality through continuous code review: when a new person enters a project, it will be a fresh set of eyes looking at the code and pointing out the faults in the design/code itself. Foster collective code ownership: if people are expected to rotate off the project, the code, which they wrote will be maintained by other people. In order to not be left with maintaining a completely unknown, \"untouchable\" piece of code written by someone else, the developers will have to share the responsibility for various parts of the system. Foster pair-programming: I believe that pair-programming is a good way of developing software. In a team, which periodically welcomes new members, pair-programming is the most effective way of introducing new people. If programmers spend a lot of time pair-programming with new people, hopefully they will be more likely to pair program with other team members on normal tasks.  I am really interested in learning about other companies that have tried rotating people across projects. Has anyone worked in an environment like that or has heard about some company practicing this?",
        "score": 9,
        "creationdate": "2011-12-07 12:34:31.320000",
        "viewcount": 1167,
        "tags": "<software-development><motivation><project-team>",
        "answercount": 3,
        "favoritecount": 2,
        "userId": 2670,
        "comments": []
    },
    {
        "id": 4194,
        "title": "Training methods in small team",
        "body": "I'm working for a startup company where there are only a few employees (5 programmers). I'm senior in terms of my time with the company and experience even though I'm only 23 years old. I have no experience in leading a team other than the college project groups. Since I'm most experienced, I was told to train the newcomers and one of them was assigned to my team for a project. Can any one tell me how can I train them while handling project pressure myself? I want to share my knowledge with them but at the same time I want to avoid spoon feeding them or let them go astray in programming (became weak or clueless). What is the best approach to interact with them?   Boss them Treat them as peers Something else  I expect to manage more than a single person soon so I look for methods which would work in the long run and not only in this specific situation.",
        "score": 16,
        "creationdate": "2011-12-28 10:17:03.920000",
        "viewcount": 536,
        "tags": "<team-management><training><product-management>",
        "answercount": 5,
        "favoritecount": 6,
        "userId": 2799,
        "comments": []
    },
    {
        "id": 4285,
        "title": "How to handle 'ilities' (or non-functional requirements) for a project planning/prioritization/work-allocation?",
        "body": "It seems the world is doing a good job at managing functional requirements for a system - you can link them to benefits, prioritize them and manage their implementation schedule (let's assume an ideal world :) Now consider 'ilities' like modifiability, usability, adaptability, reusability, security, reliability, availability etc., etc., Technically one can link them to potential end benefits and also prioritize their importance for a business - but just HOW should one manage their implementation? Assuming you prioritize the functions and the ilities in the same 'pile' so to speak, it's possible that availability may be lower than 'booking tickets' feature-set (for example). Agilists may argue that the design should reveal itself and that they can 'refactor' availability or security etc., later. Honestly, everything can be added to the system by refactoring but the costs may be prohibitive and that's why one must spend some time (may be more) upfront when accounting for such ilities IMO. So my question is this: should you preform a separate prioritization for ilities? Should they be in a separate 'pile' (or backlog) of their own? What should be a good sequencing order when implementing the system? If you indeed perform two independent prioritization activities then how can you compare amongst them and convince the stakeholders that you are indeed doing valuable things first? Basically how would you justify doing ility-management/planning/design over feature-set designing? Since ilities have tradeoffs associated with them you must be able to balance them well and thinking about it later or following YAGNI (You ain't gonna need it) won't suffice. What do you suggest?",
        "score": 5,
        "creationdate": "2012-01-09 01:05:09.500000",
        "viewcount": 4077,
        "tags": "<agile><planning><software-development><requirements><resource-planning>",
        "answercount": 4,
        "favoritecount": 1,
        "userId": 1119,
        "comments": []
    },
    {
        "id": 4635,
        "title": "With Scrum, how do you keep from dropping the little things?",
        "body": "We've moved our group's workflow to a scrum-based approach, with a lot of success. We're getting things done, people are more engaged, and we're more focused on our actual user community's needs. Because we needed to work on processes over tools, we're using physical cards on a backlog board and a task board. This works pretty well, although we're probably going to move to an electronic version eventually as we're starting to get more remote team members. This works very well for \"right sized\" user stories. But how do we deal with things that are really too small for a user story? Sometimes these are bugs/defects, or sometimes they're just really small feature requests or enhancements. For example, our Gitorious installation appends a superfluous s  to repository names when one makes a clone. It'd be nicer if it didn't. One could write user stories for every thing like this (which is what we do), but a) it feels overweight and not at all \"agile\" and b) such stories inevitably get scheduled below bigger, more important things, even though they're often low-hanging fruit (small effort for small but noticeable results). Or, one could have a separate issue tracker. However, that suddenly goes from one place to look for work \u2014 the scrum task board \u2014 to having two tools. Is there a good way to integrate these things so they don't act in opposition to each other? Or, one could just leave these things out of the process and shout them at each other across the room. There's a serious risk of this becoming the de facto process if I don't fix this. When this works, it's basically fine, but it's problematic because a) it can disrupt productivity when people get distracted from their other work by unscheduled interruptions and b) when these issues aren't immediately fixed, they can (as the question title) get dropped.",
        "score": 15,
        "creationdate": "2012-02-14 13:55:37.613000",
        "viewcount": 558,
        "tags": "<scrum><process><tasks><defect-fixing>",
        "answercount": 6,
        "favoritecount": null,
        "userId": 2124,
        "comments": []
    },
    {
        "id": 4875,
        "title": "What actions will you take when Iteration/Sprint goals are in danger?",
        "body": "Let's say, you are a Scrum Master and your team is in the middle of a Sprint. You see that all planned stories can't be completed till the end of the Sprint, that's for sure. What action will you perform?",
        "score": 13,
        "creationdate": "2012-02-28 21:27:22.727000",
        "viewcount": 10988,
        "tags": "<agile><scrum><sprint>",
        "answercount": 10,
        "favoritecount": 2,
        "userId": 3340,
        "comments": []
    },
    {
        "id": 5037,
        "title": "What do to if a signed project got cancelled?",
        "body": "I have a X dollars project under my belt. It supposed to start on Monday. But client refused to go forward and I waited for them for a week. How do software consulting firms deal with this situation? This is a contract project and the client cannot pay me due to resources. For suppose 80 hours.",
        "score": 10,
        "creationdate": "2012-03-07 21:02:12.747000",
        "viewcount": 725,
        "tags": "<time-management>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 3256,
        "comments": [
            {
                "text": "Please see my edit.",
                "score": 0,
                "userId": 3256
            }
        ]
    },
    {
        "id": 5339,
        "title": "Tracking points spent on bugs during sprint",
        "body": "The product owner wants to keep track on how much points are spent on bugs during a sprint. This can raise some issues, such as:  Scoring a task that is already done. Surprisingly even with it done, there are sometimes discussion and divergences. Scoring many small tasks with 0 points that at the end actually sum up to something meaningful (a bunch of fast fixes). Counting points spent on bugs as available points for new features in the next sprint, alongside with new bugs that eventually will show up.  I agree with him that it is important to track the time spent on it, but points doesn't seems to play really well in this case. So what are the best approaches and practices in this case? Count the hours spent on each one?",
        "score": 6,
        "creationdate": "2012-03-30 21:03:47.197000",
        "viewcount": 609,
        "tags": "<scrum><tracking><sprint><bugs>",
        "answercount": 3,
        "favoritecount": 1,
        "userId": 2352,
        "comments": [
            {
                "text": "Mainly from customer report that needs a fast fix. We develop an in house framework to test firmwares. So, sometimes when something change in the firmware specs, we need to patch the framework to test it correctly.",
                "score": 0,
                "userId": 2352
            }
        ]
    },
    {
        "id": 5345,
        "title": "Project complete but does not really satisfy the end users. Business owners unhappy",
        "body": "Some background on the project:  I recently completed a project for a company. The project was a fairly   large line of business web site. The customer was a company with no   prior experience producing software applications. There was no prior   infrastructure, web server, database servers, code repository or   formal product owner. I was given a list of requirements and a 6 month   completion date. The scope included integrating the web site with   their enterprise data ware house, designing the back end database,   creating specifically layed out Pdf files on the fly. It also needed   to work in english, spanish and mandarin.   I was told their was another developer in-house I would be working   with.  Once I got a month into the project I found the other developer   had no prior web or application development experience. I had to build   the infrastructure from scratch. There were issues with the network   that cause the application to run slowly. I also completely   underestimated the amount of time it takes to create applications for   more than one language. I soon realized I was not going to meet the   6th month deadline. I told the I.T. director that there was no way the   project would completed on time. I said it would take at least 9   months for a single person to complete the project. She said they   couldn't afford to pay over time and just do the best I could.  A smart person would have left the project at this point. I did not do the smart thing. I completed the project within 9 months. I worked 60 hour weeks because I wanted to complete the project and move on.  Many lessons were learned but I still have a dilemma. The company is very small and does not have an in-house developer to support the application. I continue to support the application on nights and weekends.  I have asked the company to hire someone to support the application as part of their job but they say they cannot afford it. The application built serves the purpose it was made for but I see absolutely no way it can be maintained.  What are my options?  I feel I really did them a dis-service by creating something for them they cannot maintain and the users don't really want. The project is not getting used as much as it should because I requires a great amount of data entry, the users wanted data to be migrated from an existing file maker application. The data migration was not a part of the scope of the project. Advice needed.",
        "score": 16,
        "creationdate": "2012-03-31 21:01:12.010000",
        "viewcount": 684,
        "tags": "<estimation><product-management><deadline><subcontractor>",
        "answercount": 7,
        "favoritecount": null,
        "userId": 3709,
        "comments": []
    },
    {
        "id": 5439,
        "title": "Allowing PMs to grade/rate developers",
        "body": "We're trying to introduce some new/updated ways to quantify developer productivity, and we want to include our Project Managers' thoughts.  What do you think about allowing PMs to \"grade\" or apply some sort of \"rating\" to a developer's task?  The grades would be based on things like the number of bugs that were found, code performance (does it run slow vs. fast), adherence to requirements, etc. Would developers get upset about PMs grading them on a seemingly arbitrary scale?  How can I do this in a way that won't rock the boat?",
        "score": 9,
        "creationdate": "2012-04-09 22:10:21.637000",
        "viewcount": 696,
        "tags": "<team-management><software-development><communication><project-team>",
        "answercount": 6,
        "favoritecount": 7,
        "userId": 2951,
        "comments": []
    },
    {
        "id": 5521,
        "title": "Quick win or long term sustainability?",
        "body": "My project has to deliver middleware components that will support a large, complex system development spanning multiple phases. My phase is due to implement in 6 weeks, with future phases being implemented in 6 months and 12 months from now. Most of my work is well on track, but we have one component that we are just starting to put in place. We know what is needed to support the current phase, and are confident in our plans to deliver that. However, we don't have a clear view of how the future development phases will be implemented, and so we have not been able to plan our implementation with the future phases in mind. Carrying out the necessary analysis would cost us a couple of weeks, which would delay the overall implementation of the current phase by a week overall. My question is this: should I opt for the quick implementation that fully meets the current requirement and meets current targets, but does not guarantee an easy future implementation, or should I request a delay to the project, with potential (but unproven) future benefits through avoidance of rework? We are using a waterfall-based approach, rather than agile, and the technology is relatively new to the organisation. Does this make a difference to your answer?",
        "score": 4,
        "creationdate": "2012-04-18 18:46:41.843000",
        "viewcount": 778,
        "tags": "<planning><scheduling><infrastructure>",
        "answercount": 7,
        "favoritecount": 1,
        "userId": 301,
        "comments": [
            {
                "text": "I am the Project Manager for the infrastructure components, which include middleware. Development is handled by a separate PM. We both report into a Programme Manager. The design was carried out by yet another group, and I (and the development manager) were given designs to implement. It is only now that we are beginning to understand the gaps in the design.",
                "score": 0,
                "userId": 301
            },
            {
                "text": "In 6 and 12 months, further phases of application code will be implemented, layered onto our middleware. My team will deploy the code onto the middleware, and this could include backing out code that is no longer needed, as well as adding the new code. We can make it easy to do this in future if we spend more time up front analysing the future plans, or we can go with what we know know, and hope that the changes (which include web content that may have been changed by the business as well as by the developers) are easily identifiable and not horribly difficult to back out.",
                "score": 0,
                "userId": 301
            }
        ]
    },
    {
        "id": 6305,
        "title": "Calculated duration in MS project task?",
        "body": "I would like to add a \"Bugs\" task with a duration calculated from 20% of total project duration. Is this possible in MS Project? If not, what are the options of adding a task that duration depends on duration of others?",
        "score": 3,
        "creationdate": "2012-08-12 12:44:36.727000",
        "viewcount": 4667,
        "tags": "<ms-project>",
        "answercount": 2,
        "favoritecount": 1,
        "userId": 4428,
        "comments": []
    },
    {
        "id": 6387,
        "title": "How do you manage a team of developers when their preferred working hours vary?",
        "body": "I recently read a question on here about - How to balance Teamwork and Babble? - and David Espina's answer pointed out that despite developers being contracted as 100% FTE (full-time equivalents), in reality they only deliver between 45% and 75%. For simplicity's sake, translating that statistic into hours implies that in a typical 8 hour day (9 to 5), developers only work around 4 to 6 hours. Based on my experience at work, I would tend to agree with David. In other words, I have also found that developer stamina and / or willingness to work varies quite a bit from one developer to the next. Some developers enjoy working 8 hours per day. Other developers experience stress when they work for prolonged periods of time and require regular breaks during the day in order to perform at their best. In other words, a 4-hour per day developer (let's call him laid-back Larry) gets stressed if he is required to put in 8 hours per day. This reduces Larry's morale and thus impacts his long-term productivity. Likewise an 8-hour per day developer (let's call him workaholic Winston) gets stressed when Larry takes regular breaks, because he feels like he's the one doing all the hard work whilst Larry is free-riding. But levelling the playing field by inviting Winston to work 4 hours per day instead of 8 results in a loss of long-term productivity as well. So how do you manage a team of developers when their preferred working hours vary?",
        "score": 15,
        "creationdate": "2012-08-28 09:05:52.857000",
        "viewcount": 1184,
        "tags": "<team-management><time-management>",
        "answercount": 10,
        "favoritecount": 5,
        "userId": 4523,
        "comments": []
    },
    {
        "id": 6509,
        "title": "How should we plan work on support issues without a \"battery\"?",
        "body": "We are working on a very old project with a lot of legacy code. This means that we have around 3-5 unplanned issues every Sprint. We were handling that with \"batteries\": time set aside for unscheduled issues each Sprint. But I recently read an article that recommended against using batteries, and many points from it are true. For example:  The battery is always used up, but it's sometimes used for unrelated things. The battery has a negative influence on our velocity.  How should we handle this situation in our projects? And yes, we are doing quality stories to improve the current state of the project. :)",
        "score": 11,
        "creationdate": "2012-09-06 06:21:06.010000",
        "viewcount": 627,
        "tags": "<scrum><planning><schedule-risk><timeboxing>",
        "answercount": 3,
        "favoritecount": 3,
        "userId": 4568,
        "comments": [
            {
                "text": "We used Trac plagin from Agilo. Basically you just have ability to make battery \"Live issues\" in \"20 hours\"",
                "score": 0,
                "userId": 4568
            }
        ]
    },
    {
        "id": 6546,
        "title": "Is it a good idea to replace Confluence with a custom in-house workflow based on search?",
        "body": "Our team (40 people) is currently using Confluence as a knowledge base repository. There are many problems with confluence - formatting text is limited; can't paste images in the text; editing bugs; etc. I have the idea to use something else - have a folder somewhere dedicated to documents. Anyone from the team can put files there, edit files, create folders, etc. Have also web-access with a search engine, and we have everything we want. I realize we won't be able to track changes, but I don't think it is that important for us. For second stage I think of something a little more sophisticated: Have a bot mail-user that whenever it receives e-mail, it stores it in said folder. That will make things even easier - since a lot of the information is in e-mails, all I need to do is Cc bot-mail-user, and I'm done. So my question is: Is this a good/bad idea?",
        "score": 1,
        "creationdate": "2012-09-09 23:42:50.167000",
        "viewcount": 1417,
        "tags": "<communication><knowledge-management>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 4589,
        "comments": [
            {
                "text": "Thanks for rephrasing the question. However, now it sounds obvious that it is not a good idea: Custom in-house workflow? Why would anyone write it instead of using an off-the-shelf solution?\n\nBut what I have in mind is not a custom in-house workflow. It is just intranet search engine. There are dozens of vendors and free-software projects that do exactly that.",
                "score": 0,
                "userId": 4589
            }
        ]
    },
    {
        "id": 6698,
        "title": "Agile/scrum - tracking time spent in current iteration towards stories from the next iteration if all current stories are done",
        "body": "Our team has been slowly trying to go towards agile, and like many other teams, up to this point, the question of \"what do we do when we actually finish all commitments?\" is fairly new and foreign to us. But lately it actually came up once or twice. The reason I wanted to ask this board on good practices is that we are using Rally for agile project tracking and one thing the tool does is keep track of hours and points. In order to improve our estimates, I wanted to do something with this data and provide feedback to the team on how we did in the past, by comparing metrics that show estimated task hours vs. actual task hours vs. assigned story points. This seems like it could work great as long as developers work up until the last day of the iteration or if they are late with their deliveries. Then \"actual hours\" reflects exactly what went into each story. However, what should we do when we finish early but next story would take too long to complete so we can't pull it into the current iteration? I know some people are advised to simply take the time for general cleanup/housekeeping like updating automated tests or documentation, but for sake of argument, let's say the best value to the team and the company in this specific scenario would be to immediately start working on the next story. If we are not committed to the next story, actual hours aren't tracked anywhere. And in the next iteration when we do commit, we will only identify estimated/actual hours which will go into the next iteration, at which point the work might already be 25%-50% complete.",
        "score": 11,
        "creationdate": "2012-10-01 20:58:42.290000",
        "viewcount": 1581,
        "tags": "<scrum><agile><estimation><scheduling><rally>",
        "answercount": 4,
        "favoritecount": 1,
        "userId": 1948,
        "comments": []
    },
    {
        "id": 6717,
        "title": "Is imposing \"impossible deadlines\" a Management Technique?",
        "body": "I am a developer aiming to become a manager. I want to know if the following is a valid management technique (within reasonable parameters, to be determined), I want to know how to deal with it and to use it or not. A group of developers is given a task that has a hard deadline of one week. Everyone knows that is impossible to achieve, concerns are raised, people speak up, but the deadline stands. One week later, of course, the task is not finished. The deadline is moved another week further, and so on... Could this actually be a management technique to create a sense of urgency to actually get the task done in the least possible amount of time, having management knowing full well all along that the imposed deadlines are impossible to meet?",
        "score": 35,
        "creationdate": "2012-10-03 14:24:58.203000",
        "viewcount": 12845,
        "tags": "<time-management>",
        "answercount": 15,
        "favoritecount": 10,
        "userId": 4741,
        "comments": []
    },
    {
        "id": 7867,
        "title": "Best Metrics to Show the Value of Fixing Bugs",
        "body": "My software development group has spent a significant amount of time recently on fixing existing bugs instead of working on new development.   Using our bug tracking software, I can get data on how many total bugs were fixed by time period and which areas of the software had the most bugs reported. What is the most useful information I can extrapolate from these results?  I know there is a lot of material available about performance metrics, but I am trying to get ideas on which would be most helpful for this situation. Essentially, I want to be able to demonstrate the effectiveness of the recent time that we've spent dedicated to bug fixes. For me, it's not enough to just say that we were able to fix more bugs, I want to be able to show a dramatic overall improvement in the software. For example, would it be best to measure the decreasing rate of customer complaints? If not, what is the best application of data related to software bug fixes?",
        "score": 12,
        "creationdate": "2012-10-19 21:06:54.267000",
        "viewcount": 4167,
        "tags": "<metrics><reporting><bugs>",
        "answercount": 7,
        "favoritecount": 2,
        "userId": 4139,
        "comments": [
            {
                "text": "@jmort253 - Essentially, I want to be able to demonstrate the effectiveness of the recent time that we've spent dedicated to bug fixes.  For me, it's not enough to just say that we were able to fix _more_ bugs, I want to be able to show a dramatic overall improvement in the software.  For example, would it be best to measure the decreasing rate of customer complaints?",
                "score": 0,
                "userId": 4139
            }
        ]
    },
    {
        "id": 7904,
        "title": "How to better balance resources in a cross-functional agile team?",
        "body": "I am the project manager for a team composed of employees who were hired specifically as QA or development prior to agile/scrum being adopted by the organization. Just for background, I came into the organization after the implementation of scrum.  The problem we're having is at various times during a sprint, team members will announce that they have no work to do. There are still many items that aren't \"done\", but either someone is already working on them or they're not in the phase that person feels they're responsible for - developers have no work because everything is in QA or vice versa. Previously, they would just pull more items off of the product backlog - no team commitment, no discussion, they were allowed to just pull something else in to the sprint. That, I put a stop to immediately, explaining by doing that they were committing to things for everyone else on the team without asking them first. I should also mention that the team rarely meets their original commitment set in planning, let alone the extra items pulled in, because things get stuck in phases even though there are team members claiming they have nothing to work on. The idea of a single team working together to get everything to \"done\" has been explained to them, but developers say they weren't hired to do QA and QA says the developers just get in their way when they try to help on QA tasks and they don't understand how to properly test from a QA perspective. I've also explained that developers don't necessarily have to test and testers don't necessarily have to develop, but that the entire team should be working (through self-management) to either get committed items to \"done\" or doing something to benefit the team in the future (updating docs, maintaining the build/CI systems, improving automated testing, etc.) Regardless, we still get team members saying they don't have anything to do and want to pull new items in from the product backlog.  I feel that what they're really saying is: 1. There's nothing left in this sprint that I WANT to do. 2. I really want to get a head start on that so I have less work to do next sprint.  As a project manager, none of the team members directly report to me. I have discussed this with their managers individually and while they agree this is a problem, they feel that they can't force this.  The most direct result of this is that QA is constantly behind. When we start a sprint there are already several items ready for QA. While they work on these items, things keep piling up and at the end of the sprint we've got a giant set of items in QA and developers saying they have nothing to do. Of course with items not getting finished in a sprint, the next sprint comes and the problem keeps getting slightly worse and worse as QA can't keep up.  Does anyone see any course of action here? Thanks in advance.",
        "score": 19,
        "creationdate": "2012-10-24 17:18:57.307000",
        "viewcount": 2833,
        "tags": "<agile><scrum><team-management><team-building><cross-functional>",
        "answercount": 7,
        "favoritecount": 7,
        "userId": 4699,
        "comments": [
            {
                "text": "Yeah, I wasn't really sure what to put for the title as the problem covers a few areas. If someone can suggest a better title, I'll edit it for future searches.",
                "score": 0,
                "userId": 4699
            },
            {
                "text": "I've rarely worked with dedicated doc writers on teams. We do have a dedicated requirements analyst who works with the product owner to develop good user stories. They don't do what I would consider formal unit testing, but they feel it constitutes unit testing. Unit testing to them just means the developers casually test what they've written before it goes to QA. There's no structure to it.",
                "score": 0,
                "userId": 4699
            }
        ]
    },
    {
        "id": 7912,
        "title": "How can I identify quality objectives and associated metrics?",
        "body": "Our project was on ENROLLMENT SYSTEM DEVELOPMENT. We are 4 members and we are adding new software to improve the system to give clash free timing to students. Stakeholders are:  My teammates  The University  Here are the time constraints:  Project Start Date: August 30, 2012. Projected Finish Date: October 21, 2013  But the problem is that now we're having trouble approaching these 3 questions:  What Quality Objectives would be needed for the project? What metrics should we use to measure the quality of this project? What actions should we take to ensure Quality Assurance of this project?  The answer to these questions are not in my syllabus.",
        "score": 0,
        "creationdate": "2012-10-26 02:29:34.730000",
        "viewcount": 3657,
        "tags": "<metrics>",
        "answercount": 4,
        "favoritecount": 2,
        "userId": 4881,
        "comments": []
    },
    {
        "id": 7954,
        "title": "How do you manage technical debt?",
        "body": "In real world, business initiatives always take higher priority as there are associated ROIs and deliver something tangible to the users. But there are technical initiatives and projects that need to be done to keep up with the different versions of software, upgrading to a newer platforms, architecture re-factoring etc.,   How can we plan, prioritize and manage such competing initiatives? Is there a model to quantify technical debt and its impact to the business?",
        "score": 21,
        "creationdate": "2012-11-01 04:55:55.430000",
        "viewcount": 1851,
        "tags": "<planning><prioritization>",
        "answercount": 6,
        "favoritecount": 8,
        "userId": 4731,
        "comments": []
    },
    {
        "id": 8059,
        "title": "How to keep a requirements gathering discussion focused on business needs and not technical details?",
        "body": "I'm certain that acquiring the business requirements from the clients and providing the work items for the developer teams are always a headache for experienced business analysts as well. A few days ago, it was my first time to talk my clients, who ask us to develop an ordering application for the Windows platform. After that I was recommended to carry on the necessary research and summarize the business needs. I am a fresh graduate of Information Engineering and I don't know much about software development processes, and I have less experience in discussing business proposals with clients about reducing operational costs and process improvements. Nevertheless, I had to draft a wireframe for our application along with all the possible use cases and architectural specifications. At the moment it is hard for me to distinguish between the business analyst role and the programmer role, which I also have in our 3 men team, but I have to figure this out in order to be able to communicate with our clients. So, what is the best way to collect business requirements?  Is there a good way to translate business requirements to software development requirements? How can I gather business requirements without getting into deep technical discussions?",
        "score": 7,
        "creationdate": "2012-11-15 04:30:42.487000",
        "viewcount": 3828,
        "tags": "<project-team><communication-management><business-analyst>",
        "answercount": 4,
        "favoritecount": 3,
        "userId": 4714,
        "comments": [
            {
                "text": "To gather business requirememts",
                "score": 0,
                "userId": 4714
            },
            {
                "text": "already updated",
                "score": 0,
                "userId": 4714
            },
            {
                "text": "The major problems is that I really cannot have a clear cut to analyse which is functional or non-functional. Some non-functional part can indeed be functional ,such as loading the clients that only a particular staff to deal with",
                "score": 0,
                "userId": 4714
            },
            {
                "text": "and also, to summarize the requirement , it tend to be drafting software design spec rather than software requirement spec.",
                "score": 0,
                "userId": 4714
            }
        ]
    },
    {
        "id": 8098,
        "title": "Handling bugs in the Scrum process?",
        "body": "I have recently gone live with a big project. To meet a tight deadline some technical debt was accumulated but the true extent only became apparent after go live.  As this is intended to be a scalable application, these problems which could be deep seeded into the code have to be resolved.  Should these issues be grouped under user stories / child tech tasks and be accounted for within the sprint process? I think not as it is fixing existing functionality and should be logged as tasks / child tasks outside the sprint process. Or should I add them to account for what the team is doing?  Many thanks.",
        "score": 19,
        "creationdate": "2012-11-21 09:25:25.083000",
        "viewcount": 2373,
        "tags": "<agile><scrum><bugs>",
        "answercount": 3,
        "favoritecount": 6,
        "userId": 4349,
        "comments": []
    },
    {
        "id": 8171,
        "title": "How to improve and facilitate prioritization of bug fixes?",
        "body": "In a long-term software project with frequent releases, end-users regularly report bugs and defects in the product. When the reported bug is highly critical, the fix is generally developed and released right away. Otherwise the bug is recorded into a bug-tracking system, which is basically a list. One of the tasks of the product owner is to prioritize this list and decide what fixes to include in the next release. The difficulty of prioritizing defects will increase along with the number of reported defects. Specifically, it is difficult to:  Estimate implications of each bug (including risk, technical complexity, etc.) See the whole picture : How stable is the product? Did the quality drop with the last release? etc. Identify duplicate bugs  What process or tool can the product owner (and the team) implement to facilitate (and potentially improve) prioritization of bug fixes? What are the advantages/disadvantages of these processes or tools?",
        "score": 11,
        "creationdate": "2012-12-02 01:09:50.133000",
        "viewcount": 3008,
        "tags": "<software-development><bugs><prioritization>",
        "answercount": 4,
        "favoritecount": 3,
        "userId": 4071,
        "comments": [
            {
                "text": "This question is discussed on meta : http://meta.pm.stackexchange.com/questions/544/how-to-ask-about-examples-of-best-way-to",
                "score": 1,
                "userId": 4071
            },
            {
                "text": "I intentionally remained vague to allow different answers. Indeed I already have an answer that fits my needs well, but I'm sure other people might have the same issue and would seek for an answer here. I'm also pretty sure that many PMs here have changed their web-based bug trackers to another tool because of prioritization issues.",
                "score": 0,
                "userId": 4071
            },
            {
                "text": "Just edited the question to give some details about difficulties experienced by the product owner when prioritizing bugs. Feel free to edit the question if I missed something obvious",
                "score": 0,
                "userId": 4071
            }
        ]
    },
    {
        "id": 8556,
        "title": "Team velocity fluctuates a lot, how to find the root cause?",
        "body": "I have plotted my team burn up chart and its velocity per iteration. To me it looks really bad (velocity fluctuates a lot). What should I be looking for to diagnose the root cause of this behaviour?",
        "score": 12,
        "creationdate": "2013-01-30 10:06:26.100000",
        "viewcount": 4434,
        "tags": "<scrum><agile><metrics><burndown-chart><velocity>",
        "answercount": 5,
        "favoritecount": 4,
        "userId": 5484,
        "comments": []
    },
    {
        "id": 8793,
        "title": "What to do with incomplete stories that depend on customers",
        "body": "We're starting with scrum, user stories, and agile. Some of our tasks require final testing from our customers to verify that they are completed according to their needs, but sometimes they don't complete the testing, or respond, for well over a week (or 3). What is the best way to handle these tasks for QA? Can we close the task as complete after X days? Should we have the sales rep remind them a couple times? We're trying to load our sprints 1 week at a time, would having a larger, month-long project to push these things to be a good option?",
        "score": 8,
        "creationdate": "2013-02-26 23:14:22.147000",
        "viewcount": 914,
        "tags": "<sprint><customer>",
        "answercount": 3,
        "favoritecount": 2,
        "userId": 4735,
        "comments": [
            {
                "text": "Lack of action - they get busy or otherwise put off the testing. Which, of course, makes it hard to verify that it works as they need it to",
                "score": 0,
                "userId": 4735
            }
        ]
    },
    {
        "id": 8809,
        "title": "Why does Pivotal Tracker discourage estimating points for bugs and chores?",
        "body": "Pivotal Tracker \"strongly discourages\" estimating velocity points for bugs and chores \u2013 you have to change a setting and accept a warning to be able to do it. They explain why here, but I just don't understand it. Here is an excerpt:  By measuring velocity in terms of features only, Tracker can estimate how much real, business-valued work can be completed in future iteration, allowing you to predict when project milestones might be achieved  Chores and bugs take time. How can ignoring this help you to predict when a milestone will be reached? Say you need to complete three more features to get to the next milestone, and you also need to complete a chore (because one of the features can't be started until that chore is done)... How could discounting the time needed for the chore help you to estimate when the milestone will be reached?",
        "score": 25,
        "creationdate": "2013-02-28 12:49:41.563000",
        "viewcount": 6385,
        "tags": "<agile><pm-software><pivotal-tracker>",
        "answercount": 4,
        "favoritecount": 5,
        "userId": 5680,
        "comments": []
    },
    {
        "id": 9287,
        "title": "Should the same person do the testing who did the development?",
        "body": "Background We have 50 employees who are working on different projects in a team of 3-4 people. In my firm the testing is done by the developers. We have 2 or 3 products with a large code base that we constantly modify while we add new functionality. Question Should the same person do the testing who did the development, or should another team member do the testing?",
        "score": 6,
        "creationdate": "2013-05-31 14:46:54.073000",
        "viewcount": 1760,
        "tags": "<roles><quality-management><testing>",
        "answercount": 8,
        "favoritecount": 2,
        "userId": 6263,
        "comments": []
    },
    {
        "id": 9338,
        "title": "Create team activities that will lead to an improved documentation process",
        "body": "One of my goals for this year is to try to improve the documentation process within the R&D-department. My first step have been to sit down with each developer and talk about documentation in general and how they feel about our current documentation process. The (almost) unanimous response I got was;  I can't find the documentation I'm looking for. I don't trust the documentation I find as it is probably outdated because nobody updates documents once they are created. Process? Well we put whatever document we create in the documents folder and that folder is a mess... I miss information related to requirements, design and implementation. Creating documents can be hard. Document templates would help. It is very important that we document what we should do and what we have done!  This is terrible! Because this means that whatever documentation that is created is \"worthless\". The good thing is that I there is a common urge from the team to actually fix this. We have a team building activity coming up in two weeks and my manager have given me a few hours for discussions around this topic. The question is - how would you spend these hours to make sure that you got the best result?  The background to this is that I a while back asked a question on how to resolve the problem of a non-existent pseudo process, How do I improve the development process when the only 'spec' is a \"slogan\" from management. As a consequence I have started working more on involving the team around the problems that I see. And less of my just keep presenting solutions to problems they haven't really thought about.",
        "score": 3,
        "creationdate": "2013-06-10 11:37:38.353000",
        "viewcount": 2151,
        "tags": "<documentation>",
        "answercount": 4,
        "favoritecount": 2,
        "userId": 5096,
        "comments": [
            {
                "text": "I agree that I am lucky to have such a strong consensus from the team! But I still think it is really terrible that most the effort going into creating documentation up until now have been in vain...",
                "score": 0,
                "userId": 5096
            }
        ]
    },
    {
        "id": 9538,
        "title": "What if you finish all stories before sprint ends?",
        "body": "What we should do if we run out of stories during sprint (e.g we are still learning what is our true velocity)? Can programmers pick some unscheduled bugs to fix or should we end sprint prematurely?  What if one person still is working on his task when all others already finished? Should they all help to finish that story or try to fill up time with some techical tasks (try to reduce technical debt)?",
        "score": 13,
        "creationdate": "2013-07-13 09:52:05.293000",
        "viewcount": 11188,
        "tags": "<scrum><agile><sprint>",
        "answercount": 3,
        "favoritecount": 7,
        "userId": 5085,
        "comments": []
    },
    {
        "id": 9631,
        "title": "Is there an Agile methodology that fits with large refactoring?",
        "body": "Some background: At work, there are several epic (user visible) stories whose effort will be greatly reduced by improving the roles and permissions infrastructure in our code base. However, the effort of shoe-horning any one of these epics into existing infrastructure is less than the effort of improving the infrastructure. Our team has been tasked with improving our roles and permissions. Additionally, since we would like to follow an Agile methodology, we have been given one of the mentioned epics to work on and are attempting to follow Scrum while building it. However, we are struggling with coming up with user stories that produce work that:  is user facing (as all user stories should be), improves our infrastructure in any significant way, and fits into one sprint.  It seems to be a 2 out of 3 deal: Either we make things user facing and fit into one sprint at the expense of making things harder to fix in the future, or we improve things in 1 sprint that we can't show anybody, or we improve things and make changes user facing but it doesn't fit into 1 sprint. This makes me wonder if there is an Agile methodology that would work for us better than Scrum. Do you have any suggestions?",
        "score": 9,
        "creationdate": "2013-07-25 21:37:47.757000",
        "viewcount": 2776,
        "tags": "<scrum><agile><software-development>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 6607,
        "comments": []
    },
    {
        "id": 9674,
        "title": "Title/subject formalism in bug reports (standardising bug naming only): I was , I did , I got",
        "body": "Intro We use different formalisms in titles/subjects for different purposes (story, feature, test), but we have no formalism for bug reports... We are investigating the advantages of a standardised title format for bugs. Different formalisms for titles/*subjects* in use, practically We use with quite a success these formalisms in titles/*subjects* . Story title For Scrum stories, we use the following title formalism: As a <role>, I want <goal/desire> so that <benefit>  Feature title For FDD (Feature-Driven Development) features, we use the following title formalism: <action> the <result> <by|for|of|to> a(n) <object>  Tests formalism For Acceptance Tests (behaviour), we use the following formalism: GIVEN THAT <conditions>/<initial state>/<context> (no action) WHEN <actions> (performed by user) THEN <expected results>/<consequences> (that the system does)  Looking for a bug title formalism Title/subject formalism For bug reports, we think we are going to adopt a title formalism close to: I was <context>, I did <action>, I got <actual behaviour>  I only focus here on the title, not the full description! Advantages:  homogeneity across teams (when bugs needs to be passed over) strictness for better description and understanding mapping of:  the bug's 'context' to the acceptance test's 'context' the bug's 'actual behaviour' to the acceptance test's 'expected results'   Disadvantages:  it is a change to introduce, document, promote, and followup in the project you name it  Guidelines for the title/subject But this formalism is not enough for just a title, as it may need a few guidelines:  should be as short as possible do not mention a technical component or feature, as the guess and confirmation is part of the investigation and not the purpose of the creation of the bug do not make any assumption or guess just basically describe as briefly as possible the context, action, and actual behaviour, because anyway it will be detailed in the full description do not not add any markup like [stuff] or (thing), because it hinders the reading do not add any team-specific keywords, as a bug is supposed to be passed from team to team do not try to solve the issue at the reporting phase, it is the task of the assignee bring the right balance/dichotomy between barely perimetered issue, and fully understood, as in one hand it is too vague, and on the other hand the resolution is almost finished stay meaningful  \u00a0Full description (not the goal of this post) Of course, this is not the goal of this post, but in the full description of the bug free text), there will be:  Context Steps to reproduce Actual behaviour Expected results Optionnally  links to docs logs diagrams screenshots ...   With all the fields of the bug tracker software, like affected/fix versions, severity, priority, links to other tickets, etc. But this is not the subject of this post... Let's get back to the bug titles/*subjects*. Open questions on bug titles  Do you think it is worth to put up such a title/*subject* formalism in place? How do you name you bugs? (how you fully describe and manage bugs is not the goal of this discussion)",
        "score": 2,
        "creationdate": "2013-08-06 09:17:42.880000",
        "viewcount": 393,
        "tags": "<process><bugs>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 4300,
        "comments": []
    },
    {
        "id": 9717,
        "title": "How handle small refactorings and minor code base improvements in Scrum?",
        "body": "How should be handle small improvements, should we include story for them in each sprint? Or should it be done outside of the sprint scope? I am talking here about things like Uncle Bob's boy scout rule.  Other option could be to accommodate time in each ticket?",
        "score": 2,
        "creationdate": "2013-08-14 08:13:58.087000",
        "viewcount": 274,
        "tags": "<scrum><tasks><user-stories>",
        "answercount": 1,
        "favoritecount": 1,
        "userId": 5085,
        "comments": []
    },
    {
        "id": 9809,
        "title": "Advice needed: best project management solution for a small web studio",
        "body": "I am a web developer in a small web design studio (15-20 employees). It was founded back in 2005 and since that time we've made over 700 different sites (~500 projects, ~300 clients). I started working here in 2011, so I had not participated in any discussions over decisions to use any PM tools. Here's what we have now:  A pile of tables filled with information about domains, hosts, hosting accounts, domain accounts, FTP access, admin panel access, etc. All this information is presented in quite a messy way on a local website. A small CRM made for internal use; to some extends it is capable of time tracking, global \"task\" tracking, it stores project-client relations, basic project information and monthly money flows. Redmine, which is used as a bug tracker for some of the projects. One shared mailbox.  The problems are:  We still have to maintain websites that we made several years ago (not all of them, hopefully, but still this can not be neglected). Some of them smell. Some require secret knowledge. Many projects have a huge backlog, it is not stored anyhow except mail history/documents; e. g. you can't tell precisely, whether local and testing versions are synced (without a file manager). You can hardly tell who designed the frontend, who programmed the backend; to learn that, you have to spend some time searching. An enormous load of important information is stored by mailserver, and messages are not assigned anyhow to projects/clients/issues in internal CRM/Redmine. The workflow is not yet stable and I guess it never was. Some sites have a precise spec, some do not; I guess, only a couple of them have VCS and 10-20 have passed the testing stage. Most of the testing often was done by clients themself, which is awfully bad. There is a lot of SEO information associated with almost every site; we have a few interfaces to manage cross-links and seo pages, but it was never something neat.   Now we have faced all these problems, as it gets more stressful to work with old sites. I don't have any big hopes that one system can solve all these problems (almost certainly it will even get worse). But I believe that bird by bird all this mess can be puzzled out and organized.  Strategies, products and workflows are welcome.",
        "score": 2,
        "creationdate": "2013-08-29 09:53:52.600000",
        "viewcount": 402,
        "tags": "<communication><management>",
        "answercount": 2,
        "favoritecount": 1,
        "userId": 6839,
        "comments": []
    },
    {
        "id": 9926,
        "title": "How does a team learn a domain quickly and effectively on legacy applications?",
        "body": "Background We have many legacy applications which are 10-15 years old.  The readability of the code is also challenging and many applications depend on other subsystems too. Documentation on these applications are not readily available, and are often not up to date. SME availability is also poor, and some SME's have left the company. Changing code in these applications without having deep domain information is also challenging, and we tend to miss some scenarios. Business folks are also new. Question With all of these challenges, how can team members learn the domain quickly and effectively?",
        "score": 4,
        "creationdate": "2013-09-15 08:32:54.410000",
        "viewcount": 174,
        "tags": "<knowledge-management>",
        "answercount": 1,
        "favoritecount": 1,
        "userId": 6474,
        "comments": []
    },
    {
        "id": 10078,
        "title": "Project scheduling based on use cases or technical tasks",
        "body": "We have a web project going on and there are several use cases and we're now busy scheduling the development of the project. We're wondering what the best practices are about scheduling a project. Should we schedule our project based upon use cases or technical tasks? I know that scheduling based upon use cases is interesting for business because they can determine what each use case costs. However, for developers this mindset is usually not very easy to follow (they think in technical tasks). Let's say they have a technical task \"Setup Java projects\", this is a requirement for each use case, so it's hard to \"convert\" this into the functional aspect of the project. They can divide the story points for each use case, but let's say that business puts a specific use case on hold, then the project schedule wouldn't be correct anymore. So my question; what's the best way to schedule a project? Should it be based upon the functional part, the technical part or both?",
        "score": 2,
        "creationdate": "2013-10-24 10:10:38.307000",
        "viewcount": 481,
        "tags": "<scheduling>",
        "answercount": 2,
        "favoritecount": null,
        "userId": null,
        "comments": []
    },
    {
        "id": 10084,
        "title": "Balance between sharing creative control and leading the project",
        "body": "I've been working on a project for almost a year now as the Project Manager. Initially, it was just myself. Over time, several others have been engaged in the project on a much smaller scope. The project is relatively heavily modularized, primarily to accommodate this type of an environment. In my experience, I really appreciate when people share creative control. It makes you feel like you're an important part of the project, you're contributions are more than just repetitive to-spec coding, and you get to have a little fun playing around with ideas. As such, I try to grant those I work with a heavy amount of creative control on their parts of the project. I'm beginning to think this is back-firing on me because there are some tasks, which should be relatively simple, that are turning out to be huge burdens because of the amount of discussion expected. I don't want to be a project dictator but when we are in \"crunch time\" and somebody goes off on a tangent with an idea and reports back that he doesn't think my solution is ideal, I find myself becoming aggravated. I am almost always an extremely laid back person so this is surprising to me. I don't let my professionalism slip and try to hide any negative notions to keep everyone happy. Many of these issues are more related to \"personal taste\" (think Design) than a technical, provable problem. As Project Manager, I am really dealt the burden of making sure this project is completed successfully. Overall, I just want to find a way to balance letting my fellow programmers have fun and enjoy their work but also move forward faster than a snail's pace.  Can anyone recommend some ways to establish a balance between letting the developers enjoy themselves while continueing to push out a product I feel comfortable delivering?",
        "score": 4,
        "creationdate": "2013-10-24 16:11:01.500000",
        "viewcount": 176,
        "tags": "<project-team><motivation>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 5293,
        "comments": []
    },
    {
        "id": 10126,
        "title": "How do you modify a delivered user story?",
        "body": "If you delivered a user story in a previous sprint and then need to make changes to that feature in the current sprint, what do you do? Examples:  Change the user interface (UI) of a screen. Change a technical detail in how the feature was previously implemented (i.e. refactoring).",
        "score": 2,
        "creationdate": "2013-10-29 23:12:21.057000",
        "viewcount": 2055,
        "tags": "<scrum><planning><user-stories><sprint><change-management>",
        "answercount": 1,
        "favoritecount": 1,
        "userId": 1972,
        "comments": []
    },
    {
        "id": 10705,
        "title": "During a sprint, should we try to achieve 100% user story completion or 100% productivity",
        "body": "We know that during every sprint, the team's primary goal is to achieve 100% completion of user stories which are part of the sprint backlog. But what happens in practice is that, development should be completed 2-3 days prior to sprint end, so that ample time can be spent to complete testing tasks.  Now, due to pressure of completing all user stories, the team can't pull another one since they know they will not able to complete it. Which means, either developers have to analyze next sprint tasks (which still may leave some spare time) or have to sit idle. Some people may argue that planning was not good. But aren't we following Agile, where estimates may vary from actual (which leads to carry over of user stories) or maybe the scrum team completes all user stories in less time as compared to original plan. Suppose the team is pulling another user story and didn't complete it. There is argument, it doesn't look good from management perspective that user stories are getting carried over. Isn't the pressure of completing all user stories, which are pulled in a sprint, somehow decreasing the productivity of the team?",
        "score": 16,
        "creationdate": "2014-01-31 07:06:43.903000",
        "viewcount": 4278,
        "tags": "<scrum><agile><planning>",
        "answercount": 6,
        "favoritecount": 5,
        "userId": 6875,
        "comments": [
            {
                "text": "@AzizShaikh , It's looks more clear. thanks.",
                "score": 0,
                "userId": 6875
            },
            {
                "text": "@salsolatragus, Yes, after final testing we can say a US is completed. but in we know that testing also required much time/effort as development and probably bug may be found. Still during the testing time what developer will do if there is no other US is there in sprint.",
                "score": 0,
                "userId": 6875
            },
            {
                "text": "@codeGnome Actually question is goal is completed then what to do in sprint task. I can't pull US because I know that I can't able to complete it and pressure is to complete all US in sprint.",
                "score": 0,
                "userId": 6875
            }
        ]
    },
    {
        "id": 10788,
        "title": "Are inefficient/missing tools an impediment and is it the Scrum master's duty to improve them?",
        "body": "In Scrum, the Scrum master's duty is to \"remove impediments\". I think I understand what this means in terms of organizational and coaching issues. I understand that the SM watches the devs' backs and keeps disturbances from outside the team away. But, similar to this question, I don't fully understand what it means with respect to internal and (development) process related issues.  Is it or can it be a Scrum Master's responsibility to:  setup/improve a code review software system? setup/improve the continuous integration process? provide scripts/macros/helper tools to make the development process easier/more efficient ?",
        "score": 1,
        "creationdate": "2014-02-07 14:17:10.207000",
        "viewcount": 232,
        "tags": "<scrum><scrum-master><process-improvement>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 7761,
        "comments": []
    },
    {
        "id": 10804,
        "title": "How to monitor team members activity and effectiveness?",
        "body": "I would like to measure the effectiveness and efficiency of my team members.  I'd like the measurement to be relatively objective and transparent, and I believe that some form of software would fulfill those objectives.  How could I search for and evaluate such software?  What kinds of software incorporate these kinds of features (While software recommendations are out of scope because they change frequently, the underlying requirements should be more stable.)  Is there software that might:  - Diagram activity over the past year  - Facilitate peer evaluation?  - Measure improvement? Are there non-software procedures that would assist?",
        "score": 0,
        "creationdate": "2014-02-10 08:53:18.243000",
        "viewcount": 1455,
        "tags": "<team-management><team>",
        "answercount": 2,
        "favoritecount": 1,
        "userId": 8118,
        "comments": [
            {
                "text": "Hmm, but where else should i ask ?",
                "score": 0,
                "userId": 8118
            },
            {
                "text": "i found there is software recomandation site of SE? but it is curretnly closed beta.",
                "score": 0,
                "userId": 8118
            },
            {
                "text": "But i would like to know experience of such tools from project managers and team leaders. Or just the right keyword to use in google. I am not native speaker so it is kinda a problem for me :)",
                "score": 0,
                "userId": 8118
            }
        ]
    },
    {
        "id": 10927,
        "title": "Best way to deal with developers whose work is always unsatisfactory",
        "body": "The problem is not in experience,  The developers have all the necessary resources to work in a good dev environment (time, books, assistance, team leads, technical leads, senior devs, project managers). However, there are always serious problems in their work and I am forced to assign senior devs to check and fix the errors.  I have tried to say them directly about that, but this an inefficient way to deal with the problem. Bugs are too specific to assign and wait for the solution as the problem lies in overall approach to software development process.  Anyone can help to apply some methods for efficiently solving the problem? Additional information from comments  One of the major mistake they do is not apparent. If QA tests the system, all the features work right and in accordance with requirements. But, the performance sucks, which has its deep roots in code. When we analyze the code, we find that there are scripts which take much time to run, plugins which were copy-pasted without optimizing etc. Usually, we leave the devs complete freedom in implementation stage if they are not junior anymore   (from a clarification in the comments) most of the functional and non-functional requirements are well documented and daily meetings are held so that everyone understands how the system should behave. Most problems arise when the software is already in overall system testing stage or in production. Then, while analyzing we find that the dev has used short, but inefficient way to obtain a feature OR plugins were used which were not customized for the current project. It comes out that it is not a bug but insufficient attention and responsibility, which becomes a trend if I do not fix that.",
        "score": 6,
        "creationdate": "2014-02-21 13:25:12.517000",
        "viewcount": 658,
        "tags": "<team-management>",
        "answercount": 9,
        "favoritecount": 4,
        "userId": 8146,
        "comments": [
            {
                "text": "@Pierre one of the major mistake they do is not apparent. If QA tests the system, all the features work **right** and in accordance with requirements. But, the performance sucks, which has its deep roots in code. When we analyze the code, we find that there are scripts which take much time to run, plugins which were copy-pasted without optimizing etc. Usually, we leave the devs complete freedom in implementation stage if they are not junior anymore.",
                "score": 1,
                "userId": 8146
            },
            {
                "text": "@haylem all you said are of course very important. Thanks! In my comment I cannot describe you all the processes we go through, but anyway, suppose the problem domain lies in developers work. What will you do in this situation? As your position interest me very much I would like to see this as an answer",
                "score": 0,
                "userId": 8146
            }
        ]
    },
    {
        "id": 11204,
        "title": "How can the economic efficiency of a scrum team be measured?",
        "body": "I'm given the task to develop a measurement on how efficient our team is within our current development process (scrum). The measurement has to be done for the complete team not for individuals. My idea was to use the count of team members and velocity. But because velocity is a per team measurement the result will not be something useful. Any ideas?",
        "score": 1,
        "creationdate": "2014-03-26 14:23:14.800000",
        "viewcount": 210,
        "tags": "<scrum><measurement>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 8641,
        "comments": []
    },
    {
        "id": 11479,
        "title": "Is it correct to split user stories by user types?",
        "body": "I have two user account types: free and premium. Free users can upload one file per day. Premium users can upload unlimited numbers of files per day. Is it correct to split user stories by user types, as in the examples below?   As a Free User I can upload 1 file per day.   As a Premium User I can upload unlimited files per day.",
        "score": 0,
        "creationdate": "2014-05-05 13:11:49.413000",
        "viewcount": 129,
        "tags": "<user-stories>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 2847,
        "comments": []
    },
    {
        "id": 11489,
        "title": "Can Quality be an adjustable constraint of an agile process?",
        "body": "When defining the constraints of a project, the classical Iron Triangle defines three concurrent constraints: Resources, Scope and Time. Some more complex models (see the Project Constraint Model) add Quality to the above list.  I understand that view in a classical waterfall view, where quality is a separate process. It makes perfect sense at some level when QA team is some independent entity. The QA team spend time to test product, count defects or missing features and ask for product changes to development team. But I wonder if it is meaningful to see Quality as an adjustment variable inside an Agile team. As I understand it, Quality should be on par with Velocity. Some structural property of a team that you can measure and try to improve but never really control. In the past I've seen managers trying to use it as a lever and that lead to unpredictable results. In some cases trying to lower Quality lead to higher Costs, Resources and Development times (defects were caught later in the process, and that has a well known cost). I've also seen exactly the opposite: well meaning teams trying to get higher Quality which translated to heavier processes (more code reviews for instance, or more tests written), and more complex definitions of done... but without any observable positive relationship with customer value reached in the end. In the end I believe Quality is not a true adjustment variable of Agile process inside of a team, as you can neither control it nor measure it, but merely something like Velocity that can be used for it's predictive power (how many bugs will there be in the final product?) but not really use as an adjustment variable. Is Quality a legitimate constraint in Agile teams? How should it be measured? Can it be used as an adjustment variable and how?",
        "score": 0,
        "creationdate": "2014-05-06 10:06:57.810000",
        "viewcount": 1155,
        "tags": "<agile><quality><process-controls><constraints>",
        "answercount": 2,
        "favoritecount": 1,
        "userId": 9008,
        "comments": [
            {
                "text": "I wonder of the intent of the question downvoter ? Would he enlighten me ? Does it means such questions should not be asked ? I understand people may disagree with what I see and that's why I ask this. If they disagree I expect them to explain **how** they use quality (inside an Agile team, not from a separate QA team) as an adjustement variable.",
                "score": 1,
                "userId": 9008
            }
        ]
    },
    {
        "id": 11639,
        "title": "Small firm with 4 developers and 2 project managers in need of some guidance for project workflow",
        "body": "I work as a developer in a small IT firm with 4 developers and 2 project managers. We currently implement some sort of traditional project management, in which the workflow for a given project is as follows:  Project manager gathers functional requirements with client Lead developer analyses the requirements and puts estimated execution times on these requirements. Project manager calculates project price based on estimated execution time + management overhead + some margin for error. The client agrees to the project price and is promised a deadline. The project gets developed and delivered. The client notifies us in case of bugs / need for additional features/ ... Eventually, the bug notifications/feature requests fade out.  Every project we make is tailor made to the specific needs of our client. This means that task estimates are sometimes off (it's hard to estimate a task you've never done before) or that certain technical issues only arise when we are in the middle of development. This frustrates our project managers greatly, as this usually means we overshoot our estimated cost of development and our profit margin for the project slinks. However, the greatest frustration originates from missing deadlines which were promised to clients. This is because we have, at any given time, always 3 or more projects in active development. Next to that, the developers are often called directly by clients for questions/technical issues/emergencies. There's also the extra overhead when tasks are shifted from one developer to another, which then have to be explained to the developer that receives the task. Every week, one of the project managers assigns tasks to the developers that need to be finished that week to meet the deadlines. Of the 38 assignable work hours per developers, 4 hours are left unassigned to account for unforeseen events. There's also a new developer that just joined us three weeks ago, and he needs some technical help from time to time which also, on average, takes about 2 to 3 hours of my time every week. In conclusion, these 4 hours have so far never been sufficient. Communication with management, high priority bugs, ... takes longer than 4 hours every week. Management blames the developers for being unable to prioritize and says we should put more effort in making accurate estimates and actually meeting our deadlines. My question is this: what is the right approach here? How can we better estimate the scope and duration of a project and effectively set and meet its deadlines? What needs to change? Thank you in advance.",
        "score": 6,
        "creationdate": "2014-05-26 17:10:49.667000",
        "viewcount": 419,
        "tags": "<planning><estimation><methodology><deadline>",
        "answercount": 2,
        "favoritecount": 5,
        "userId": 9190,
        "comments": []
    },
    {
        "id": 11771,
        "title": "How to combine continuous delivery cycle with iterations?",
        "body": "I'm the leader of a small team (a few programmers, plus product manager) practicing continuous delivery. The development stages for features are:  Coding: A programmer prepares a branch with the feature, up to a specification. The feature is reviewed by Product Manager at the end of this stage. Code review: Implemented with merge requests. A fellow programmer looks at the code, points out issues, programmer works to fix them. When everything is OK, the feature is integrated to main development branch. Deployment: after passing the automated tests suite, the contents of main branch gets pushed to production servers. This currently happens twice a week.  For planning our work, we're using 2-week iterations - Product Manager proposes feature to work on, we estimate them, and based on that allocate them to programmers for the iteration. My questions are:  During an iteration, what should we commit to? Right now we're saying that by the end of iteration, the coding (stage 1) has to be finished. This is because there might be some delay between coding and review (since the reviewer is also working on something). I'm a bit hesitant to include all 3 stages as required to finish, because this means by the end of iteration, everyone is working on code review, instead of the features following their development cycles unconstrained.  How much should be planned regarding delivery date? With the current setup, we can only say that the feature should be deployed sometime during the next 3 weeks (iteration + a window for code review and deployment). Can we do better? Should we?  Because of the above: how much should we plan regarding work ordering?   Should we, for instance, say during which days which features will be worked on, and reviewed? Or specify a strict order in which the features will be worked on during an iteration? Or give the order as priorities, but allow more freedom? Again, I don't want to constrain the programmers too much here. Detailed up-front planning doesn't sound very useful for me, and the actual ordering of work is something I'd rather give freedom at as well (perhaps with the priorities as a soft guideline). But I'm not sure if that makes the delivery date much more certain.",
        "score": 3,
        "creationdate": "2014-06-19 09:08:10.117000",
        "viewcount": 288,
        "tags": "<agile><planning>",
        "answercount": 2,
        "favoritecount": 3,
        "userId": 9042,
        "comments": []
    },
    {
        "id": 11902,
        "title": "Calculating a running sum of subtask cost amounts",
        "body": "How can a Summary task reflect a running sum of subtask input amounts?",
        "score": -1,
        "creationdate": "2014-07-08 19:35:20.567000",
        "viewcount": 12562,
        "tags": "<ms-project>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 10501,
        "comments": []
    },
    {
        "id": 11980,
        "title": "How to track and manage tooling issues?",
        "body": "In every complex project, we use a lot of external dependencies and tooling. Of course, they have bugs. Thanks to Github and the like, it is very easy to fork a project and track issues in libraries dependencies so that's not the scope of this question. The tooling however, can me much more complex to inspect, debug, and submit. Let's restrict here to the Open Source tooling. If the tool is only used for development and testing purposes, the priority for fixing these annoying bugs is quite low. That's why often, we don't even report the issue as soon as someone found a workaround. This is bad. We should keep track of the tooling issues as it explain a lot about the life of the project and having them somewhere show everyone that we can fix it, and it will be some value in these fixes. But in the other hand we can't put these issues in the same bucket that the project because they are unrelated and will pollute our issue tracker. Happiness of my team is one of my top priority, and I cry inside when I see them having to document complex rituals for random situations involving specific conditions met once a week or less. How do you handle the issues related to your tooling ? How do you prioritize these bugs ? I realize that my question is quite vague, but I hope it's clear anyway. I will be happy to improve it if you see some flows.",
        "score": 3,
        "creationdate": "2014-07-18 14:01:59.540000",
        "viewcount": 312,
        "tags": "<planning><software-development><time-management><quality-management>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 11606,
        "comments": [
            {
                "text": "I currently use Kaban boards (Trello) linked with tech and support resources. It's a pretty flexible setup. I think the pollution will be as a constant noise with a bunch of long tasks with low business value. I want my team to clear happily the board during the week, this is not compatible in my mind with a list of long lasted task never filled, staying just next to the sprint. About our bug policy, [we solve bugs before writing new code](http://www.joelonsoftware.com/articles/fog0000000043.html) (point 5), so our technical debt is quite low.",
                "score": 0,
                "userId": 11606
            }
        ]
    },
    {
        "id": 12091,
        "title": "How can we stop developers from working on stories that are not planned into the current sprint?",
        "body": "ORIGINAL QUESTION We carefully plan out a sprint and decide which stories should be worked on however some developers are working on stuff outside of this planned work. This is undermining the whole process.  What techniques can we use to encourage/enforce developers to stick to the planned stories? UPDATES:   Having talked to the developers we know they are working on the stories because they find them interesting or consider them important.  We have tried no techniques so far except asking/telling the developers not to.  Developers are working on both planned and 'personal' stories in parallel. The planned stories are sometimes completed but often not. The non-planned stories being worked on are legitimate pieces of work, just ones not prioritised into the current sprint.  The extra tasks being worked on are not refactoring. We consider refactoring to be part of a story, not a separate story in itself. http://xprogramming.com/articles/refactoring-not-on-the-backlog/ It is only a small number of developers in the team that are doing this, and they are a mixture of experienced and junior developers.  We have contractors on the team however it is the permanent staff that are going off-piste. The team has been working together for a few years although there are some new members of the team. We recently moved from Kanban to Scrum. We are in our 2nd Sprint. The developers in question have a history of going off-piste. I guess the original question might have been better worded: \"In the Scrum methodology, what techniques can we use...?\" The issue has been raised in the retrospective and the problem persists",
        "score": 13,
        "creationdate": "2014-08-06 16:30:39.480000",
        "viewcount": 3696,
        "tags": "<scrum><agile>",
        "answercount": 6,
        "favoritecount": 1,
        "userId": 11758,
        "comments": [
            {
                "text": "@Iain9688 I've updated the question.  Thanks.",
                "score": 0,
                "userId": 11758
            },
            {
                "text": "@ashok I deliberately left roles out of the question as I wasn't sure if that was relevant. In this particular situation however I am the Scrum master.",
                "score": 0,
                "userId": 11758
            },
            {
                "text": "@AndSoYouCode We know this because we have asked them. I'll update the wording as it was misleading/unclear, thanks.",
                "score": 0,
                "userId": 11758
            }
        ]
    },
    {
        "id": 12303,
        "title": "Does it make sense to reopen closed User Stories in a Scrum project",
        "body": "I was asked to adjust our ticket-workflow and I don't know if it's a good route that we're taking here. So I'd like to ask for your opinions. Our project is being developed based on a Scrum process with weekly sprints. As project management we use JIRA + Agile. We're around 10 people working on that project. However, around 50% are working from remote. Our current workflow of issues is:  [Product Owner] Open  [Developer] In Development  [Developer] In Code Review [Tester] In Testing  [Product Owner] In Acceptance  [Product Owner] Done  Currently, if a ticket / user story is marked as done, the code changes get merged into the master branch. We also at the moment can't reopen a closed (Done) ticket. If there is a defect which - maybe directly - can be connected to a previously closed ticket, we create a new one. However, we had a discussion on adding the possibility to reopen a ticket. From your point of view, does this fit within a Scrum-process? Does it make sense to reopen a closed / into master-branch integrated ticket? Should this only be applicable for tickets from the current Sprint or release? What are the advantages and disadvantages of such an approach?",
        "score": 7,
        "creationdate": "2014-09-11 14:14:18.623000",
        "viewcount": 7659,
        "tags": "<scrum><jira><scrum-of-scrums>",
        "answercount": 4,
        "favoritecount": 2,
        "userId": 12047,
        "comments": []
    },
    {
        "id": 12504,
        "title": "What is the recommended practice for adding and organizing technical debt for a project?",
        "body": "I am new to software engineering and looking for someone with agile experience to help me understand what the recommended practice is and why. If this question can be related to a better site please note that site please.",
        "score": 3,
        "creationdate": "2014-10-21 16:56:51.777000",
        "viewcount": 131,
        "tags": "<software-development>",
        "answercount": 3,
        "favoritecount": 1,
        "userId": 13368,
        "comments": []
    },
    {
        "id": 12581,
        "title": "Test capacity prohibiting stretch goals",
        "body": "In my current team of 3 dedicated testers and 3 dedicated developers we often find ourselves in a scenario towards the end of our sprint (usually the last 2-4 days of our 2 week sprint) where the developers have nothing to do yet cannot commit to any stretch goals because the testers are at full capacity testing the code written in the first half of the Sprint. We have on occasion been asked to just commit to development work on a particular story but this feels wrong as it isn't potentially shippable at the end of the Sprint and we end up having a test only task for this story in the subsequent sprint. We have also tried asking the developers to test (this hasn't gone down well), but in any case the stretch task (based on the estimates) still won't fit into the Sprint. I have a feeling that this is a common problem in SCRUM but I can't any solutions to this. I would appreciate if anybody has any experience in dealing with this situation.",
        "score": 5,
        "creationdate": "2014-11-07 09:26:49.493000",
        "viewcount": 270,
        "tags": "<scrum><agile><team-capacity>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 13504,
        "comments": [
            {
                "text": "Yes, all of the code has near 100% coverage in most cases and the testing is a mix of manual and writing new automation tests on a subset of the test cases.",
                "score": 1,
                "userId": 13504
            }
        ]
    },
    {
        "id": 12758,
        "title": "How can we continuously integrate new features when the PO only determines whether a feature is \"done\" at the end of each Sprint?",
        "body": "My team is having an issue with integrating software product features. Specifically, when do features get pull requested into our integration branch of code? Currently our understanding is:  The Product Owner is the only person who can say that a feature or User Story is \"done\". The Product Owner makes his decision on whether a User Story is \"done\" at the end of sprint, during the Sprint Review Meeting.  With the points above, it appears that pull requests for our \"done\" features or User Stories should occur at the end of our sprints. But how can this be the case? If we merge several features together after we get the Product Owner's approval, it may be the case that the features conflict or break each other. Now the features are no longer \"done\", additional work to resolve conflicts must be done, etc. How can we continuously integrate our new features (allowing us to do realistic integration testing) while retaining the fact that the Product Owner is the final say of whether or not a feature is \"done\"?",
        "score": 10,
        "creationdate": "2014-12-04 19:28:09.537000",
        "viewcount": 1854,
        "tags": "<scrum><software-development><product-owner><definition-of-done>",
        "answercount": 5,
        "favoritecount": 1,
        "userId": 13724,
        "comments": []
    },
    {
        "id": 14106,
        "title": "How to repay technical debt still delivering features?",
        "body": "The picture I saw far too many times over my career. A team of developers in a company driven by non-technical management, practising scrum, severely pressured to deliver points and features by certain deadline therefore having no chance to concentrate on quality or dealing with technical debt. Not many developers if at all understand what is going on in depth of code, tests coverage is not sufficient so any attempt of refactoring anything leads to bunch of regressions. It takes more and more time for a frustrated team to add a feature and then even more time to figure out why this feature broke the product in several places and how to fix it without breaking in further. Management understands that something is not right and hires a new head of dev expecting him to bring improvements resulting in more features delivered quicker. It is usually very difficult to explain to management that it will take time to repay technical debt and that the team will be even slower refactoring rather than delivering features. What is usually the best strategy with that? Are there any links on success stories?",
        "score": 7,
        "creationdate": "2015-01-29 15:02:27.197000",
        "viewcount": 967,
        "tags": "<scrum><project-team><relationships><negotiation>",
        "answercount": 6,
        "favoritecount": 1,
        "userId": 16159,
        "comments": [
            {
                "text": "I am sorry if it sounds to you as a 'disdain'. Do you have any practical solution for situation I described?",
                "score": 1,
                "userId": 16159
            }
        ]
    },
    {
        "id": 14164,
        "title": "Communicating change impact to clients",
        "body": "I am working with a technical client ( means he himself developed that website from  some other developer by his instructions and code is now code is completely messed up ) and he has mentioned in the main document that he wants to change the raw code into a class based code and remove deprecated code and and performance issue of complete website code However when we make changes the client angrily asks why we are cleaning up the code and pushes us to do only the tasks which they assign. Actually we are doing only changes in those file but code is interrelated. Suppose he said to change all mysql statements to PDO (PHP Data Objects as an abstraction layer used for accessing databases). We have two options. Either we create PDO connections in every page or change the db object from config file. If we change in the config file then it will stop working with all other pages where mysql code is running. So my question is, how can we tell the customer that the changes we are doing have an impact on overall project so they will take time?",
        "score": 2,
        "creationdate": "2015-02-06 05:57:49.927000",
        "viewcount": 552,
        "tags": "<change-management><project-management-style>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 1355,
        "comments": []
    },
    {
        "id": 14341,
        "title": "How picky should I get with a team member's quality of work?",
        "body": "I am a web development team leader. One of the team members turns in code that is almost always bloated and inefficient, even though it technically works (although, from time to time it doesn't). I don't want to micromanage, but almost all of the work could be done in a much better way, and I'm concerned about future updates and other people working in his code having a hard time.",
        "score": 13,
        "creationdate": "2015-02-24 22:45:55.883000",
        "viewcount": 680,
        "tags": "<quality><team>",
        "answercount": 4,
        "favoritecount": 4,
        "userId": 16381,
        "comments": []
    },
    {
        "id": 14345,
        "title": "Any tips on how to 'sell' the necessity of dealing with technical debt to nontechnical stakeholders?",
        "body": "A number of stakeholders do not quite understand the necessity of dealing with technical debt preferring new features on top of not very maintainable code. Development is sometimes seen as kids who just want to play the coolest toys. Can anyone suggest anything which will make the job of  'selling' the necessity of dealing with technical debt as a main priority? Any youtube videos, articles, books recommendations and links on success stories would be very appreciated.",
        "score": 27,
        "creationdate": "2015-02-25 10:09:34.787000",
        "viewcount": 2310,
        "tags": "<scrum><agile><planning><technical-leader><sales>",
        "answercount": 6,
        "favoritecount": 7,
        "userId": 16159,
        "comments": []
    },
    {
        "id": 14360,
        "title": "How to measure the amount of existing technical debt, to track the progress?",
        "body": "It must be a tough question but I still hope to get some insight.",
        "score": -4,
        "creationdate": "2015-02-26 10:59:18.090000",
        "viewcount": 168,
        "tags": "<scrum><agile><performance><technical-leader>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 16159,
        "comments": []
    },
    {
        "id": 14629,
        "title": "What we should do, if after planning we still have some free time in Sprint (i.e. unused forecasted capacity) and no tasks that will fit in it",
        "body": "A question about Sprint planning. Let's assume, that Team velocity are 20 Story Point (SP). The most prior Stories in Product Backlog are A (12 SP), B (5 SP) and C (4 SP). It's easy to see, that if we will take all three tasks (21 SP), most likely we will not finish task C. But if we take only A and B (17 SP) we will finish sprint early. There are two possible solution:  take all three task in current Sprint and hope that we will finish it all or plan to take only A and B tasks, and after we will finish them, take task C during Sprint.  It seems, that these two solutions are similar. But, in my opinion, there is a difference. It is motivation. First solution: it will motivate Team to hurry up. But demotivate, if team will not doing all planned work. By my experience, second case happen more often. Second solution: I saw, that work usually takes all planned time. And it's not related, how exactly time we allocate to this work. So, if we will plan only two tasks in Sprint, we likely will do this two tasks whole Sprint. What Scrum say about this? Which way we should use?",
        "score": 4,
        "creationdate": "2015-04-09 17:29:10.213000",
        "viewcount": 671,
        "tags": "<scrum><planning><motivation>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 8417,
        "comments": []
    },
    {
        "id": 14692,
        "title": "Should we put internal team tasks into Product Backlog?",
        "body": "Developer Team always has internal tasks (such as environment improvements, process improvements and so on). Sometimes they can be related with current project, sometimes not. There is no problem, if these tasks are related with current project (for example, make Continuous Integration process for current project). Product Owner will have no objections for adding these tasks to Project Backlog and can set priority for all of them. But what should we do, if these tasks are common and not related with current project (For example, we want to establish code conventions and use automatic code style checker in our process). Even if we will persuade Product Owner to add this task to Product Backlog, I am sure, he will set priority for this task as small as possible. And it has sense for him, because accomplishment of this task will not give huge benefit for current project. But in other side, it will give quality increase for Developer Team in current and all other projects (PO, of course, absolutely don't care about other projects). And in general, I think it's not a good idea to add to Product Backlog tasks that does not related directly to the product. But if we will not inform Product Owner about these things and not add them to Product Backlog, but doing them during Scrum, then Scrum well lose his transparency (one of three Scrum pillars, as Scrum Guide said). So, what should we do with this kind of tasks?",
        "score": 4,
        "creationdate": "2015-04-16 17:27:09.770000",
        "viewcount": 2945,
        "tags": "<scrum><tasks><product-owner>",
        "answercount": 4,
        "favoritecount": 4,
        "userId": 8417,
        "comments": []
    },
    {
        "id": 14722,
        "title": "MS Project: Show annual project cost",
        "body": "I am currently planning a project in MS Project. After allocating all resources and other cost to the tasks I need to present the annual budget of the project (split into manpower and direct cost). How can I show the project cost per resource per (fiscal) year?",
        "score": 0,
        "creationdate": "2015-04-21 09:54:37.950000",
        "viewcount": 2275,
        "tags": "<ms-project><cost-management>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 16841,
        "comments": []
    },
    {
        "id": 14943,
        "title": "Definition of Done or How to really finish tasks?",
        "body": "Sometimes it is hard to close a task. There might come a new information which demands an update of the task. The task remains a long time almost finished. New Versions and baselines allows us to close a milestone but allows thoughts like I fix this in the next release. I'm talking about the tasks staying at 90% in MS Project for much longer time than reaching those 90%. Nevertheless, PM processes and tools usually demand a point in time when you say I'm done!, e.g. Scrum or EVM. Fore sure, I know some theory: Tasks should be defined e.g. SMART, SCUM demands Definition of Done. But how to handle this in real life, incl. documentation and team commitment, taking the usual shortages in time and budget into account?",
        "score": 4,
        "creationdate": "2015-05-14 07:02:28.197000",
        "viewcount": 2893,
        "tags": "<scrum><task-management><waterfall><evm><definition-of-done>",
        "answercount": 6,
        "favoritecount": 1,
        "userId": 7837,
        "comments": []
    },
    {
        "id": 15069,
        "title": "How to calculate sprint capacity?",
        "body": "Let's say the team works 5 days, and there are 3 developers in the team, and they are working 8 hours per day. So actually it is easy to calculate: 5*3*8=120 hours of work per week. But there is something missing: there is no time for testing and code review process at the last day of the sprint. Because it takes some time to test sprint items and Friday night (last day of sprint) works cannot be sent to done. So for agile principles, how should I calculate sprint capacity? Should I estimate it at 4 days? If so, what should developers do on the last day?",
        "score": 14,
        "creationdate": "2015-06-01 07:10:29.600000",
        "viewcount": 46115,
        "tags": "<scrum><agile><team-capacity>",
        "answercount": 7,
        "favoritecount": 9,
        "userId": 17335,
        "comments": []
    },
    {
        "id": 15140,
        "title": "Cumulative Flow",
        "body": "This project--developing web-based modules--is currently in its testing phase.  On a daily basis, the team captures testing results and progress using a cumulative flow diagram. The testing phase is only beginning and is scheduled to go out until mid-August.  Based on the data exhibited here, what are your interpretation and findings on the health of this phase so far?  What risks does this chart exhibit?",
        "score": 1,
        "creationdate": "2015-06-09 13:13:16.207000",
        "viewcount": 104,
        "tags": "<risk-management><metrics>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 574,
        "comments": []
    },
    {
        "id": 15261,
        "title": "Agile in enterprise: How to represent the requirements of non-business stakeholders?",
        "body": "I currently work on a large scale software project in a large company. We follow an agile approach for development; however, due to the size of the the company there are several stakeholders that normally are not spoken about or simply assumed to be the developers in the Agile process. Stakeholders example:  Architecture: Defines enterprise architecture guidelines  Development: Defines enterprise development guidelines  Product Design: Defines enterprise branding and design guidelines  IT Security: defines enterprise IT security guidelines  Operations: 24/7h operations support  Customer Support: 24/7h client support  Rollout: Rollout of the application per client ( client specific configurations )   Should I use User stories?  As IT security, I want to ... or Debt tasks?  Tech debt - Code needs to be refractored  ISO debt - Application must follow ISO1234  Rollout debt - Configuration automation  Operations debt - Special tool to manage data cache   Pratical example:  As application management, I want to be able to invalidate the cache, so the application is cleared of corrupt data.  The above doesn't really make sense to me as a business value user story. It represents more a maintenance required feature.  Is there any common practice on how to integrate the requirements of these stakeholders in user stories?  What is the best way to express the requirements from these stakeholders? They are functional yet not business value adding requirements.",
        "score": 8,
        "creationdate": "2015-06-21 10:01:15.783000",
        "viewcount": 1082,
        "tags": "<agile><user-stories>",
        "answercount": 2,
        "favoritecount": 1,
        "userId": 17552,
        "comments": [
            {
                "text": "Thanks for the link, it was clarifying. I think that at the end of the day, most of these \" non-user\" user stories, map tos ways of managing the debt created by a business user story.",
                "score": 0,
                "userId": 17552
            },
            {
                "text": "To add value we have to create waste. user stories are born to manage  this waste. For example: A user story to build a tool to manage the caching system implemented in a business feature",
                "score": 0,
                "userId": 17552
            },
            {
                "text": "also related: http://pm.stackexchange.com/q/14189/17552",
                "score": 0,
                "userId": 17552
            }
        ]
    },
    {
        "id": 15431,
        "title": "Is it okay to have a sprint where the team commits to zero story points?",
        "body": "Our two Scrum development teams are located in India. Our shared product owner is permanently relocating to the US, and we're just about to finish our first sprint.  Him and the team suggested delaying the next sprint by a week while he's in transit. The loss of rhythm to the team concerns me, as well as violating one of the core rules of scrum. I am not a part of the scrum teams, but I am a Certified ScrumMaster and have learned a lot from this site over the years, so I am acting as an agile coach within the organization. So I was going to suggest they do another sprint anyway but just focus on technical debt and pretend they're doing a sprint where they've committed to zero story points. I know delaying a sprint is not recommended in scrum, as per the Scrum Guide, but committing to less so the team can resolve technical debt is something that's recommended in some material I've read. The product owner prefers the team not work on any product backlog items until he can groom the backlog further. We had planned to conduct a product backlog refinement meeting, but realised that the PO's workload was too high this time around. So is there any danger in committing to zero story points but running the sprint as if it were a real sprint?",
        "score": 10,
        "creationdate": "2015-07-09 17:03:59.710000",
        "viewcount": 828,
        "tags": "<scrum><agile><sprint><story-points>",
        "answercount": 6,
        "favoritecount": 0,
        "userId": 34,
        "comments": [
            {
                "text": "Good question, @david. There are two scrum teams with a shared PO and two new ScrumMasters. I am acting as a coach within our organization but am not part of the scrum team. Hope this helps clarify.",
                "score": 0,
                "userId": 34
            },
            {
                "text": "@david - we would have scheduled a refinement meeting, but we realized too late that this was more than he could handle. I would like answers to come from this at the \"what should we do now\" angle. This is our first sprint and we are all learning, so we surely aren't looking to assign blame, just fix a bump in the road without breaking scrum rules more than necessary. Hope this helps.",
                "score": 0,
                "userId": 34
            },
            {
                "text": "@david, oops, I just edited myself so your edit may have been wiped out. Feel free to suggest another if I missed anything, and thanks for helping to keep our site clean and build a professional resource!",
                "score": 0,
                "userId": 34
            }
        ]
    },
    {
        "id": 15796,
        "title": "Varying Sprint cycle in a project",
        "body": "Is it possible to have a project with varying Sprint cycle? Example: in a product implementation project initial few sprints could be a month long because of multiple dependencies and lack of clarity but as we move forward the cycle becomes say 2 weeks long. What all changes in the system (Like Target Process) a PM/Scrum Master has to do?",
        "score": 5,
        "creationdate": "2015-08-06 16:02:19.773000",
        "viewcount": 415,
        "tags": "<scrum><agile><sprint>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 7681,
        "comments": []
    },
    {
        "id": 15933,
        "title": "How to track impediments in SCRUM?",
        "body": "This has been asked several times already but none of the answers fully convince me. We are an R&D team doing some support from time to time. Most of the support work can be included in capacity of the team so that the Focus Factor can be set accordingly. We have one \"batman\" that is on support every week and his/her capacity is lowered so that he/she can focus on customer support.  But sometimes \"batman\" he needs a help from other team member, who is a domain expert and needs to fix some particular issue. If the issue is small then there is no problem but what if the amount of work is substantial?  Should we create a new sprint task and estimate it and remove some other task from the sprint backlog which has a similar size?  Should the story points for completing this task be counted as those of the stories that were taken during the planning meeting? In fact we had to remove some item we committed to deliver it so the amount of work done was lower than expected. Maybe we should we track the time spent on those instead and try to not remove anything from sprint backlog? In this case we don't have to estimate (which might be incorrect especially for harder bugs), just count time that was spent on fixing particular task. The drawback is that using this approach the velocity will be lower and if this is very unusual situation only some sprints will be affected.  What is more, even if I could accept estimating the support bug and counting its size together with other tasks taken into the sprint during planning (after all this is the product improvement), I am not convinced we should do the same with non-development tasks (broken build system that developer needs to fix, access to bug tracker was broken and some developer needs to take a look). In this case should we track bugs and non-development separately and differently? It's clear for me that repeating issues tracking is much easier but I am particularly interested in the ones that are not happening that often and have a significant impact on the time the development team can spend on delivering sprint tasks. We had an issue with a system build that took 2 man weeks to solve and it has happened only once; then a big part of the sprint tasks were not delivered in that sprint. How to track such a issues so that our velocity measure will be correct?",
        "score": 7,
        "creationdate": "2015-08-18 10:12:05.907000",
        "viewcount": 1027,
        "tags": "<scrum><development-process><process-improvement><impediment>",
        "answercount": 1,
        "favoritecount": 1,
        "userId": 19262,
        "comments": []
    },
    {
        "id": 16020,
        "title": "Hardening Sprint - Manna from Heaven or a Witches Brew?",
        "body": "In Dean Leffingwell's Scaled Agile Framework there exists the concept of a hardening iteration E.G. after three sprints of two weeks duration, we have a hardening sprint of one week. In this short sprint we can pay back some of the technical debt accrued over the previous sprints, ensure more rigorous integration testing is carried out and the set up, tear down procedures are quality reviewed. Time can also be factored in for any training requirements that were uncovered over the prior three sprints. Admittedly, if we have a mature DOD on the delivery of a sprint work item there should be a decent level of quality but sticking to the principle that we deliver only what is required to satisfy the criteria of each story will eventually lead to known duplication in the code base. Good developers will naturally want to improve their code base so having a hardening sprint will ensure they can concentrate on moving WIP in the main sprints but the address any wider re-factorings periodically. I recently attended a conference where Rachel Davies of Unruly Software explained that their XP developers have every Friday as Golden Time where they are free to re-factor the codebase and learn new technology. That works out at one day in 5 as opposed to the one day in seven by having 3*2 week sprints plus a hardening sprint. I believe this is a good approach to paying the technical debt in a managed fashion. Technical debt will become more expensive to repay the longer the project continues in the same fashion as a story becomes more costly to change once we have delivered. I know the idea of a hardening sprint is anathema to agile purists but I think it works well in our pragmatic scrumban approach. I think the issue is similar to that around the validity of having a Sprint Zero which ruffles a few feathers. So, Question is: Is a Hardening Sprint a good idea, if not why and how would one address the concerns outlined above?",
        "score": 10,
        "creationdate": "2015-08-28 11:13:02.807000",
        "viewcount": 1036,
        "tags": "<scrum><sprint><extreme-programming>",
        "answercount": 3,
        "favoritecount": 0,
        "userId": 19267,
        "comments": []
    },
    {
        "id": 16299,
        "title": "New to Project Management with a new team on a short deadline",
        "body": "I have just been put in charge of a brand new team of a developer and designer, the first of each for our company. I've never had this role before, but I do have some design, development, and management experience. This company has a been selling its product for over a year now. The development was outsourced and as such, the development process is a new concept to this company. In addition, the design that did exist in the company prior was only graphically focused as opposed to user focused. There is a long list of outstanding bugs and technical debt on the backlog and there is no real design or researched foundation for the product that exists today. I have a limited amount of time to turn this product into something usable by the clients we have been trying to sell to. What should be the first thing I tackle? How do I handle this role while still trying to figure out this role. How do I facilitate a brand new team in working together?",
        "score": 2,
        "creationdate": "2015-09-26 06:39:28.010000",
        "viewcount": 180,
        "tags": "<team-management><planning><software-development><resource-planning>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 20553,
        "comments": []
    },
    {
        "id": 16361,
        "title": "What are developers expected to do during testing in the latter half of each Sprint?",
        "body": "When you are using the Scrum framework, a Sprint cycle involves development and QA. At the end of the Sprint the tasks worked upon and tested are showcased and released. Typically, for a team of 3 to 4 developers there would be 1 QA resource. What are the developers expected to do when QA is happening? Since the number of developers is much higher than the number of QA testers, bug fixes get done very quick and developers are left with nothing to do towards the end of the Sprint. What is expected of the developers during this QA testing while following Scrum?",
        "score": 19,
        "creationdate": "2015-10-02 08:34:37.977000",
        "viewcount": 10990,
        "tags": "<scrum><process><time-management><roles><testing>",
        "answercount": 7,
        "favoritecount": 2,
        "userId": 14864,
        "comments": []
    },
    {
        "id": 16578,
        "title": "what should be part of Sprint 0?",
        "body": "This is our first Agile project and we plan our Sprint 0 to consist of :  Release Content Planning : Defining EPICs/MMFs Product Backlog Product Backlog Grooming : Breakup of EPICs into stories (as much as possible at that point of time) High Level Design and Environment Setup Develop 1 or 2 critical stories to have basic framework in place  Please let me know if we need to have anything else and what do you suggest about the duration of sprint 0",
        "score": 8,
        "creationdate": "2015-10-24 14:02:45.123000",
        "viewcount": 3817,
        "tags": "<scrum><agile>",
        "answercount": 4,
        "favoritecount": 2,
        "userId": 20900,
        "comments": []
    },
    {
        "id": 16818,
        "title": "How to manage a schedule across multiple PMs when using a single team for both development & support?",
        "body": "I work for a small company (22 people), whereby the development team works on both new features (40%) and support/maintenance tasks (60%).  We have several account/project managers who prioritise the clients tickets within Jira using a Kanban board, and we have daily stand-ups to discuss the tasks at hand, the progress, and any blockers.  The main frustration for everyone is the lack of visibility when allocating work out to a developer, and this leads to issues with some developers frequently being in high-demand. This often results in individuals getting pulled from one project to another, because PM A and PM B both have deadlines to reach, yet PM A and PM B are not really aware of each others priorities.  Sadly we're not in a position to split the team into 2 teams specialising on development and support; and with 20+ customer accounts to develop/support/maintain it would seem unrealistic to plan a developers schedule too far in advance. This is mainly due to the level of complexity and urgency of the tickets we get through, which can take a developer out for a considerable amount of time. We've discussed internally about creating a high-level schedule for project work, and the resource needed, but we're stuck on how to progress this further because of the maintenance/support work, which makes up such a huge part of our business. We've seen some tremendous benefits having introduced a PM methodology like Kanban, and we've seen some huge improvements in customer satisfaction and our overall cycle time. But I think we now need a clearer way of defining our schedule and giving the team visibility on this. Any advise on how you think we might tackle this would be gratefully received.",
        "score": 6,
        "creationdate": "2015-11-23 22:30:42.043000",
        "viewcount": 545,
        "tags": "<kanban>",
        "answercount": 5,
        "favoritecount": null,
        "userId": 21268,
        "comments": []
    },
    {
        "id": 17051,
        "title": "How to make Release Planning more accurate?",
        "body": "I had an interview with one company. They use Scrum, but don\u2019t like rough estimates during Release Planning. So, they asked me, how to make Release Planning more accurate (they don\u2019t want more than 30 percent of deviations from the plan). I suggested they do following:  Gather requirements. Filter requirements and create scope. Decompose scope to \"nouns\" (deliverable items). - i.e. WBS structure Decompose \"nouns\" to \"verbs\" (work needs to be done to implement \"nouns\"). Estimate \"verbs\" considering risks. Find \"verbs\" dependencies and put them in a timeline. - i.e. GANT diagram  Calculate release date.  As you can see, it is more complicated than initial story mapping, and looks more like \u201cheavy waterfall\u201d style, than \u201cagile\u201d style. As I understand Agile philosophy, accuracy of estimation of final release date is not high priority, because \"responding to change over following a plan\". Going back to the planning list: in Scrum we implicitly did 1-3 steps during initial Release Planning and steps 4-6 during each Sprint Planning. I suggested to do all these steps during Release Planning explicitly. Despite the fact that this was the first (and only) way I figured to improve the accuracy of a release plan, I don\u2019t really like it because (in my opinion) this kind of planning does not conform to the ideology of Agile. I understand, that accurate estimates demand more effort and don\u2019t believe in \u201cmiracle\u201d high quality estimation without effort. But maybe you can suggest to me other ways (or some tips) on how to make Release Planning more accurate without having complicated heavy waterfall-style planning?",
        "score": 8,
        "creationdate": "2015-12-27 20:22:13.877000",
        "viewcount": 1179,
        "tags": "<scrum><agile><planning><estimation><release-plan>",
        "answercount": 7,
        "favoritecount": 8,
        "userId": 8417,
        "comments": [
            {
                "text": "@Tob, thank you, nice article. Especially I liked: **\"- When will you deliver the project? - How can you ask that question? We are Agile!\"** =D",
                "score": 3,
                "userId": 8417
            }
        ]
    },
    {
        "id": 17143,
        "title": "How to split a User Story that spans multiple sprints?",
        "body": "I have a User Story that contains a bunch of tasks, similar to this:  User Story: Fix any broken JavaScript in CMS   Task: Find and fix broken JavaScript in content Task: Find and fix broken JavaScript in code base Task: Find and fix broken JavaScript in static files Task: Find and fix broken JavaScript in library Task: Find and fix broken JavaScript in catalog files  So I have a bunch of tasks to go through some code and files and fix some JavaScript. Let's say that all of the above tasks cannot be completed by me in a 2 week sprint. How do I split this up into multiple stories? The tasks can be completed in any order and are not dependent on each other at all. So there is no logical way to sub-group them. Would I just do:  User Story: Fix any broken JavaScript in CMS (part 1)  and  User Story: Fix any broken JavaScript in CMS (part 2)  That seems like a poor way to manage this. What is a better approach to this kind of problem where tasks can't be grouped any better but you still need to split the story up?",
        "score": 5,
        "creationdate": "2016-01-13 17:24:10.723000",
        "viewcount": 4492,
        "tags": "<scrum><agile><user-stories><tasks>",
        "answercount": 3,
        "favoritecount": 3,
        "userId": 21787,
        "comments": [
            {
                "text": "Long story short: Large scale eCommerce platform where portions of one-off page JS is put in via a CMS since it doesn't require a code release. But that is just an example.",
                "score": 0,
                "userId": 21787
            }
        ]
    },
    {
        "id": 17145,
        "title": "How to manage very small, easy tasks in Agile?",
        "body": "Let's say you have a bug on your website. Your developer needs to fix some CSS or something. He estimates it will take him one minute to fix. What is the best way to manage these kinds of tasks? Do you create a User Story for it and create a task for it? The task is so tiny and minuscule that it's actually more work to create stories and tasks for it than to actually do it. This seems very inefficient, even though it's important to track and manage development of small fixes. How do you best deal with small, one-off tasks that don't take long to accomplish?",
        "score": 9,
        "creationdate": "2016-01-13 17:29:31.777000",
        "viewcount": 1937,
        "tags": "<agile><user-stories><tasks><tracking><bugs>",
        "answercount": 8,
        "favoritecount": 2,
        "userId": 21787,
        "comments": []
    },
    {
        "id": 17207,
        "title": "Optimistic vs. Pessimistic Burndown Lines - just a Project smell?",
        "body": "Not been here for a while but thought I would jump back with an interesting question.  Are optimistic and pessimistic chart lines on a burnup/down genuinely useful or just a project smell imported to an Agile chart?",
        "score": 2,
        "creationdate": "2016-01-20 16:43:32.517000",
        "viewcount": 1135,
        "tags": "<scrum><agile><burndown-chart>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 10462,
        "comments": []
    },
    {
        "id": 17313,
        "title": "Team consistently over commits",
        "body": "I'm a developer on a small-ish team. 1 DBA, 2 Senior Devs, 2 Juniors, and 1 QA (sometimes, most of the time we do our own QA). No PM at the moment. We do mostly maintenance/upgrades to a large legacy system right now, but will likely split the team soon so a group of us can focus on new product development.  We're a relatively new team that's been together for about 6 iterations now (3 months of 2 week iterations). Although we're using two week iterations, we're not down right time boxing. If a task is in progress, it stays in progress as it was already deemed the highest priority item. The iteration is more of a way of building in a time to retrospect, course correct, groom the backlog, and measure our capacity. It's Kanban with some ceremony stolen from Scrum.  So, this all works fine for this maintenance project, but with the new product development, we're going to have to really commit to getting the tasks done that we say we will. The problem is that the team is consistently overly optimistic during our planning session. We've never gotten all of our stories completed, regardless of the fact that we know exactly how much work we can do, on average.  We're able to consistently complete 13 stories in an iteration, but the team keeps insisting on scheduling 15-18. Any advice on how I can get them to understand the importance of scheduling to our capacity and committing to our stakeholders?  I'm sure someone will ask about story size/points. I don't quite trust scheduling to average points yet. The number of points completed in an iteration vary too wildly yet for scheduling purposes.",
        "score": 2,
        "creationdate": "2016-01-31 13:20:03.773000",
        "viewcount": 215,
        "tags": "<team-management><estimation><schedule>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 21039,
        "comments": [
            {
                "text": "It's my first Q here, I'd appreciate help with tags/phrasing of the question.",
                "score": 0,
                "userId": 21039
            }
        ]
    },
    {
        "id": 17319,
        "title": "Should a Product Owner be present for all retrospectives?",
        "body": "We have a Scrum Team of a Product Owner and four developers (one of whom is Scrum Master), running one week sprints. As per Scrumguides.org (emphasis mine):  The Sprint Retrospective is an opportunity for the Scrum Team to inspect itself...   So that includes the Product Owner. Following the advice from Agile Retrospectives by Derby/Larsen we're trying to focus our meeting on one specific topic. We have iterations of one week, so we usually cover only one topic each week. Now, at least half of our Retrospectives will be very tech-oriented: talking about how to spread technical knowledge between us and other teams, improving automated testing, trying new tools, et cetera. Our Product Owner is not very technical at all, and will not be able to contribute all too much in this kind of Retrospective. Any suggestions on how to deal with this? Do we do those Retrospectives with just the development team? Do we \"need\" to look for ways to include the Product Owner too?",
        "score": 6,
        "creationdate": "2016-02-01 07:05:07.207000",
        "viewcount": 994,
        "tags": "<scrum><product-owner><retrospective>",
        "answercount": 6,
        "favoritecount": null,
        "userId": 5282,
        "comments": []
    },
    {
        "id": 17350,
        "title": "Can planning documents be retroactively produced to fit the product that's been built?",
        "body": "I am currently implementing an Android application and am struggling to do my class and sequence diagrams, predominately due to the fact that the specifications are too abstract and vague. I was thinking of doing the implementation phase and then to reverse-engineer my work to produce the planning documents. My question is, is this allowed and advisable?",
        "score": 1,
        "creationdate": "2016-02-03 13:30:18.737000",
        "viewcount": 91,
        "tags": "<agile><software-development><documentation><waterfall><specification>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 22078,
        "comments": [
            {
                "text": "@MarvMills For the record this is project management! I am behind schedule on a project and a potential way was to implement the app first and then to go back to the design phase - but that's ok I know what I am doing. I don't know why I even posted here in the first place when I am going to be greeted like this.",
                "score": 0,
                "userId": 22078
            }
        ]
    },
    {
        "id": 17395,
        "title": "Should stories be properly estimated before being pulled into an ongoing sprint?",
        "body": "There are two common reasons why stories or bugs get pulled into a sprint in Scrum (where I work):  Issue was triaged (usually critical/blocker field issues) Sprint was underestimated, and thus items from the backlog get pulled in to keep people busy  In both cases, most items (especially bugs) do not have a story point estimate or time estimate. The first question is: Is it important to have story point estimates on these items before they are brought into an ongoing sprint? And if so, when and how should this estimation take place? We only have sprint planning every 2 weeks (our sprints are two weeks) and I'm assuming it's unproductive to schedule a sprint planning meeting for every bug we bring in. We use JIRA + JIRA Agile as our tooling to track Scrum sprints. The only functional reason I can think of needing proper estimation for are the reports. Also I worry our velocity will be negatively impacted if we pull in items into the sprint without an estimate.",
        "score": 4,
        "creationdate": "2016-02-08 17:13:02.773000",
        "viewcount": 1203,
        "tags": "<scrum><agile><sprint><story-points>",
        "answercount": 4,
        "favoritecount": 1,
        "userId": 13583,
        "comments": []
    },
    {
        "id": 17425,
        "title": "How to handle arising tasks we want to address later in Scrum",
        "body": "Considering we're talking about Scrum,  When working on a backlog item and that new out-of-scope minor tasks arise what do you do with them? (e.g.: ones we don't have time for right now such as minor refactoring or implementing tiny nice to haves) Do I create orphan tasks to be later assigned to a backlog item with similar other tasks during the sprint planning meeting? Should I create a backlog item (requirement, or user story) with pretty much the same title as the task and assign the task to it? E.g.: Let's say I create a new task which is \"add a simple caption to a control\". Should I promote it to a backlog items and in this case, what would be the task for that backlog item? Thanks everyone!",
        "score": 1,
        "creationdate": "2016-02-12 00:48:12.043000",
        "viewcount": 330,
        "tags": "<scrum><agile><tasks>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 22175,
        "comments": [
            {
                "text": "Thank you very much for pointing that out. I found useful info in one of these posts, however, my post is also concerned about the hierarchical organization of work items. Anyways from the quantity of info, it's hard to cross compare.",
                "score": 0,
                "userId": 22175
            }
        ]
    },
    {
        "id": 17514,
        "title": "Any ideas about how to evaluate a developer's performance?",
        "body": "I introduced Scrum in our development teams some years ago. Since then our performance has increased a lot with a shorter time-to-market and increased quality. The CEO wants me to create a system to measure the individual performance of every developer. Our company is very results and performance oriented and my department resisted these kind of benchmarking for some years. This year we should introduce such a system so that we can start using it next year. Have you got any ideas / experience with a system that could work?",
        "score": 9,
        "creationdate": "2016-02-24 15:54:06.437000",
        "viewcount": 8440,
        "tags": "<scrum><evaluation>",
        "answercount": 5,
        "favoritecount": 6,
        "userId": 22332,
        "comments": [
            {
                "text": "I knew this would be the first answers :-) The sponsorship for scrum is mine. As the results were quite good everybody is happy and let us work as we like.",
                "score": 0,
                "userId": 22332
            },
            {
                "text": "Why does he want to measue individual performance? Because he is a CEO! Now seriously, this is the typical believe from a manager. \"All the other departments are evaluated in an individual basis, why do you look at them as a team?\"",
                "score": 0,
                "userId": 22332
            },
            {
                "text": "Thank you for your comment, Jeff. This is the \"funny\" thing about all the history. The company had a difficult time with deadlines and quality. We introduced Scrum and everything is much better (deffects reduced by 70%, all the deadlines in the last two years were reached, ..). Of course, it was not just scrum, we introduced lots of small improvements using the retrospectives after our sprints.",
                "score": 0,
                "userId": 22332
            },
            {
                "text": "(sorry, I keep pressing enter) Now that everything is much better our CEO wants us to work like our sales or operations departments. They are evaluated in an individual basis because \"good performers should be rewarded\". I keep fighting against this way of thinking, but at a given point it is difficult to continue this battle. Now I am trying to find a way or at least to find the right arguments. I know quite a lot of arguments from the development point of view, but they don't apply at a given \"distortion field\" :-)",
                "score": 0,
                "userId": 22332
            }
        ]
    },
    {
        "id": 17567,
        "title": "How should a project manager handle a request for contracted software to produce twice as many reports as specified in the project's requirements?",
        "body": "I have joined a late-phase software project and there is a great deal of disagreement between my management and the client about work items they are claiming to be outstanding. In short, our business requirements document (BRD) describes three reports that the software needs to produce, but the statement of work (SOW) simply says that the software will support \"reporting\". Now the client is asking us to create six additional reports and says that it is covered because the SOW says that the software will be used to produce reports. My PM training has taught me that the BRD definition of a subject will supersede a SOW definition as the purpose of the SOW is to be abstract and the BRD is concrete. However, management at my company are wavering and agreeing that they can see the client's point of view. I think this is gold plating, pure and simple. Strictly speaking as a project manager, who is technically correct here? Can the SOW's abstractness be used to redefine BRD scope definition or is the BRD and software requirements specification (SRS) considered the definitive word on in/out of scope items?",
        "score": 3,
        "creationdate": "2016-02-29 20:05:53.843000",
        "viewcount": 626,
        "tags": "<requirements><documentation><scope><scope-management><contracts>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 22093,
        "comments": []
    },
    {
        "id": 17701,
        "title": "Should velocity increase with time?",
        "body": "Some scrum masters are concerned with \"bumping up\" a team's velocity during a sprint, as if a higher velocity is better. But points are a relative measure of the work that a team needs to do for feature X; they are not high or low, they're just more or less than some other feature the team arbitrarily chose as a point of reference. What's important is that you know what your velocity is, however many points that is. If points are effort, you don't make a greater effort with time. You make the same effort, but it is more productive. So a story that was estimated at five points when the team first formed could eventually be estimated as three or two points as the team increases its skills. Is that correct? I don't see a consensus on whether points measure complexity or effort, but either way it seems to me that as time passes, the perceived effort or complexity of a task will go down and you will be able to fit more of them in a sprint, thus keeping your velocity constant.",
        "score": 17,
        "creationdate": "2016-03-12 14:35:34.863000",
        "viewcount": 4344,
        "tags": "<scrum><estimation><story-points><velocity>",
        "answercount": 4,
        "favoritecount": 6,
        "userId": 13325,
        "comments": []
    },
    {
        "id": 17721,
        "title": "Do projects ever end early?",
        "body": "When scheduling, I tend to add a lot of reality into the guestimates I am provided with. I always add in generous amounts of probable sick days for manpower and extra time for integration and bug fixing. (All this based on decades of experience.) As a result, my projects tend to deliver on schedule. But they never finish earlier than expected. Now I'm wondering if the projects would deliver earlier if I didn't pad the schedule as much.  Would everything move a little faster if the teams had the incentive to meet deadlines based on the data they provided, as opposed to the padded ones I provide? Or put another way: Does work expand to fill up available time?",
        "score": 30,
        "creationdate": "2016-03-15 09:00:35.777000",
        "viewcount": 7960,
        "tags": "<scheduling><resource-planning>",
        "answercount": 14,
        "favoritecount": 10,
        "userId": 4384,
        "comments": [
            {
                "text": "I wrote about this question on my blog  - http://expertpjm.blogspot.com/2016/11/do-projects-ever-end-early.html",
                "score": 0,
                "userId": 4384
            }
        ]
    },
    {
        "id": 17923,
        "title": "Any ideas for mixing a kanban with taskboards",
        "body": "I am the PM of a small team of 6 programmers, recently we are trying to go more agile by including in our workflow some principles or techniques of XP, scrum, scrumban and lean.  A very important tool is our kanban, currently we are using github+zenhub for that. Zenhub provides a simple and customizable kanban(similar to trello) fully integrated into github issues.  Our current setup looks like this.  It is some kind of combination of Taskboard Kanban and User story Kanban. But still where the 2,3 column are managed by the PO and PM while the last 3 columns are managed by the team.  The problem is that we have this mixtures of user stories and tasks, and I wonder what\u2019s the typical approach to organize them. Some tasks are part of user stories, while others (non-functional features, chores and refactors) are not. Should they be part of the backlog? How would you improve this kanban?",
        "score": 4,
        "creationdate": "2016-04-04 11:42:36.247000",
        "viewcount": 388,
        "tags": "<scrum><kanban><tasks><small-projects><lean>",
        "answercount": 4,
        "favoritecount": 1,
        "userId": 22806,
        "comments": []
    },
    {
        "id": 17978,
        "title": "Managing huge experimental decision by a developer",
        "body": "The project which I'm working on was over, but I would like to reflect on managing a huge experimental decision made by one developer during development. This is what happened: A developer strongly felt that something is not right with the current design of the project. Due to insufficient knowledge, he was unable to express out what is wrong. As we have deadlines, we cannot wait, nor work with him on his research as he cannot convince us what's wrong.  To be constructive, he told us to move on while he conducted his research and experimented huge redesigning works on his branch of the SVN.  A couple of weeks later, he presented to us a working, hugely redesigned (and refactored) project which he's confident of and explained to us everything. We were convinced. However, as we were changing and adding features based on the old design, it was as good as we were working on 2 separate projects and SVN merging became impossible due to the large difference. We had 2 options then.  To work on our copy, which we would have to redesign all our features to the new standard as well as identifying all refactored stuffs. To work on his copy, which we would have to first identify changed features and implement back correctly in his design, followed by the new features.  We chose the first option, as the second option would still have to deal with lots of redesigning due to the changed features using obsolete classes and the likes. Lots of time was spent, and everything felt like double (or perhaps triple) effort. Though it was worth it (we did meet the deadline through more effort), question is, given the circumstances, is there any methodology we overlooked that could have more properly handled such scenario? Or was what we were doing the correct decision and that this is actually a normal / common thing in development? Note that he wasn't that confident of what he was doing either, so he had to finish everything that he was doing to see it working and confirmed his research before presenting it to us. Admittedly we were all amateur developers, including him, but he kinda instinctively knew what's wrong, but lack the terminologies and experience / knowledge of case studies to convey properly to us prior to his research. There was a chance his instincts could be totally wrong too.",
        "score": 5,
        "creationdate": "2016-04-08 21:43:39.517000",
        "viewcount": 150,
        "tags": "<planning><methodology><risk>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 23017,
        "comments": []
    },
    {
        "id": 18092,
        "title": "What to do if a member of a team finishes all his sprint tasks ahead of schedule?",
        "body": "I run 1 week sprints, lately my sprints are finishing ahead of schedule (one day before the end of the sprint) for one member of the team.  I know that some PMs wait until the next sprint cycle, however that means losing a day doing no work. What's the best way to deal with this?",
        "score": 1,
        "creationdate": "2016-04-25 10:15:10.110000",
        "viewcount": 2300,
        "tags": "<agile><user-stories><resources><sprint-backlog>",
        "answercount": 4,
        "favoritecount": 1,
        "userId": 20871,
        "comments": []
    },
    {
        "id": 18138,
        "title": "How many hours should the development team spend on skills improvement during work?",
        "body": "For a team of junior web developers, who are very motivated to improve their skills, and applying their new knowledge to the development has produced great results so far. But I am conscious of the time they would be spending on learning during their work hours. What is the ideal balance of allocating them a number of hours for online training/courses in a week so much that it does not affect their deadlines.",
        "score": 3,
        "creationdate": "2016-04-28 20:28:18.860000",
        "viewcount": 653,
        "tags": "<project-management-style><skills><training>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 23265,
        "comments": []
    },
    {
        "id": 18254,
        "title": "Sales team keep on setting aggressive deadlines",
        "body": "So I had a quick meeting today, my Boss who is leading the sales team has given me one sprint to deliver a shopping list of work for a end client.  I have told him that a week is not enough time to deliver that amount of work and properly test everything. Only in the best case scenario, if everything works fantastically well, it will be delivered. I am currently facing the following issues:  My boss doesn't seem to care and will just set the aggressive deadlines anyway because it's an opportunity to get business in. My boss is not respecting the fact that my team are contractually obliged to work 40 hours a week (UK), he just wants this level of work delivered in a sprint even if it means a lot of overtime.  I have warned him about:  Tech debt resulting from very aggressive deadlines and being able to create a contingency in my project management. I have repeatedly told him that we can't let clients dictate our sprint cycles this way, but his argument is that if we are not aggressive enough with timeframes we will lose business.  How can I handle this situation.",
        "score": 1,
        "creationdate": "2016-05-12 10:38:19.657000",
        "viewcount": 369,
        "tags": "<scrum><project-team><sales>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 20871,
        "comments": [
            {
                "text": "Project manager, where the problem is happening is that the sales team are setting my deadlines for me without getting me involved. I can understand why, because they are under pressure to get sales so are promising unrealistic deadlines to drive sales.",
                "score": 0,
                "userId": 20871
            },
            {
                "text": "@NathanCooper I am trying very hard to maintain scrum practices, facing some resistance.  I know that it is working extremely well (when my sprint cycles are not disrupted) because like this week we had a sprint, and my team helped me deliver high quality work ahead of schedule.",
                "score": 1,
                "userId": 20871
            },
            {
                "text": "I am also the scrum master here.",
                "score": 0,
                "userId": 20871
            }
        ]
    },
    {
        "id": 18298,
        "title": "What to do when the backend work is much larger than the frontend?",
        "body": "On past projects, I've seen a common theme. A particular feature will require very simple front end work (eg. make a button on a screen that says \"submit\"), but there will be a large amount of work on the backend. If we have say one backend developer and one front end developer, the backend dev finds themselves often doing work that doesn't get feedback, is behind the front end by several days or more, and so on.  Some solutions would be to either slice the story in a more even vertical between the two types of work, to go less \"in-depth\" with the backend work, or to work to make your developers cross-functional between the back and front end work, but I haven't had a situation yet where that's really a reasonable solution. Is there anything else that can be done?",
        "score": 10,
        "creationdate": "2016-05-18 16:29:02.070000",
        "viewcount": 3831,
        "tags": "<scrum><process>",
        "answercount": 3,
        "favoritecount": 3,
        "userId": 19375,
        "comments": [
            {
                "text": "unfortunately in reality, this isn't the case",
                "score": 1,
                "userId": 19375
            }
        ]
    },
    {
        "id": 18545,
        "title": "How do I encourage self-learning of Git?",
        "body": "Recently my team transitioned from Perforce to Git. As part of the transition, the developers responsible for the transition wrote documentation and provided links to interactive tutorials to help other developers with understanding Git commands and terminology. Now that the switch has occurred, it's becoming clear that a majority of people on the team may not have followed the transition's team advice to participate in the interactive tutorials, and I don't know how much of the documentation has been read beyond the simple setup steps. I am relatively new to the overall team but one of my first tasks was to assist with the transition to Git as I have Git experience from prior jobs. How can I (or team management) encourage people to take the time to learn the new Git material?",
        "score": 3,
        "creationdate": "2016-06-24 20:34:18.970000",
        "viewcount": 231,
        "tags": "<software-development><education>",
        "answercount": 5,
        "favoritecount": 1,
        "userId": 23885,
        "comments": [
            {
                "text": "@NathanCooper There is no explicit Git learning time set aside, but the scrum master and dev manager have both said the team should do what is necessary to learn. The team has started on the first sprint for the next release. I think it is becoming clearer that people may benefit from explicit time in the schedule to learn.",
                "score": 0,
                "userId": 23885
            }
        ]
    },
    {
        "id": 18617,
        "title": "In an scaled Scrum with multiple teams, who should be responsible for writing automated system tests?",
        "body": "We have three teams contributing to the same product. Currently our automated system tests are being written by two QA people that see what has been finished in the reviews and then write appropriate tests. That has been working okay, but we are now pushing towards continuous deployment and need to ensure that the system tests are written during the Sprint so that we can immediately run regression tests. Since none of the teams fully own the feature right now we are unclear on who should be responsible for system testing.",
        "score": 4,
        "creationdate": "2016-07-06 08:54:41.993000",
        "viewcount": 675,
        "tags": "<scrum><agile><roles><testing><scaled>",
        "answercount": 3,
        "favoritecount": 3,
        "userId": 23992,
        "comments": [
            {
                "text": "Thanks for the feedback. The scaled approach we are looking at is scrum@scale (Scrum Inc). We are most definitely not trying to **externalize** testing but rather trying to understand **how** to internalize.",
                "score": 0,
                "userId": 23992
            }
        ]
    },
    {
        "id": 18708,
        "title": "Identifying and considering the important factors to calculate a persons Capacity for a Sprint?",
        "body": "My team works in a 3 Weeks sprint, and accordingly we calculate the capacity of Team member based on his or her planned holidays and company Vacations.  But we cannot deny any unplanned / Sick leaves, Unplanned meetings and Training. Different Inter & Intra team communications which may be important for my own project or other teams. Knowledge sharing is an important core value of a growing organisation that encourages open cross team interactions.   Different Sprint Ceremonies also take some time of the team members during these 3 weeks. What points are important to be considered calculating the Capacity of the Team members considering they spend 8 hrs in the office.",
        "score": 5,
        "creationdate": "2016-07-21 04:26:23.303000",
        "viewcount": 532,
        "tags": "<scrum><team-management><sprint><project-management-style><team-capacity>",
        "answercount": 5,
        "favoritecount": 0,
        "userId": 13556,
        "comments": []
    },
    {
        "id": 18724,
        "title": "Can you make a custom timeline?",
        "body": "Can you make  a custom timeline by corporate periods? or add the periods over the dates? Our company refers to time in Periods where each period has 4 weeks. Is it possible to remove the dates or add the period distinction maybe above the timeline? Thanks, Lori",
        "score": 0,
        "creationdate": "2016-07-26 15:18:19.387000",
        "viewcount": 441,
        "tags": "<ms-project><gantt><timeline>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 24207,
        "comments": []
    },
    {
        "id": 19829,
        "title": "Can I add columns in MS Project Pro to display time-phased costs?",
        "body": "Can I add columns in MS Project Pro to display time-phased costs? I would like to see a cost column for each year of the project. The year-column would only include costs for that year. I can almost do it by using formulas in custom-cost columns, but the tasks split between years are missed.",
        "score": 1,
        "creationdate": "2016-08-09 19:33:33.467000",
        "viewcount": 122,
        "tags": "<ms-project><cost-management>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 25467,
        "comments": [
            {
                "text": "In a tool, I would like to see the columns in MS Project Pro project schedule",
                "score": 0,
                "userId": 25467
            }
        ]
    },
    {
        "id": 19837,
        "title": "How should we balance chores to reduce technical debt with impending deadlines for features?",
        "body": "I'm the Scrum Master on a project with three developers, one QA person, one designer, and me. We work on a project that we inherited about three years ago, a \"portal\" website and a cordova app. We're now planning to scale down the team to a skeleton crew of one developer, aiming to finish up everything critical in the next ~five weeks before we do so. The project has always struggled with the issue of technical debt we inherited along with the codebase, and now the team would like to see if there is some way we can integrate this work without it getting us \"off track\" on the main features and bugs we want to complete before our five weeks are up.  It's important that the team stay as focused on the features and bugs as possible because they've been working on a few pages of the app now for months and are are excited to be done with it. For their morale I want to make sure we keep that focus, but they also feel strongly that some of these engineering chores should be done. How should we balance these two things so that the developers still feel they can make progress on the engineering initiatives while remaining focused on finishing the feature set?",
        "score": 4,
        "creationdate": "2016-08-10 14:56:18.607000",
        "viewcount": 379,
        "tags": "<scrum><planning><scheduling><prioritization><technical-debt>",
        "answercount": 6,
        "favoritecount": null,
        "userId": 19375,
        "comments": []
    },
    {
        "id": 20042,
        "title": "How to sucessfully introduce/initiate IT projects in a non-IT org.?",
        "body": "I've been working in an old-fashioned company that has a small IT department and zero experience with project management. I'm having trouble finding the right approach to present IT solutions, transform these solutions into projects and manage them in a way the stakeholders will understand. The main trouble at the moment has been that every project I propose is not well-received, since it will cost money, time, resources and people will need to be trained in their own jobs (e.g. if I want to introduce a Help Desk solution to our spreadsheet-oriented Help Desk dept.) - and no one likes learning how to do their own job again. What I'm trying to do presently: show the solution and why it would be good; estimate how long it would take to implement; how many resources the project would need; and how much it would cost (person/hour + software costs + etc). But I'm having trouble to exemplify how much we would \"profit\" in the long term. Remember, these are non-TI people, so arguing that (e.g.) it's more secure having databases than spreadsheets is not a strong argument, and I don't know how to make it appear strong, so I'm trying to talk in money. Example: employee A does task X in 2 hours, which is very long, with an IT solution he would take fair less, but I can't precisely estimate he will take 30 minutes - if I could, it would be easier to present the long-term profit to the stakeholders in financial values. He could take 30 minutes, or 15, or 1 hour and 10 minutes - all would present benefits in the long-term, financially speaking, but I can't be precise on how much. What would be the best way to approach this scenario? Introduce and initiate IT projects successfully, all while communicating the benefits from these in a way non-IT people can understand.",
        "score": 4,
        "creationdate": "2016-09-08 23:22:47.910000",
        "viewcount": 144,
        "tags": "<planning><initiation>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 1322,
        "comments": [
            {
                "text": "I'll rewrite the question so it can be more PM-related.",
                "score": 0,
                "userId": 1322
            }
        ]
    },
    {
        "id": 20142,
        "title": "How to convince my boss to let go an ineffective programmer",
        "body": "I was hired as a project manager / senior programmer to manage an internal group of programmers in a company. I'm responsible for coordinating 12 programmers. My boss has no programming background, how can I convince him to let go of an ineffective programmer? My boss's argument is that the programmer knows that he is not very good, but because of that he is cheap. Most of his code must be cleaned up. Today I found code he committed which was filled with difficult-to-understand and outright misspelled content (which would increase cost of maintenance of the code later on): public static bool isDivisibleBy(this int num, int numnum)     {         var tmp = (float)num / (float)numnum;         var res = tmp.ToString();          if (res.Contains(\".\"))             return false;         else             return true;     }      public static int reminder(this int num, int numnum)     {         var absNum = Math.Abs(num);         var absNumnum = Math.Abs(numnum);          //speedup         if (absNum.isDivisibleBy(absNumnum))         {             return 0;         }         else         {             var tmp = absNum / absNumnum;             var tmp2 = absNum - (absNumnum * tmp);              var tmp3 = tmp - tmp2;              //sign             if ((num > 0 && numnum > 0) || (num < 0 && numnum < 0))             {                 return Math.Abs(tmp3);             }             else             {                 return Math.Abs(tmp3) * -1;             }         }          return 0;     } }",
        "score": 0,
        "creationdate": "2016-09-20 21:50:26.573000",
        "viewcount": 233,
        "tags": "<team-management><project-team>",
        "answercount": 3,
        "favoritecount": 1,
        "userId": 25962,
        "comments": [
            {
                "text": "@CodeGnome I agree that the code sample was irrelevant, but when I wrote the question I was aggravated. I'm responsible for all aspects of software development but not HR. I tried to explain to my boss the impact of his work and that not only me, but also my colleagues tried to train him but it does not work. We are finishing one important internal project with tight deadlines, my boss want to concentrate only on that project, I tested to remove him from the project and it boosted the productivity.",
                "score": 0,
                "userId": 25962
            }
        ]
    },
    {
        "id": 20198,
        "title": "Scrum when reaching goal beforehand",
        "body": "So I've been trying to read about what we should do if the Sprint goal is reached beforehand and from what I've understand there are 2 options:  Take in new tasks and change scope End sprint beforehand (doesn't sound viable)  But both options doesn't seem very good when you work in a team. To make an example:  Lets say you have 3 team members working on multiple different stories. By halfway through the sprint there is no more new tasks, 2 members are sitting at some tasks that still goes on but 1 member has no more task to start. Now if we take new tasks in so the member doesn't run out of tasks the scope will change and we could continue to do this but we'll never reach a completed sprint. If we don't take new tasks in the sole member will have to help the 2 others (might not be possible) or work outside the sprint (not recommended either) because we can't end it while 2 members still are working. So how would you guys recommend handling running out of task beforehand but only for some team members?",
        "score": 4,
        "creationdate": "2016-09-28 06:22:09.777000",
        "viewcount": 161,
        "tags": "<scrum>",
        "answercount": 3,
        "favoritecount": 1,
        "userId": 25966,
        "comments": [
            {
                "text": "@NielsvanReijmersdal good suggestion :)",
                "score": 0,
                "userId": 25966
            }
        ]
    },
    {
        "id": 20212,
        "title": "How to show planned project approach to the client?",
        "body": "I've came to a situation where the client asks me the next two things:  Give me your project plan of how you would approach this project to make sure I have a result at the end of a specific month. Elaborate how you would analyze the existing code for the front-end and the back-end to make sure you understand what the previous programmers have done.  This is from a freelance perspective where I \"act\" both as a PM and as a programmer. What kind of answer should I provide to the client? We are at the phase where he is interested in my services and wants to know how would I do it.",
        "score": 0,
        "creationdate": "2016-09-29 13:05:35.627000",
        "viewcount": 100,
        "tags": "<software-development><clients><small-projects>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 26069,
        "comments": []
    },
    {
        "id": 20239,
        "title": "Story Decomposition Granularity",
        "body": "We are having a hard time meeting Sprint comits, one reason I suspect is that we are not doing a good job estimating and one of the causes of this is that we don't do a good job decomposing the story down to a sufficient level of granularity to fit within the sprint. I see a lot of comments on Agile that it is critical to have granular stories that are small enough to fit in the sprint, but I have not found any recommendations or best practices for HOW to decompose a story to the correct level of Sub-Task granularity. Does anyone have good practices or heuristics as to what is the \"right\" level of granularity?",
        "score": 12,
        "creationdate": "2016-10-04 21:03:24.527000",
        "viewcount": 1874,
        "tags": "<agile><story-points>",
        "answercount": 7,
        "favoritecount": 5,
        "userId": 24110,
        "comments": []
    },
    {
        "id": 20358,
        "title": "JIRA: how to have many Kanban boards for one project",
        "body": "Here is the situation: I have one project with several issues relating to tasks our team has to complete. We (currently) have two \"categories\" of tasks to complete. Let's call them: \"Environment Setup\" and \"Technical Debt Removal\". I want a way to track whether tasks are completed, and who is working on what. I have issues in my project that either relate to one or the other, not both. I would like to have two separate Kanban boards to track the work on these two things independently. How do I do this? I have tried to create several boards within the project but this doesn't work, since all the issues show up in both.",
        "score": 2,
        "creationdate": "2016-10-20 15:54:28.260000",
        "viewcount": 984,
        "tags": "<jira><tasks><task-management>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 26318,
        "comments": []
    },
    {
        "id": 20397,
        "title": "What is unique about application development projects?",
        "body": "I'd like to understand the difference, from a project-management perspective, between application development and other, non-application development.",
        "score": -2,
        "creationdate": "2016-10-27 13:57:17.587000",
        "viewcount": 314,
        "tags": "<agile><communication><pmp><ms-project-2010><pmi>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 26409,
        "comments": [
            {
                "text": "Hello, yes, from a Project Management perspective and yes, i am actively looking for consultants for (Automotive Client in Dearborn, MI).",
                "score": 0,
                "userId": 26409
            }
        ]
    },
    {
        "id": 20578,
        "title": "Methodology for Deciding Between Building on Existing Code or Starting New",
        "body": "This is a question about assessing the cost/benefit or ROI of a prospective project. I'm working in 6-8 old years software project. It has a lot of issues and also failures plus some failed people on its way. Right now after raising the project (software application) from the dead, when the new requirement comes, the developers are looking in the code (not in the working features in terms of usage) the corresponding code. There are ideas of creating, rewriting the project from the beginning. I wonder if there is a sense from your point of view to look in the old code something that corresponds the new requirement for the current application? Because if it is different, then the developers are getting back to the requester, describing what they found in the code, and once again discuss requirement. In one side it fosters requirements engineering and requirements gathering process, on the other hand it may be waste or unnecessary extension of the time. Because it may be better and faster start from scratch with the new code for the new feature. And especially if the new system or rewriting the system can be the case. While there may be opinions on this subject, it would be helpful to find a methodology so I could recommend whether the stakeholders are better off continuing to invest in the old code or build from scratch?",
        "score": -4,
        "creationdate": "2016-11-24 14:12:48.583000",
        "viewcount": 104,
        "tags": "<software-development><requirements><product-management><development-process><technical-debt>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 878,
        "comments": [
            {
                "text": "Sorry I cannot agree. My question touches several fields. One of them is of course of project management another one is requirements engineering. I feel disappointment that you don't understand this. :(",
                "score": 0,
                "userId": 878
            }
        ]
    },
    {
        "id": 20717,
        "title": "Is it unrealistic to develop a software project and get reliability not just by what you see on screen?",
        "body": "In the software industry, not in all cases but true for many, you usually report to a manager who has no advanced knowledge about the underlying technology used in a software project. Usually this drives managers to value your work based on what they see on the screen rather than what's really required to get the project done. You're chained to show something to them and forced to work on poor design decisions to just get an ok, keep doing. My concern is if it's actually unrealistic to think that more involved and engaged stakeholders shouldn't value you on what they see on screen, but by the actual already achieved project goals, either if they might have an impact on the UI or not. In fact, when projects require not so useful demos, overall cost is increased, because preparing a project to work with quality requires testing, debugging and even last hour modifications that might be thrown away once the demo is done. Finally, there's a timing debt associated with this kind of project management that impacts on you because they delay their own timings without modifying them (wasted time is lost forever). In the other hand, I'm not arguing that we should hold them 2 years until they can see something on the UI. IMO, I would say that agile project management with approaches like Scrum already define the sprint demo, but based on my experience, stakeholders don't want to get involved in regular project management, but they just want a global feedback with a demo that should look like a final product in terms of quality. Side note I want to be sure that no one could understand that my question is arguing that I shouldn't demo the UI. Furthermore, I'm not against showing it very often. But as some have already said in their own answers, sometimes it takes time to see some change on the UI while some other details are being implemented, fixed or improved. So, that's why my question is about if it's unrealistic to get reliability not just by what you see on screen. Thus, it's implicit that UI demos are required. End-user feedback is crucial to succeed on delivering a good project, because after all the project is for the user.",
        "score": 4,
        "creationdate": "2016-12-14 21:02:54.660000",
        "viewcount": 269,
        "tags": "<software-development><software>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 26944,
        "comments": []
    },
    {
        "id": 20796,
        "title": "Should we cancel the Daily Stand-Up if we have another meeting during the day?",
        "body": "The Scrum Master for my team cancels the daily stand up if we have another meeting that day, like Backlog Refinement (formerly Backlog Grooming) or some other planning meeting. I don't think it's a good idea, but can't find any precedents online. Is canceling the stand-up like this a good idea?",
        "score": 14,
        "creationdate": "2017-01-08 23:29:55.100000",
        "viewcount": 6449,
        "tags": "<scrum><meetings><daily-scrum>",
        "answercount": 7,
        "favoritecount": 1,
        "userId": 27146,
        "comments": []
    },
    {
        "id": 21058,
        "title": "Scrum: what to do if team member finishes their work early but can't help with other tasks",
        "body": "...is not able to help the remaining member of the team with his tasks since he is not suitable for it? Currently, in this scenario I allocate a new item from the backlog that my scrum member is more suited to doing and leave the remaining item for the colleague who is still behind. This is with the full consent of the development team. Is this the correct approach?",
        "score": 5,
        "creationdate": "2017-02-15 16:14:41.613000",
        "viewcount": 4947,
        "tags": "<scrum><agile>",
        "answercount": 7,
        "favoritecount": 2,
        "userId": 20871,
        "comments": [
            {
                "text": "That's true. But in this instance I think he is right, other member of the scrum team is a backend developer, this one is a front end developer. The remaining task is a back end task, does it make sense for him to do it? Seeing the back end Dev will finish his current task soon...Probably not.",
                "score": 0,
                "userId": 20871
            },
            {
                "text": "The remaining task is a follow up task from the tasks the back end dev is currently working on. So if say the front end developer jumps in (who is full stack), he will slow the whole process down from asking the back end developer a billion questions about how the previous tasks were coded. It is simply much quicker to wait for the back end dev to finish his work, then for the front end dev do the remaining task. All of the developers are full stack devs, but like many developers they either better at the front or back end which determines which type of tasks they work on during the sprint.",
                "score": 0,
                "userId": 20871
            },
            {
                "text": "RubberDuck to add I know that there is a trend towards full stack developers, but I honestly believe at a certain point you can't be a jack of all trades. Learning back end development is more than just writing code in a back end language, it branches towards dev ops which moves towards server optimisation/scalability. On the other side, a highly trained front end developer knows how different front end frameworks work at a deeper level - angularJS, React, NodeJS etc and is more User experience oriented.",
                "score": 5,
                "userId": 20871
            },
            {
                "text": "I'm sure work gets done, my team are full stack, but what I have found is that the quality of work is not always great if work is completed by somebody who is a back end specialist but has average front end skills (and vice versa). It's similar to playing a footballer out of position. Sure a striker can play in midfield but would he be as amazing as Zidane? Anyway, in this instance, I don't think it would have helped since the final story is dependent on an earlier story being completed by the back end Dev.",
                "score": 1,
                "userId": 20871
            },
            {
                "text": "@GuySchalnat nothing can not be learned, the point is to become extremely good at something takes years to master. Do you think that a front end developer can turn into an experienced dev ops engineer that has years of experience scaling high traffic sites after a few days of training? By that at a very very good level, without making any rookie mistakes which could negatively impact production and live clients? Even if they are given the time to develop this skill, it is very difficult to be very knowledgable if their focus is all over the place.",
                "score": 0,
                "userId": 20871
            },
            {
                "text": "@GuySchalnat I agree, but I think that it is much easier to have a cross functional team that has specialists. i.e. if the dev's strength is front end, his training should consist of learning different front end frameworks. If the dev is interested in back end dev, he should focus on diving deeper into dev ops. There isn't any point training people to deeply learn technologies that they are not interested in, you will get more out of them if they develop what they enjoy doing but at the same time can do basic development work in other areas.",
                "score": 0,
                "userId": 20871
            },
            {
                "text": "@GrimmTheOpiner That describes the situation and is what I did in the end.",
                "score": 0,
                "userId": 20871
            },
            {
                "text": "We do a lot of that at work. The issue is not being able to pick these skills up, the issue is whether the developer is interested in learning back end or front end technologies deeply. Many prefer one or the other, by forcing them to become a generalist from experience leads to poorer quality work if they are not that interested in it or have the knack. Front end is based on asynchronous coding, backend is procedural. The equivalent would be training a brain surgeon to become a heart surgeon, then expecting them to do a better job than someone who specializes in the heart and is passionate.",
                "score": 0,
                "userId": 20871
            },
            {
                "text": "@Aarif totally agree. That was one of the reasons why I left my job as a developer before going into management. They were trying to train me from being a web dev to a C# desktop developer when I enjoy web development a lot more and did not want to move into developing desktop apps. Not because I couldn't pick it up but because I do not enjoy that style of programming. If people play to their strengths, morale will be high, and the quality of work would be higher. Full stack development is a fraud imo.",
                "score": 0,
                "userId": 20871
            }
        ]
    },
    {
        "id": 21202,
        "title": "The development teams can't deliver successful sprints",
        "body": "We have 2 (50% distributed) scrum teams, that have been doing scrum for just over a year. Since almost the whole time, the teams' painful point is environments instability, from all perspectives: smoke tests failing and need to be looked at, things break and need to invest time into fixing them, things are deployed from other teams (we work in a global project) that broke our code and so on. All these are not the teams' problems, though they intermittently impede our teams. Otherwise, the teams state that are very happy and constantly improve. So, despite our velocity been estimated correctly (say 50), and if everything goes well we can deliver that, we are often called to fix our environments, do investigation, do root cause analysis etc. Therefore we end up not delivering successful sprints. We cannot gauge this downtime since sometimes takes up 1 person - 1 hour, sometimes 4 persons - 2 days to investigate and fix. This is completely random. This problem keeps being raised in retrospectives, the management is aware, and the response is that \"we are aware of these and agreement has been made to improve on such and such...\", and that \"we are moving towards improving the whole process by doing X,Y,Z\". In discussions between the scrum master and the development manager, the development manager almost refuses that these problems are the reason why the team is not delivering successful sprints, and that given good coordination, the team should still be delivering anything that they committed to. Committing to less might mean that the team is delivering everything and runs out of things to do in the sprint, whereas over-committing might end up not delivering everything. Also, under-committing has been proved to raise the manager's eyebrow as \"the team must always have things to do\", and \"under-committing\" is not the solution. What do you think are possibles fixes to this process so that the team can effectively commit and deliver within this environment?",
        "score": 7,
        "creationdate": "2017-03-05 13:44:02.093000",
        "viewcount": 1646,
        "tags": "<scrum><agile>",
        "answercount": 8,
        "favoritecount": null,
        "userId": 5522,
        "comments": []
    },
    {
        "id": 21223,
        "title": "Does it make sense to require developers to write a \"business value add\" section in each issue?",
        "body": "Background In our company we demand that engineers write a brief one liner section in each ticket they work on (from jira/github/gitlab etc) that explains the \"business requirement\".. the logic of that is explained here (text copied from our \"issue protocol\" document verbatim):  Business Value add The software projects we work on must always   ultimately serve a business need. Simply put b/c at the end of the   day, someone should be paying for the development of these tasks.   Therefore, it's very important to express the value add of the task in   a language that non-technical person can understand and appreciate. Think about it in the following scenario: we bill the client per issue   (ie in the monthly invoice we add the issue number and description in   a spreadsheet). For the client to know where their money is going,   they should be able to read the issue business requirement and   immediately understand it. This isn't the job of the PM on the   project, this is the job of the engineer working on the issue as   they're the one most familiar with it. If you need help expressing the   business value of the technical work you're doing, contact your PM and   they can give you a hand. Business Value add instructions Must be a one liner don\u2019t write a   whole detailed description of the requirement and the reason behind it   and the background etc. Simply state the business value of what the   task is about.  Must be a parent task No need to write business requirements for   subtasks. The business requirement for the subtasks can be inferred   from the parent task Must explain the business value add, not just describe a problem People don\u2019t pay engineers to report a problem. They pay them to fix   it. That\u2019s why the business value add section should simply state the   value added by doing it. Bad example Users won't be able to successfully checkout using valid   credit cards. Good Example  Fix bug preventing using from successfully checking out   by using valid credit cards Must use the imperative mood This is best explained here. Similar to   the git commit messages, business value should be written in   imperative mood, which is \u201cspoken or written as if giving a command or   instruction\u201d. A few examples: Clean your room Close the door Take out   the trash Please see above link for more thorough explanation  I have used this policy with several teams/startups with mixed results. But I was going over the book Software Requirements and it showed this image:  and it shows \"business requirements\" as high level business objectives that belong in the vision and scope document, rather than \"functional requirements specification\" doc.  Question Does it make sense to ask engineers to put a Business Value Add section in each issue they work on? Let's assume that engineers aren't trained for that kind of documentation (from my own experience, it's a hit or miss chance that engineers will be able to properly write a business requirement section, most of the time they do it just as getting through the motions and they don't really do a good job) then the next question is: does it make sense for anyone to write a business requirement section for each issue.. be it a BA or a PM etc? Update I just wanted to clarify something. Basically I guess my question makes more sense if given the context that the engineers doing the work are not from the same organization that's paying for the work. Classic example: entrepreneur outsources software work to a software shop, and pays them. The question I get all the time from such entrepreneurs is: where is all my money going? By requiring that the outsourcing company fill in the business value add section (and this is why it doesn't have to be an engineer doing it.. it could be the PM/BA from the outsourcing company), then the client gets a lot more visibility on where they're money is going, and I think that's fair (it better be, the client can simply make that a requirement when signing the contract).",
        "score": 6,
        "creationdate": "2017-03-09 04:20:23.717000",
        "viewcount": 226,
        "tags": "<methodology><documentation><business-analyst><business-process-mapping>",
        "answercount": 6,
        "favoritecount": 1,
        "userId": 23022,
        "comments": []
    },
    {
        "id": 21388,
        "title": "How should a Scrum Master handle high cycle times from individuals on a team?",
        "body": "As a Scrum Master / Agile Coach, what is the correct approach for dealing with Engineers in a team who take longer than the rest of the team to complete their tasks. Since we are using Kanban we aim for between 5 and 7 days average cycle time i.e. when they pick up a ticket to when they push it to done it should be between 5 and 7 working days. Thus far I have simply made this information available to them with dashboards.",
        "score": 4,
        "creationdate": "2017-04-03 10:25:39.180000",
        "viewcount": 1133,
        "tags": "<scrum><agile><software-development><kanban><development-process>",
        "answercount": 4,
        "favoritecount": 1,
        "userId": 4364,
        "comments": []
    },
    {
        "id": 21399,
        "title": "How does a \"rockstar\" performer integrate into an Agile team?",
        "body": "I have this issue for a while now: \"rockstars\" (e.g. a contractor or freelancer, who's very good technically) tend to be quite independent and reject any form of process. Many of them don't have the patience to learn about the process, as they focus on building things and are driven by tangible results. But on the other hand, many of them don't work well in a team, as they feel restrained by the team, rules, even Agile frameworks (not even mentioning Scrum, because Scrum seems to be the devil for these guys). My question is: how do you use Agile to make sure you keep these guys in the company? They are mostly very talented individuals, but how can you use the tools Agile offers to help them have their freedom but also work with others? *I do realise this is more of a people / group dynamics question but I find that many issue come from creating an Agile team, rather than using the right practices with people that have no issue with using Agile.",
        "score": 4,
        "creationdate": "2017-04-05 02:54:22.580000",
        "viewcount": 948,
        "tags": "<agile><team>",
        "answercount": 6,
        "favoritecount": 3,
        "userId": 26783,
        "comments": [
            {
                "text": "@RudolfOlah do you mind detailing how Scrum is restrictive? I am asking because the way I see and use Scrum is: it's a tool, I can use it in a very rigid way (e.g. Huddled must answer the 3 questions), or just adapt it. I'll continue with the huddle example: the team said it's useless, so we did a simple exercise to decide what should be discussed in the huddle to make it useful. The idea was: it's your team, it's a tool, the objective is to look into progress towards reaching our goal. How do you want to do it? How often do you want it? And same thinking worked with other tools.",
                "score": 0,
                "userId": 26783
            },
            {
                "text": "I agree that Scrum doesn't fit all projects and all people. That's why, if I can't work with Scrum and creates only tension instead of a collaborative work environment I move on to using parts of Scrum with other frameworks. It's not pure Scrum, indeed but again, Agile is about people over processes. As long as I address the concerns that Scrum tools are used for, it works out fine. If not, iterate.",
                "score": 0,
                "userId": 26783
            }
        ]
    },
    {
        "id": 21409,
        "title": "When should I use user stories and when just tasks?",
        "body": "I'm not sure if it makes sense to always write user stories, even for issues like refactor or backup. In your opinion in which of the following situations, it's better to write user stories than tasks:  features bug fixes additional tests refactor documentation continuous integration integration (GitHub with Slack, Jira with Slack...) error handling vulnerabilities fixes deployment performance improvement research import of data from another system appearance improvement portability improvement SEO improvement - database backup  Of course it's fine when I can write a user story to a feature and within this US tasks like UX, backend, frontend, refactor, research, SEO... However sometimes after completing a user story we want to refactor, improve performance, improve appearance...",
        "score": 1,
        "creationdate": "2017-04-05 14:08:41.110000",
        "viewcount": 1626,
        "tags": "<scrum><user-stories>",
        "answercount": 3,
        "favoritecount": 2,
        "userId": 28130,
        "comments": []
    },
    {
        "id": 21467,
        "title": "How do you handle the relationship and responsibilities of `Product Owner` and `Scrum Master`?",
        "body": "BACKGROUND  Onboarded with small startup ~15 people (40% Tech, 40% Sales, 20% Operations).   Everyone on team is onboard to start formalizing Scrum processes CEO drives vision of product, CTO executes on product, Operations formalizes Scrum process  QUESTION  How do you handle the relationship and responsibilities of Product Owner and Scrum Master when the CEO drives the vision of the product, the CTO is only worried about creating/executing on sprints, and the Ops team is tasked with collecting and formalizing requirements (obtained from sales & customer success teams) while officiating the Scrum process?  NOTE: The CEO specifically wants the Ops team to carry the majority of the responsibility for running the Scrum process (the CTO is in agreement). The CEO primarily wants to check in and help with User Story inputs (as the CEO is typically working with clients on partnerships and often receives feature requests).",
        "score": 3,
        "creationdate": "2017-04-13 16:02:17.907000",
        "viewcount": 879,
        "tags": "<scrum><agile><scrum-master>",
        "answercount": 3,
        "favoritecount": 1,
        "userId": 28245,
        "comments": [
            {
                "text": "@venture2099 - regardless, this doesn't change the subject of the question. If possible please provide valuable input",
                "score": 1,
                "userId": 28245
            }
        ]
    },
    {
        "id": 21575,
        "title": "How can we fix Sprint Planning meetings that are unproductive?",
        "body": "Currently, we have split \"Sprint Planning Meeting\" into two parts:  SPM1 - This we do at the first day of the sprint. Product owner discusses the stories that have come into the current sprint from Backlog. All stories are already discussed in Backlog so we don't have much here. Mostly we discuss if something was pending or not clear in backlog. Post this meeting, PO makes sure that team has 100% clarity about the stories. SPM2 - This is a purely technical discussion. We don't include PO here. We break stories into the testable task so that team member gets broad overview what needs to be executed, what is expected of each task, facilitate parallel development.   The problems we are facing:  SPM1 Problem - There are fewer things to discuss. The team is not convinced on exact agenda of the meeting, they say why don't we discuss complete thing in Backlog only. (We have two backlogs in a sprint). The rest dependencies they suggested can be discussed via email etc. SPM2 Problem - We struggle with creating tasks from stories. We don't have clear idea to what depth things should be discussed. Should discussion include which code layer i.e BL,DAL,UI, what code would be put OR just how different systems would connect with each other i.e. breaking of functionality and leaving rest to the developer?  Some additional context:  Team size: 5 developers, 1 tester, 1 Product Owner Sprint length: two weeks  Average production experience of developers/tester: 2 years  Are we doing something wrong here? Should we split \"Sprint Planning Meeting\" into two parts like this, is it standard scrum practice? How should we resolve these problems?",
        "score": 3,
        "creationdate": "2017-05-06 06:29:57.883000",
        "viewcount": 998,
        "tags": "<scrum><agile><planning><meetings><sprint-backlog>",
        "answercount": 3,
        "favoritecount": 1,
        "userId": 28471,
        "comments": [
            {
                "text": "We follow 2-week sprint, do weekly backlog meetings (each of 2 hours). In the first backlog of the sprint, we discuss what would come in the first week of next sprint. In the second backlog, we discuss what would come in the second week of next sprint. As soon as sprint starts, we conduct SPM1 with PO to make sure there is no doubt left after the backlog discussions and the team is ready to execute the sprint.",
                "score": 0,
                "userId": 28471
            }
        ]
    },
    {
        "id": 21586,
        "title": "pivotal tracker chore: Should chores be estimated or not?",
        "body": "To give a background, We are web automobile company having a new and used cars portal, something like autotrader usa We have lots of technical debt pending i.e. moving our pages to new backend technology, updating the versions of various open source modules we have integrated, modularizing the javascript etc. The problem is, should we give points to these or not? Why team wants point for chores:  There is a lot of legacy code that team says should now be considered as a feature since the majority of the team members never worked at the time when this legacy code was put to production. They say velocity measures \"how fast team delivers\", why shouldn't we count things like exploring new technology like a unit testing framework or new UI framework like React, upgrading existing software to higher versions, moving to better technology in the team's velocity, isn't these things worthy enough in fast moving technical world? Many times PO suggest to take short cut approach rather than ideal technical approach either due to business pressure or to quickly see the results. If the experiment succeeds,the same thing needs to be done in a proper manner. This is technical debt, why shouldn't we count this in velocity? Automating release process- this does not impact customers life, so it should be chore ideally. But it saves team's time and headache. Why we shouldn't give points to it?  Why it shouldn't be given points:  I believe if the team is smart enough to pick right chore activities time to time, this would automatically start showing up in velocity in future sprints. For example, if they start using a unit testing framework (done as a chore with no points), in future, there would be fewer bugs and team would be able to deliver more. If a team has to deliver 300 points in next 3 months, and they ask PO for clearing technical debt in the first month, so the team would be delivering 0 points in the first month. But the team should pick stories that would clear all technical hurdles so that team now can deliver 300 points in next 2 months. This would motivate the team to pick the business aligned technical debts and not random stuff to decorate their resume.",
        "score": 0,
        "creationdate": "2017-05-09 17:35:52.960000",
        "viewcount": 625,
        "tags": "<scrum><agile><pm-software><pivotal-tracker>",
        "answercount": 2,
        "favoritecount": 1,
        "userId": 28471,
        "comments": [
            {
                "text": "@CodeGnome: The accepted answer in this thread only discusses bugs. My question is only about chore and I have given multiple situations for that.",
                "score": 0,
                "userId": 28471
            }
        ]
    },
    {
        "id": 21588,
        "title": "pivotal tracker chore: Should chores be picked regularly or one complete sprint should be dedicated to it? At what rate velocity should increase",
        "body": "What is ideal scrum approach:  To fix bandwidth i.e. 10% of every sprint to clear off the technical debt? To dedicate one/two sprint every year to clear off these debts?  I believe both has its pros and cons like in  (1) we can measure things constantly i.e. if we are doing right things or are we off track? In case we are off track, next sprint we can try something else. While in (2) the continuity would lead to more work as complete team would be thinking in the same direction but with greater risk as it would be big code changes. Suggestions?",
        "score": -1,
        "creationdate": "2017-05-09 18:20:23.143000",
        "viewcount": 95,
        "tags": "<scrum><agile><pm-software><pivotal-tracker>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 28471,
        "comments": []
    },
    {
        "id": 21666,
        "title": "How can these problems with agile be solved?",
        "body": "I'm a lead developer and for the last four years I've owned a code base which has steadily been improving in quality.  I worked at a fairly small company and we previously worked in small waterfall cycles.  Typically we'd do a release of our software every 3->5 months.  We didn't use many formal project management methods but we had a good team and everybody was intensely collaborative.  I spent the vast majority of my time writing features, fixing bugs and improving the code base as I saw fit.  I refactored code when I thought we were starting to see too many bugs in that area and I focused on trying to make our code unit testable and of high quality.  QA would pick up our work once features became dev complete but we didn't work in sprints.  It's fair to say that things didn't always go smoothly and we did have some quality problems but productivity was very high. Fast forward to now..  We've been bought by larger company who have already fully adopted agile methodologies.  We've had to adopt their processes and some in our team were very keen to move to full agile.  Initially, for a period of about 2/3 months our work ground to a halt.  Decisions that were previously made quickly and efficiently, ad-hoc, by groups of interested individuals became part of the grooming process and we found that design by committee took forever compared to what we did before. A great deal of our time was taken up by grooming and planning meetings and at one point I realized that more than 50% of my time was now used for meetings.  Over time, during our retrospectives we've improved this process.  One of the things we did was to get individual team members to pre-groom Product Backlog Items (PBIs) so that some of the thinking had been done in advance and we didn't have to spend quite so much time just thrashing out the basics of each item during the meetings. However, some problems still remain..  Here are the big ones for me:  Generalization and group think has reduced the extent to which anyone \"owns\" the code base.  This has been really bad and it feels to me like the code base has been left to rot.  Nobody can do anything of any significance to it without a massive discussion first and all those little tasks that used to just happen for free no longer happen.  Instead specialists who used to do this stuff are busy doing other things which are the sprint priority even though they do them very slowly.  There's basically no time left to put serious thought into our code.  Over the longer term I think we'll pay a big price for this.  Developer passion has gone..  Nobody wants to spend so much time in meetings and all the decision making power has evaporated leaving the devs demotivated.  Decisions about what development tasks should be undertaken are now often taken by testers or others who don't actually understand the code and so now everybody just drudges on not really enjoying their work like they used to.  Generalization is wasting our time and damaging our code.  Right now I'm trying to learn a new programming language to fix one bug and bugs that I could be fixing in a language I know are being fixed by another scrum team by a guy who I don't think knows the code in that area well enough to be able to efficiently or effectively fix it.  This kind of thing has already caused us some quality problems.   So, how can we fix this within Scrum?  We can't get rid of the process, but can we change it somehow so that we can work effectively again?",
        "score": 3,
        "creationdate": "2017-05-24 12:23:07.933000",
        "viewcount": 329,
        "tags": "<scrum><agile>",
        "answercount": 3,
        "favoritecount": 1,
        "userId": 28651,
        "comments": [
            {
                "text": "That's actually one of the areas where we have improved.  We're spending about 2 hours a week grooming/planning now and we do stick to the big picture.  The big issue now is all around the code base and the fact that it doesn't seem to be possible to just do the ad-hoc stuff that need doing any more without it going through the process.  Weirdly adopting agile has massively dented our agility.",
                "score": 0,
                "userId": 28651
            },
            {
                "text": "We weren't perfect before and maybe flew by the seat of our pants too often.  But yes the pendulum has now swung so far the other way that we're less functional.  The big problem with scrum is that it claims it empowers people and makes teams self organizing.  What it really does is allows self organisation within a very limited framework..",
                "score": 0,
                "userId": 28651
            }
        ]
    },
    {
        "id": 21696,
        "title": "How to ensure sprint tasks are bug free before release",
        "body": "I was asked this question in an interview, and couldn't figure out the solution, so I thought I will come here.  Basically, I was mostly working as a developer, and had my own set of unit tests for the tasks I was finishing. But if I was a product owner or scrum master, then how will I ensure that development team has created enough unit tests, or tested the code properly? I think we can have acceptance testing, or even consider the bugs as part of next sprint. There is another option of having product owner and scrum master create a set of basic tests during sprint meetings. But that will cause the sprint meeting to run for hours. These are the two possible ideas that I could suggest.  Is there any other way, a product owner can ensure the quality?",
        "score": 2,
        "creationdate": "2017-05-26 16:20:09.620000",
        "viewcount": 406,
        "tags": "<scrum><testing>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 23395,
        "comments": []
    },
    {
        "id": 21741,
        "title": "Did i good to do quick fixes, couple minutes before deadline.",
        "body": "I took part in a above one year lasting project. It is website with couple additional functionalities for a rather important institution. ( in my subjective opinion ). At date 0 there was deployment of website to the public. So 22 may was website start. There were many bugs and features from a client, that at the day 19 may weren't fixed, developed. Three days before deadline i was delegated to go to a client and discuss with them and help with deployment. Client who was dozen of people told me all mistaked during three days, two meetings a day. Boss of my company went to vacation and i had to deploy website. We arranged with boss a small budget to me for helping with some bugs. And up to deadline hour i made with only my strenghts couple of fixes so final effect of website was without any mistake told by dozens of people. So in my opinion final effect to the users was ok. Because without that mistakes, as client wanted, who knows his users.  And now... Company who delivered most of code to website is very unhappy with my changes - that are telling about maintaining code. And also are unhappy about bugs in console. I am asking, everything is working on website, final effect is ok, i did a lot of things to a deadline as much as i could. Now the final effect is ok, but around this, people in my company may seem to be unhappy about quality of fixes i made to the end. It's not Mars mission, but website - some mistaked in javascript console can be turned off.  I even don't count on extra money because i did this, it was just a matter of my abilities - i have seen i had access to code, i am experienced programmer, so i repaired this as client wanted.",
        "score": 0,
        "creationdate": "2017-06-02 10:15:17.630000",
        "viewcount": 101,
        "tags": "<deadline>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 13378,
        "comments": [
            {
                "text": "Other company states that client importance is less important and i shouldn't do things bad and through shortcuts. Product is working, but they state that i shouldn't do this. Who is right?",
                "score": 0,
                "userId": 13378
            },
            {
                "text": "Money is not motivation for me here. I had better not being paid but having completed successfully it project. Such situation here.",
                "score": 0,
                "userId": 13378
            }
        ]
    },
    {
        "id": 21749,
        "title": "Deal with unestimated Defect-Tasks in Sprint for Veloctity calculation",
        "body": "As said many times before (1, 2, 3):   \"Do not estimate bugs / defects\".  I know in Scrum we try to minimize the defect rate, but it happens now and then. Fixing such unestimated tasks might have big effects on the actual velocity of the team. I wonder if there is some kind of proceeding or formula to make this visible to the team and to others? Or is it just, that an increase of defect rate (= drop of velocity) is a sign we should pay more attention to our QA? As we do not estimate Bugs, this one is not a duplicate of that question: Tracking points spent on bugs during sprint",
        "score": 3,
        "creationdate": "2017-06-03 18:00:19.317000",
        "viewcount": 131,
        "tags": "<scrum><agile><estimation><bugs>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 28506,
        "comments": []
    },
    {
        "id": 21912,
        "title": "Retrospective - too many small and random problems. Death by a thousand needles",
        "body": "After reading some literature about retrospective and actions it is not clear to me what to do if team faces big variety of random and small issues during sprint, and these problems do not occur often. For example, there is: - a bad code region where it is hard to implement new features, but features that touch this code come 1-2 times per year(of course this is just an observation of the historical events and there is no guaranty that this will not change in a month). It will take 1 week to, refactor the code; - Or there was a rare story that requires complicated deployment process, but the same, such stories/tasks happen few times per year and it usually takes 2 days to do it. Because actions from retrospective take teams time that can be dedicated to implement new product features it is not clear if team should pick any of such actions. Should team just take the biggest impactful problem despite the fact that it is rare? Or should it collect more data and don't take any action items from retro( besides data collection)?",
        "score": 3,
        "creationdate": "2017-06-29 04:53:31.360000",
        "viewcount": 399,
        "tags": "<retrospective>",
        "answercount": 5,
        "favoritecount": 1,
        "userId": 29014,
        "comments": []
    },
    {
        "id": 22052,
        "title": "Time estimates and epics as releases",
        "body": "My company is slowly adopting Scrum and I am doing my best to try to push us away from old Waterfall paradigms. However there are certain aspects I am finding quite hard to map in Team Foundation Server (TFS - visualstudio.com). The challenges I have at the moment are as follows. I am quite new to Scrum so any advice/critique is highly appreciated:  Investors require dates of high level estimates for certain milestones. For example, when should we expect a MVP (minimum viable product) to be ready. However, only tasks can be measured in hours. How can I provide the investors with a good set of proposed milestone dates in this case? I was told that Ideally, we should NOT use EPICS to represent a release. But since I see no other viable way of achieving this in TFS, I created an Epic called 'Minimum Viable Product' and added the features we want there. Thoughts? Finally, I got contradicting opinions on whether operational aspects of the product development should be included in TFS or not. Things such as 'decide on framework', 'set-up development environment', etc. One Scrum Master tells me we should NOT do this because Scrum should only list product deliverable, while the other told me told me that it is obvious that these things should be there as we need to account them in the product development.  Here is a screenshot of my backlog at this point:",
        "score": 2,
        "creationdate": "2017-07-24 09:48:30.683000",
        "viewcount": 1032,
        "tags": "<scrum><agile><tfs>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 29247,
        "comments": []
    },
    {
        "id": 22100,
        "title": "Should bug fixes be deployed as soon as they're ready?",
        "body": "I'm changing the development methodology in my team. When I joined the company, there was no methodology whatsoever (basically, patch 'n' deploy) and in consequence we have 400k of spaghetti unmaintainable untested code. I proposed a look into the Agile approach, and a we're doing a (quasi-)Scrum approach. Several months passed from the day I suggested releases based on sprints (rather than 3+ releases per day full of bug fixes) to the day my manager saw the benefits of this per-cycle release approach. However, (since we have no tests nor QA and the whole thing is a legacy monolith, and) since we're mostly doing bug fixes (23 bug and UI-fixes, 2 User Stories last sprint) my manager feels it's weird we have to wait till the end of the sprint to release all those bug fixes. I come from a background where we're usually backed up by automatic tests, and since we barely have to deal with bugs (1 or 2 bugs per sprint), we see no harm in deploying them along with big changes (like 4 or 6 user stories). So, since that is not the case in this company, should bug fixes be deployed as soon as they're done? Or should we deploy them at the end of the sprint along with the new features to maintain a commitment?",
        "score": 12,
        "creationdate": "2017-07-31 13:42:13.690000",
        "viewcount": 4113,
        "tags": "<scrum><agile>",
        "answercount": 5,
        "favoritecount": null,
        "userId": 17593,
        "comments": []
    },
    {
        "id": 22155,
        "title": "How do I facilitate an effective planning meeting with a remote team?",
        "body": "Background I am a scrum master for a team consisting of a PO, team lead and 3 developers. The team lead and 3 developers are off-shore in a totally different timezone. The PO is in the same office as me. Problems  Backlog grooming meeting is not working as they want to design the solution during the meeting. They want to estimate only when they understand and have largely designed the solution They want to take 'breaks' to discuss things in their native language They don't want to create user stories themselves which is fine, but they don't agree with the way the PO splits the stories either.  Question  How do I facilitate an effective planning/grooming/refinement/triage meeting effectively given this scenario?  I have taken a stab at solving my problem and this is what I came up with:  The PO and I do a user story mapping session just us 2 and come up with an initial set of user stories, and activities and then using the planning meeting to ratify and estimate with the team.",
        "score": 4,
        "creationdate": "2017-08-07 14:35:26.453000",
        "viewcount": 467,
        "tags": "<user-stories><scrum-master><product-management><product-owner><planning-poker>",
        "answercount": 5,
        "favoritecount": null,
        "userId": 4364,
        "comments": [
            {
                "text": "@BarnabyGolden the stories which are created by the PO are not, however the team does create stories as well which are more like technical tasks yes. I am trying to discover if they is management pressure I suspect there is.",
                "score": 1,
                "userId": 4364
            },
            {
                "text": "Ok so you've taken those words out of context. If you read the whole thing you will see that I am referring to having a whole understanding of the solution before estimating.",
                "score": 0,
                "userId": 4364
            }
        ]
    },
    {
        "id": 22361,
        "title": "Organization structure in startup",
        "body": "I was given the role of managing 5 different teams (iOS, Android, Backend, Firmware and Hardware (electronics)). All these teams consist of no more than 4-5 developers. There is also a QA team (2 engineers) and they are testing all the components, either feature or new firmware. All teams used to work separately with their own boards, backlogs, and sprints. Last month we started working on features dividing it on stories and moved iOS, Android, and backend to one dev board.  Currently, we have 1-2 dynamic feature teams, as some features can have different lifetime and require different developer pairs (for example, iOS+Android+Backend or FW+Backend, etc.) and individuals who are working on small tasks/tech debt or other items. I need to understand: - What would be the best organization structure of the above teams? Currently, I don't have any idea but to continue working as small feature teams. - How to estimate the productivity of each team member within one board where we are tracking either features or individual tasks. I understand that it would be better to track velocity of the TEAM, however, teams are kinda changing from feature to feature and not stable enough to trust the velocity. Thank you in advance!",
        "score": 2,
        "creationdate": "2017-09-06 14:30:00.743000",
        "viewcount": 381,
        "tags": "<team-management><planning><development-process><organizational-structure><process-improvement>",
        "answercount": 1,
        "favoritecount": 1,
        "userId": 29751,
        "comments": [
            {
                "text": "@Sarov thanks for highlighting this, I reviewed my question and removed one about the estimate, as I need to organize a team structure at the first hand.",
                "score": 2,
                "userId": 29751
            }
        ]
    },
    {
        "id": 22481,
        "title": "Can I convert relationships in MS Project from Start-to-Start to Finish-to-Start? Is there any equation for it?",
        "body": "I have a MPP file with Start-to-Start relationship between tasks. But when I import to MPP in one project, I need to convert it to Finish-to-Start relationship because the system only supports finish-to-start relationships.",
        "score": 0,
        "creationdate": "2017-09-28 07:05:37.863000",
        "viewcount": 64,
        "tags": "<ms-project><project-management-style>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 29966,
        "comments": [
            {
                "text": "I appreciate your answer. Condition here is, I have MPP with 400 tasks and some tasks have SS+<Number> relationships. But my web portal only have FS+<number> relationship settings. So how to convert SS to FS with some equation that works for all tasks",
                "score": 0,
                "userId": 29966
            }
        ]
    },
    {
        "id": 22680,
        "title": "How requirements are handled in TFS with Scrum template",
        "body": "We have just started using TFS (Team Foundation Server) 2017. The team project we created uses the Scrum template. There are only Epics, Features and PBIs (Product Backlog Items) in this template. How to create requirements? We don't want to use a CMMI (Capability Maturity Model Integration) template. So, the question is: how are requirements created/managed/manifested in the Scrum template?",
        "score": 1,
        "creationdate": "2017-10-25 11:23:32.633000",
        "viewcount": 2275,
        "tags": "<scrum><requirements><tfs>",
        "answercount": 3,
        "favoritecount": 1,
        "userId": 30246,
        "comments": []
    },
    {
        "id": 22716,
        "title": "Should building microservices be a chore or a feature in scrum?",
        "body": "We have recently started splitting a big monolith to individual microservices. Now the point of discussion is that under scrum methodology, building microservices should be a feature or chore? As per the scrum protocols, anything that doesn't provide direct value to users should not be a feature.",
        "score": 1,
        "creationdate": "2017-10-30 11:39:43.570000",
        "viewcount": 825,
        "tags": "<scrum><agile><project-management-style>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 30305,
        "comments": []
    },
    {
        "id": 22753,
        "title": "What happens when the PBI in a sprint are done but the sprint timebox hasn't expired?",
        "body": "I know that if PBI's cannot be completed within a sprint they can be re negotiated with the product owner  Now again a sprint cannot be shorted or lengthened then the agreed time box unless the sprint goal is obsolete. So how does the situation play out when the agreed definition of done is met before the time box expires?",
        "score": 2,
        "creationdate": "2017-11-02 13:02:42.623000",
        "viewcount": 324,
        "tags": "<scrum><sprint><product-owner>",
        "answercount": 5,
        "favoritecount": 1,
        "userId": 30285,
        "comments": []
    },
    {
        "id": 22807,
        "title": "How to optimise SPM2(Sprint Planning Meeting 2)?",
        "body": "We are doing 2-week sprint. As per scrum guideline, 2-week sprint should not take more than 2 hours to complete.  However, sometimes we take more than 8 hours to complete SPM2. I'm sure something is going wrong here. Below are aspects we cover during SPM2.  Technical Analysis Sometimes we also refer code to bring better clarity Breaking stories in to tasks  Most of the time consumed in step 1 & 2.",
        "score": 0,
        "creationdate": "2017-11-09 06:03:24.377000",
        "viewcount": 100,
        "tags": "<scrum><agile><planning>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 30305,
        "comments": []
    },
    {
        "id": 22849,
        "title": "Creating defect stories and inserting them immediately",
        "body": "When we have a story which can pass but produces a defect to be fixed, the PO or BA involved will usually write a new story and immediately insert it into the sprint on the basis that it is important enough because it is a business priority. Is this proper for scrum? If not, what should be done?",
        "score": 2,
        "creationdate": "2017-11-14 13:41:34.843000",
        "viewcount": 492,
        "tags": "<scrum><product-owner>",
        "answercount": 3,
        "favoritecount": 1,
        "userId": 29374,
        "comments": []
    },
    {
        "id": 22900,
        "title": "Meeting format for defining our definition of done",
        "body": "Can anyone recommend a format for facilitating a definition of done meeting ie, a meeting to define the teams definition of done.  I was thinking of first looking at artefacts and then associated a checklist with each eg epic, story, release and then definition of done for each of those.  Any ideas would be greatly appreciated.",
        "score": -1,
        "creationdate": "2017-11-20 13:04:21.163000",
        "viewcount": 147,
        "tags": "<agile><scrum-master><definition-of-done><agile-coach>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 4364,
        "comments": []
    },
    {
        "id": 23111,
        "title": "How do you plan for maintainence after a Scrum project",
        "body": "My background is 6 years in managing \"normal\" projects in an outsourcing company. Recently I've joined a Scrum project. Here I see people not doing any documentation, no SRS (Software Requirement Specification), no Detailed Design, almost no documents of any sort. They only create some user stories, then start to code. They don\u2019t even create a database design but do \u201ccode-first\u201d and generate the database from code.  So, the question is, how can you maintain such a codebase after the project is \u201cdone\u201d, say 3\u20135 year later, when all the current team members have moved on or can\u2019t remember what they did today?",
        "score": 5,
        "creationdate": "2017-12-20 01:54:37.593000",
        "viewcount": 189,
        "tags": "<scrum><agile><maintenance>",
        "answercount": 3,
        "favoritecount": 1,
        "userId": 1945,
        "comments": []
    },
    {
        "id": 23166,
        "title": "What could be potential harm of giving points to chores or technical debts?",
        "body": "Recently our team has decided to give points to the chores. They had an argument that:  Velocity defines team's capacity to deliver the work and if chores are not counted in velocity it won't reflect the true capacity of the team. As teams pick chores as per the business priorities/urgency i.e. in some sprint 1 or 2, in other up to 5 chores so, they feel the more chores they have the lesser would be velocity/capacity of the team in that sprint which might not be true. They feel chores also add value to the product i.e. if we have some duplicate logic and we plan to remove it as a chore. In long run, it would help us deliver and test things faster and hence, it delivers value indirectly to the user.  What could be downside of this approach?",
        "score": 0,
        "creationdate": "2017-12-28 19:29:23.443000",
        "viewcount": 95,
        "tags": "<estimation><story-points><pivotal-tracker>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 28471,
        "comments": []
    },
    {
        "id": 23167,
        "title": "Should we create multiple stories for same thing to be replicated at code level?",
        "body": "We have a page with the same content at 2 places. Since we are running with legacy code and due to some previously made bad decisions, we have duplicated the logic twice for the same thing. Both the pages are running on different technologies. Now if some changes/enhancement come to this, should we create two stories for this OR just one? And should we estimate it considering it would require duplicate effort OR it should be estimated as if its a code at just one common place?",
        "score": -1,
        "creationdate": "2017-12-28 19:34:39.590000",
        "viewcount": 51,
        "tags": "<estimation><pivotal-tracker>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 28471,
        "comments": [
            {
                "text": "No.. business wants it at both the places",
                "score": 0,
                "userId": 28471
            }
        ]
    },
    {
        "id": 23261,
        "title": "Measuring code productivity between team members",
        "body": "First question, so here goes! Between two programmers on the same team, one has produced more code but more defects, whilst the other has produced around 20% less code but significantly less defects by KLOC. Does established convention (and academic agreement) dictate that the more productive programmer is the first individual? - Defined by his raw output, or can a case be made for the higher quality code?",
        "score": 2,
        "creationdate": "2018-01-11 06:34:01.660000",
        "viewcount": 681,
        "tags": "<software-development><metrics><measurement>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 31098,
        "comments": []
    },
    {
        "id": 23331,
        "title": "Production bugs and epics in Jira",
        "body": "We are trying to organize our epics in a better way. In the past, the epics remained indefinitely open on Jira. Every production support/bug ticket will be added to the exsiting epic. However, since we use epics to track our roadmap (basically we have plugin that shows the epics timeline and what is active right now. It is very useful to give a big picture, since we have many epics), the indefinitely open epics render this roadmap useless.  We decided to close the epic, once all issues in that epic are closed. The problem now is, where to place production bugs/support tickets if the relevant epic is closed? If we add them to their respective epic, we will be back to keep th epic always open, which we do not want. If we do not assign them under any epic, it will be hard to track the support effort that resulted from certain epics. Anyone faced such a problem?",
        "score": 3,
        "creationdate": "2018-01-22 02:09:16.657000",
        "viewcount": 3349,
        "tags": "<jira><bugs><epics>",
        "answercount": 1,
        "favoritecount": 1,
        "userId": 13766,
        "comments": []
    },
    {
        "id": 23376,
        "title": "Can Fixed Scope/Variable Timescale be Agile?",
        "body": "I have an ongoing argument - our delivery manager tried to introduce a \"release after 3 sprints\" pattern into our teams.  Unfortunately, like many businesses, the actual work can be x number of sprints, often more than 3. I argue, just because the scope is fixed up-front, that is just our DoD.  We release to Live when we complete the scope and we are Done.  Nothing in there breaks agile principles - we just acknowledge that although in theory we could release to live at the end of a given sprint, in reality we never would until we are Done and then we have a true release candidate. He argues, agile can only be agile if you work a sprint at a time and have a release candidate every sprint. Which version is correct, or are we both right/wrong?",
        "score": 2,
        "creationdate": "2018-01-25 23:01:40.573000",
        "viewcount": 280,
        "tags": "<agile><sprint><scope><release-planning>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 24240,
        "comments": []
    },
    {
        "id": 23500,
        "title": "What is the best way to link the Business Cases to the user stories in Scrum?",
        "body": "I am Product Owner of a Scrum Team which has to develop features for multiple business units. All these features are translated in user stories. Of course, some features are developed for multiple business units. To explain it very plainly: for Project X we made a business case and got the budget to develop a feature. In the business case, we stated that it would cost an X amount of money to make sure we can earn Y dollars.  Now, a user story in our backlog will lead to the development of a feature which will be responsible for a certain Return on Investment for that project (or others as well). How can we best track this business value and make a direct link to the business cases for reporting purposes?",
        "score": 2,
        "creationdate": "2018-02-07 20:11:35.287000",
        "viewcount": 480,
        "tags": "<user-stories><business-case><value><business-process-mapping>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 31420,
        "comments": []
    },
    {
        "id": 23606,
        "title": "Agile requirements tracking",
        "body": "I am new to this forum, I will try to explain the best I can what I am facing. I recently entered a new software development company, and I am the coordinator of a team of Product Owners (POs) who (each of them) are in charge of 5 different products. The thing is that none of them document anything. The business sends requests on a daily basis and they write each requirement just in a simple JIRA issue, so they are not so easy to understand and cannot be properly documented. On one hand, I am trying to educate the business regarding these practices (but they are very demanding so I don't think I will have luck on that). On the other hand, and here comes my question: given the rush of daily activities, I don't want to be pushing the POs to document every single request that comes in. So, when would it be appropriate to formally document requirements? I mean, should we only keep track of requirements when they are long ones, and write daily, short ones is just an issue?",
        "score": 0,
        "creationdate": "2018-02-25 01:16:03.340000",
        "viewcount": 212,
        "tags": "<agile><requirements>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 31638,
        "comments": [
            {
                "text": "Well, software is working, but the process get messy on some occasions... As soon as I started working here, I met with all Dev Leads to see what could be improved from the POs side, and all of them agreed in that requirements were not clear, that each PO did that in their own way without following any standard way, they just put 2 or 3 sentences in a jira ticket and send that to devs...",
                "score": 0,
                "userId": 31638
            }
        ]
    },
    {
        "id": 23647,
        "title": "How to speed up a passed-the-deadline project while maintaining credibility?",
        "body": "The team I manage has been in the final pre-production push / bug-fixes stage at the end of the project for over a month now, while we allotted one week for these fixes (total project time was 2 months, are now at 3 months). Due to external pressures, I have twice pushed for deployment with the outlook that this first iteration of the product doesn't need to be perfect, and both times deployment has failed and we had to rollback due to bugs and not being ready for the actual launch (which requires downtime and complicated database migrations). I am \"defending\" my hurrying deployment (to my team) by explaining that I am OK with taking risks and \"breaking things\" in favor of relevance and ontime delivery, but they are not buying this. I feel that after two failed launches, I am losing/have lost credibility with my team, and they are not confident in my ability to decide to move forward, which is further slowing down the end of the project. What is the right thing to do here?",
        "score": 0,
        "creationdate": "2018-03-01 23:23:04.067000",
        "viewcount": 125,
        "tags": "<software-development><project-management-style>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 31681,
        "comments": []
    },
    {
        "id": 23744,
        "title": "How to make the Product Owner realize that he doesn't put focus on the right customer at all?",
        "body": "I'm Technical Leader for a software project dedicated to manage the \"VIP people\"-yearOfWork of a big company. Basically, to make it simple for this post, the project is a mix of a social network (between those VIP people) and a meeting network, where any one of them could be aware and participate to their respective yearly meetings. My Product Owner is, oddly, not one of those VIP people but one who remotely manages them (creating meetings etc, establishing their profile etc.). He's part of the Secretariat Team. He argues that he knows their jobs and therefore thinks mastering their needs.  The project is supposed to evolve through agile principles, to receive feedbacks early, but:                     Product Owner puts focus on features that is viewable, usable and focus on the management team, HIS team.           Product Owner argues that his team (secretariat) should benefit of this product to spent less times on redundant tasks like creating meeting for VIP people.   Problem is:   The backlog is full of Secretariat-oriented features and I can't see any VIP people-oriented features.   No workshop with customers to study deeply THEIR needs.  We got some feedback that VIP people find the software very light but interesting, but the product owner can't bear of the word \"light\". Customers are not aware of the amount of tasks under the hood dealing dedicated to the Secretariat Team; I'm sensitive to their \"appointment\". Product Owner thinks wrongly that the sofware is for HIS team more than VIP people and he's wrong.  How to make the Product Owner realize that he doesn't put focus on the right customer and that it is a huge risk regarding the project's lifetime since whole project budget is almost fully spent? How to make the Product Owner realize that receiving a feedback like \"pretty good project; but lacks some promised features after 5 months of work\" is not like \"Wow amazing!\" feedback?  I was very disappointed as a technical leader when the customer said: \"5 months for that ?!\"; indeed they just see a very very short number of features they can \"play\" with. Rest is hidden from them.",
        "score": 3,
        "creationdate": "2018-03-23 07:36:03.257000",
        "viewcount": 226,
        "tags": "<scrum><agile><product-owner><technical-leader><customer-satisfaction>",
        "answercount": 2,
        "favoritecount": 1,
        "userId": 29061,
        "comments": []
    },
    {
        "id": 23753,
        "title": "Should a technical person take part of the user stories prioritization process?",
        "body": "As a Tech Lead within a \"Scrum\" team, I am annoying regarding some laid rules.  It is established that only Product Owner, Business Analyst and Scrum Master (and eventually Product Manager) take part of the user stories prioritization process (backlog prioritization).  They are sorting US based on story points, without any further software-oriented facts and knowledge. Worth noting that those story points emerged from a quick and probably \"blind\" macro-estimation process, not a deep one.  They judge which valuable US could be delivered and when through those macro-estimations. I notice that their decision is often based on wrong assumptions and false hypothesis; leading to a sorting readjustment, therefore wasting anybody's time. Do you consider a Tech Lead (or any other qualified developer) should be part of this prioritization process to aid to prioritize based on programming knowledge? Like a guarantor of feasibility.",
        "score": 3,
        "creationdate": "2018-03-24 22:14:19.230000",
        "viewcount": 186,
        "tags": "<scrum><user-stories><prioritization><sprint-backlog><technical-leader>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 29061,
        "comments": []
    },
    {
        "id": 23801,
        "title": "Should we create an Epic for tech-debts",
        "body": "I was having a discussion in the team to create an Epic for all the technical-debts in the project. The problem is, as per definition Epic should not spawn more than a quarter, but, if we create an Epic for technical-debt it may run for the duration of the project. I surfed on Internet but could not find anything. Please help with right Agile guidelines.",
        "score": 5,
        "creationdate": "2018-04-04 07:07:22.397000",
        "viewcount": 2229,
        "tags": "<agile><jira><project-management-style>",
        "answercount": 4,
        "favoritecount": 3,
        "userId": 32023,
        "comments": []
    },
    {
        "id": 23809,
        "title": "What work items would look like related to support for a solution in production already?",
        "body": "Our shop is going to continue maintenance of a system in production already. Our next update consists of fixing a bug and creating documentation so that new members joining our team may understand the system. I don't know what the work items should be since we have a brand new Team Foundation Server (with Scrum template) and the higher-ups want all work tracked in it. Would something like this work?:  Epic: Customer relationship management \"Echo\" System Support and Updates. Feature: System Updates. PBI: 1. As a system admin, I want to understand the system completely so I can provide innovation and support. Bug: 2. No role validation during approval of a product. Task: 1. Create documentation with workflow process of \"Echo\" system. Task: 2. Refactor code so that approval action will validate if role is correct for validation.",
        "score": 0,
        "creationdate": "2018-04-05 13:11:22.290000",
        "viewcount": 64,
        "tags": "<agile><pm-software><tfs>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 32038,
        "comments": [
            {
                "text": "I saw and read your links - it seems to be substantiating the idea of being flexible with stories but still keeping the who, what, why questions answered. He joked about the \"As\" format, but he still ended up confirming it needed to answer those 3 Ws. However I'm more interested on how teams track their work that is not directly a business value\\product owner related, such as creating documents, training, new employees etc.",
                "score": 0,
                "userId": 32038
            }
        ]
    },
    {
        "id": 23836,
        "title": "How to improve (or to call attention to) the business value of technical needs?",
        "body": "Agile focuses on delivering the highest business value to the interested parts of a project. However, (at least in my scenario) it seems that the client/stakeholders are always focused on having more and better features, while avoiding to even glance to technical gaps and performance improvements (except when they become too obvious, or the problem is already too big to be easily fixed). How could the PO (or the development team) show to the people in charge the business value of these needs, considering that to do them it will take some time from the features-development resources?",
        "score": 2,
        "creationdate": "2018-04-09 11:39:28.353000",
        "viewcount": 150,
        "tags": "<agile><stakeholders><scope-management>",
        "answercount": 9,
        "favoritecount": 1,
        "userId": 31044,
        "comments": []
    },
    {
        "id": 23888,
        "title": "Work preparation as a task for upcoming sprint?",
        "body": "The team struggles with making their tickets ready for development. Mostly because the DoR requires a lot of work (designs, multiple translations, tracking, documentation, etc.).  Normally the team expected to get all of these from the PO. However this mostly does not work - it's really hard to get all of the DoR data and get them correctly. This is an issue, because developers are fed up with taking unprepared tasks to the sprint. It's also hard to refine tasks that aren't prepared, because without full DoR developers can't tell how hard is the given story.  My idea is to add tasks preparation as a part of the upcoming sprint. So: Sprint #1 - implementation and DoR for Sprint #2 Sprint #2 - implementing things prepared in Sprint #1 and DoR for Sprint #3.  Some of these things may be prepared by the PO, but this would also involve the developers in this process (in case PO isn't able to prepare these). I'm afraid that this is some kind of anti-pattern, because \"work preparation\" isn't a product increment, but I may be wrong. What do you thing?",
        "score": -1,
        "creationdate": "2018-04-17 10:56:23.220000",
        "viewcount": 79,
        "tags": "<scrum><refinement>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 31746,
        "comments": []
    },
    {
        "id": 24167,
        "title": "How to fill my day as a Scrum Master?",
        "body": "I have been a SM now for about 3 years and I enjoy many elements of the role and so far I have had really positive feedback from my stakeholders. The PO says I have good influence over them in making improvements and engineering managers say they are getting what they want from me as a scrum master so it seems to be good. What I do find however is that I go from being very busy during sprint end/start weeks to be very bored. I literally am not sure how to fill my day and its quite demotivating. I have started have 1-2-1\u2019s with all my team members as I think it important for they evolution to agile greatness but I still have huge gaps of my day when I have nothing to do. I have regular workshops with the team, but I don\u2019t want to take them away from their desks too much during the sprint because then they can\u2019t deliver on their commitments. I facilitate all their ceremonies and I do participate in the agile community in the organisation. I find however that if I am not doing what I mentioned above I have not much to actually do. Does anyone have any suggestions of things I am maybe not doing that I should be doing?",
        "score": 5,
        "creationdate": "2018-06-04 14:59:23.207000",
        "viewcount": 1347,
        "tags": "<scrum><scrum-master><agile-coach>",
        "answercount": 3,
        "favoritecount": 5,
        "userId": 32613,
        "comments": [
            {
                "text": "I have a dev background yes. 6 team members, a very active PO AND PM!",
                "score": 0,
                "userId": 32613
            },
            {
                "text": "Project Manager. I am not sure why a a technically complex project justifies a scrum more than a technically simple project. It sounds like you are eluding to the SM getting involved in the technical implementation.",
                "score": 0,
                "userId": 32613
            }
        ]
    },
    {
        "id": 24231,
        "title": "Questions about moving from JIRA to VSTS Agile",
        "body": "We have a small team, and most of us are part-time. We have been managing the project using JIRA's simplified software template. We have started using Visual Studio Team Services (VSTS) for continuous integration and we like it. I would like to attempt to use VSTS to replace JIRA, but I am struggling with the differences between the tools. Here is the workflow which has worked well for our small (non-full-time) team:  I pull a handful of stories out of the backlog, which we want to deliver. Assign them. Optionally break some into subtasks Developers work on them and move them to todo/done Tag each task with prod-fix or next-release (JIRA releases feature) I may pull a few more tasks onto the board as needed. We do a deployment/release. By marking a 'release' as done, they automatically get removed from the board.  I actually do 2 releases in JIRA: one for fixes and one for the new release. This helps keep track of what was done where. Repeat.  I would like to duplicate something like this in VSTS. But it seems that it is built around rigid Scrum practice, rather than our semi ad-hoc approach. I created a new 'Agile' project in VSTS to try and duplicate our process. I have the following questions:  I see Features and Stories have separate backlogs.... why? Is there a    way to see them together?  I can see how I would use Iterations similarly to how I am using Releases in JIRA. But why do iterations have a backlog?  I figured out how to rename board columns on Features/Stories, but how do I rename the columns on the Iterations boards?  Is the 'Work Items' just a flat list of tasks?  Why do I need to go into Backlogs to a see the Current iteration? I have to explain to the Team that to see the board, they have to go under Work -> Backlogs -> Click the current Iteration -> Click Board? That is not going to go over well. Is there a quick way to get to the board for the current iteration? 99% of the team will only ever need that. It seems that Work -> Backlogs defaults to the board view of the current iteration. The the main issue is the odd naming, telling them to Backlogs to see their 'Current' tasks If I want to simplify things and Make Epics and Issues go away, can I do that? I foresee wasted time on people debating the difference between an epic and feature, and issue and bug, etc. Is there a way to get rid of the Capacity tab?  Can I rename priorities low/normal/high? I don't want debates of when 1 is     a higher priority than 4.  In some of the forms certain letters of words are underlined, such as the 'e' in State, and 'A' in Area, and 'r' in Iteration. What is the point of that? I can't find mention of it in shortcuts help.  How do you log work against task? Or do the Effort (hours) have to be manually recorded? (we rarely use this features, so not a big deal) Are areas equivalent to components in JIRA?  How do I complete an iteration? Start another? How do you mark a task as Resolved? It only lets me set it to New/Active/Closed? What is the diff between resolved and closed?  Any answers and thoughts appreciated.",
        "score": 3,
        "creationdate": "2018-06-13 16:23:37.437000",
        "viewcount": 291,
        "tags": "<agile><pm-software><jira><tfs><vsts>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 32684,
        "comments": [
            {
                "text": "The main reason was we wanted to use VSTS (DevOps now) for our build/deploy pipelines, and so it made sense to host our code and project management there. I wasn't 100% sure that I would stick with VSTS. But after a year of use I am very happy with the move.",
                "score": 0,
                "userId": 32684
            }
        ]
    },
    {
        "id": 24396,
        "title": "How to spot low/high performers within team",
        "body": "We are team of 3 people. We are adapting scrum methodologies.  Everything is based on kanban (trello) where we do daily, retrospectives and sprint planning (the tasks being forecasted by working hours). Thing is that I have fast developer and slow developer. The fast developer always needs to \"make-up\" on the slow one. I can spot the slow one because I am at the office, but of course when we grow bigger, it will be hard to spot. We want to spot slow developers in order to improve and take actions. How can we do that the scrum way?",
        "score": 4,
        "creationdate": "2018-06-30 16:38:32.337000",
        "viewcount": 619,
        "tags": "<scrum><agile><team-management><performance>",
        "answercount": 7,
        "favoritecount": null,
        "userId": 32836,
        "comments": []
    },
    {
        "id": 24436,
        "title": "How to deal with hotfixes keeping the scrum methodology",
        "body": "My team works with scrum methodology.  However, during some sprints we have hotfixes that have to be developed as soon as possible, so we treat them in the current sprint, and consequently we have an impact on the sprint goal in which we are engaged. These hotfixes have to be corrected quickly, without time to create a task in the backlog or without previous refinement. Which would be a good way to keep the scrum methodology, while we add constantly these hotfixes to the sprint?",
        "score": 18,
        "creationdate": "2018-07-06 09:46:00.843000",
        "viewcount": 3658,
        "tags": "<scrum><sprint>",
        "answercount": 4,
        "favoritecount": 3,
        "userId": 32567,
        "comments": []
    },
    {
        "id": 24486,
        "title": "Can one person be Scrum Master inside two project at the same time?",
        "body": "We have a software company and our team is ten people and the number of projects we have is two.  Can one person be the Scrum Master inside two projects at the same time?",
        "score": 8,
        "creationdate": "2018-07-14 06:58:46.760000",
        "viewcount": 1289,
        "tags": "<scrum><agile><scrum-master><team-size>",
        "answercount": 4,
        "favoritecount": 3,
        "userId": 32943,
        "comments": []
    },
    {
        "id": 24493,
        "title": "What should we do if there are not enough PBIs to fill a final Sprint in Scrum?",
        "body": "Background Scenario At the end of a project, there aren't enough story points to fill a two-week Sprint based on the velocity of the team.  Capacity & Backlog The average velocity of the Development Team is actually 40 points per Sprint. In the Product Backlog there are just 20 points remaining to be completed. Question Should we start this final Sprint as a standard two-week Sprint, no matter the amount of points remaining, or should we use a quick one-week Sprint in this case?",
        "score": 12,
        "creationdate": "2018-07-16 01:36:35.083000",
        "viewcount": 2397,
        "tags": "<scrum><sprint><sprint-planning><product-backlog>",
        "answercount": 4,
        "favoritecount": 2,
        "userId": 32948,
        "comments": []
    },
    {
        "id": 24498,
        "title": "How can we register the technical debt in Scrum?",
        "body": "Scrum emphasizes that all members of the team must know the technical debt of the product. But sometimes, this debt is not tangible as a simple to-do list. Should we register it as another task in the product backlog to review in another sprint? Or should we put it in some document related to this product, so the team can actually know what tasks should be treated later in the development? I'm not seeing a good way to keep this debt in developers' minds; it can be forgotten later.",
        "score": 13,
        "creationdate": "2018-07-16 13:07:33.817000",
        "viewcount": 3242,
        "tags": "<scrum><scrum-master><product-owner><technical-debt>",
        "answercount": 4,
        "favoritecount": 5,
        "userId": 32948,
        "comments": []
    },
    {
        "id": 24551,
        "title": "How to manage technical conflict between Product Owner and developers?",
        "body": "Imagine you are a Product Owner. And you have planned a sprint, prepared every detail, broken down the epics into stories and already presented your roadmap to management and promised the releases ahead. In the sprint planning you also give 10 features to your engineering team. The developers tell you that they are not willing to work on two of your requirements at this time and give you some technical talk which is hard for you to follow and tell you that they want to actually have two additional requirements of their own for the sprint. How do you respond?",
        "score": 5,
        "creationdate": "2018-07-22 14:08:21.650000",
        "viewcount": 2366,
        "tags": "<product-owner><sprint-planning>",
        "answercount": 3,
        "favoritecount": 1,
        "userId": 33014,
        "comments": [
            {
                "text": "@ThomasOwens so sorry for my incomplete question , im the product owner !",
                "score": 0,
                "userId": 33014
            },
            {
                "text": "@VickiLaidler i know it was wrong but it happened !",
                "score": 0,
                "userId": 33014
            }
        ]
    },
    {
        "id": 24606,
        "title": "Scheduling for Calendar Time when availability is variable?",
        "body": "I have a few core team members who also look after daily support. It\u2019s not uncommon for them to get stuck in some firefighting for a day or two which completely throws off a project schedule. How can I keep my stakeholders from getting frustrated every time the date pushes back?",
        "score": 4,
        "creationdate": "2018-07-30 13:48:38",
        "viewcount": 53,
        "tags": "<scheduling><schedule-risk>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 33092,
        "comments": []
    },
    {
        "id": 24669,
        "title": "In scrum, does it ever make sense to hire a product owner?",
        "body": "I have seen a scrum team trying to hire a product owner. They advertise for scrum skills, and experience. Does it make sense to hire a product owner from outside the company? If I do what skills should they have?",
        "score": 9,
        "creationdate": "2018-08-08 18:52:51.453000",
        "viewcount": 651,
        "tags": "<scrum><product-owner><human-resources>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 3424,
        "comments": [
            {
                "text": "I have seen an advert for a product-owner role. It is 100% focused on Scrum skills, no mention of the product, or what the company does. I then noticed that there are many jobs advertised for a product-owner, though I did not read any of these.",
                "score": 0,
                "userId": 3424
            },
            {
                "text": "@nvoigt that looks like an answer, a short answer, but an answer. (it seems about the right size for what you have to say)",
                "score": 0,
                "userId": 3424
            }
        ]
    },
    {
        "id": 24688,
        "title": "Is a good Scrum practice to meassure the developer team by the story points completed at the end of the sprint?",
        "body": "We have new teams working on scrum and they estimates all the points of a several ammount of stories. But, at the beggining, they have no reference of how ammount of points could be delivered in two-week sprint. We see at the end of the sprints that not all the points are being completed. Near to the end, the team is overhelming, and the quality is being sacrified just for deliver on time. I want to know if this kind of KPI makes sence in scrum environment, and if not, how  can we assure the team are being as productive as they normally are?",
        "score": 4,
        "creationdate": "2018-08-11 22:16:29.543000",
        "viewcount": 257,
        "tags": "<scrum><planning><sprint><kpi><measurement>",
        "answercount": 2,
        "favoritecount": 2,
        "userId": 32948,
        "comments": [
            {
                "text": "Before scrum, we just measure the deliver on-time, rather than productivity itself. The team set the due date of each task and they must complete it in the agreed time.",
                "score": 0,
                "userId": 32948
            }
        ]
    },
    {
        "id": 24695,
        "title": "PM techniques/tools for fixed-price 6 month client project",
        "body": "I am looking for project management techniques and tools to help with the following situation. (P.S. I know this question is technically off-topic but I felt Revisiting Tool Recommendation Questions expressed a degree of leeway. I am new to project management. I'm sure the community has a lot of useful advice for me.) We are doing a software development project for a client which has a fixed budget (about USD 100k) and fixed time (about 6 months). I have a team of developers working on it. The requirements are clear (and I've worked with this client many times before so I don't predict big problems there.) My question is, how can I keep this project on track in terms of time and budget? (If I go over budget then that'll be very frustrating, despite all the work we're going to put into the project, it would make more sense for me to fire everyone and just sit in Starbucks all day... I really want to avoid that!!) I'm thinking, you can't change the past, but you can change the future. So I need to keep a track on the costs that have happened, and the predicted costs and effort in the future. And keep a constant eye on whether we're predicted to hit the time and budget constraints, and if not, try to take action. The sooner I know the more chance there is of being able to correct course; if I find out the night before the deadline we're not going to make it, it's too late to correct it. Here's what I've considered:  Scrum. Dividing the project up into sprints. But, because I know what all the sprints are going to contain ahead of time, it's not really \"agile\". Is this a good/useful option? Use a tool such as MS Project Online, LiquidPlanner or similar, to enter all tasks and estimates. Team knows what to do, team updates estimates and tasks as soon as things change. I keep a constant eye on spent budget, predicted budget, predicted delivery date. Which tools should I look at there? Use an offline tool such as Excel or MS Project (offline). And have weekly status meetings where everyone has to update me. I have the worry that then I'll be a week behind (e.g. I've literally seen such situations; have the meeting Monday morning, on Monday afternoon a big problem is discovered, the plan is out-of-date until the next Monday, a week is lost during which preventive action could be taken). Plus nobody likes those big status meetings. Plus they cost a lot.  Bonus features I'd love:  Handling uncertainty somehow, e.g. a screen in the framework we already know can be predicted reasonably accurately, a piece of research less so. Ideally \"min 0.5 days, expected 1 day, max 5 days\" or something. Real world estimates such as \"1 day of effort\" as opposed to \"7 story points\" I don't have to spend ages moving Gantt bar charts around the place. Ideally I say \"this takes 1 week of effort, and can't be started before this other task finishes, and this person is on holiday on those weeks\" and the tool tells me if it'll be done by the deadline or not. Dependencies, critical path analysis, so I know which work to look at in case we're not going to meet the deadline. Display of how long people have got work for e.g. \"Bob runs out of work in 2 weeks, Joe in 3 months\", so I can decide who should take on new tasks. \"what if analysis\" like \"if I add another developer to the team, will it help the deadline, assuming we have to train them, and maybe development isn't on the critical path\"? Ideally web based. Not PC/Mac based; so it's cross-platform for my team, and ideally not paper-based to support people who aren't always working from the office. Generate reports with nice KPIs such as what % of the project we're through to present to the client. (Nice to have) Tool is not slow and difficult to use and annoying. (Nice to have)  I don't mind about cost, if I can avoid a financial disaster with this project then I'm happy to pay for it! EDIT/ADDITION: Thanks to Erik for the question \"What kind of action are you going to try and take, if the project has fixed budget, fixed time, and fixed scope?\" Here's what I was thinking:  I can ask the client for more time. It might be OK for the client or it might not be but it's worth asking. It's never ideal to ask for more time, but if I have a 6 month project and I ask for 2 extra weeks in the middle, I think it sounds more professional than if I ask for those 2 extra weeks the night before the deadline. And if the client is doing marketing activities based around the deadline, it might really be no problem to postpone them 4 months before the deadline, but be a real problem to postpone them if you let them know a few weeks before the deadline. I can ask the client for more budget, or to reduce scope. Again, far from ideal! But I've done it, and it does sometimes work. Again, doing it with months still to go allows for a better conversation with the client than the night before the deadline, where some of the features the client might offer to drop have already been developed (so dropping them would now no longer help). Reduce exploratory work. Maybe the team is spending time exploring new technologies (e.g. new software frameworks or whatever). Such things can help the project, or not, one doesn't know at the start, if they're time they're definitely worth investigating. I can terminate such activity and assert we'll use technologies we already know. (This example comes from my actual experience.) Potentially put other people on the project, if it's just a question of time and not cost. Always a risky move. But, at least it's an option if there are months still to go. It's not an option if there's only two weeks to go. Better to know about the problem sooner than later.  Discovering risks as soon as possible seems to make sense to me. You're going to make better decisions the more information you have (i.e. it's better to know it's going wrong 2 weeks in, than not to know.)",
        "score": 8,
        "creationdate": "2018-08-13 09:25:48",
        "viewcount": 1441,
        "tags": "<deadline><fixed-price>",
        "answercount": 6,
        "favoritecount": null,
        "userId": 26128,
        "comments": [
            {
                "text": "@Erik - Thanks for your question, I have added a section to the question with the answer.",
                "score": 1,
                "userId": 26128
            }
        ]
    },
    {
        "id": 24807,
        "title": "Can you change the end date of a sprint?",
        "body": "Ideally we commit to work being completed and releasable by the time the sprint finishes. However sometimes things happen or estimating is a little bit out. If we are approaching the end date of a sprint and a user story is not quite finished - maybe another day will see it completed - is it ok to change the end date e.g make the sprint 11 working days instead of 10? Or should we strictly abide by the end date and move the unfinished story into the next sprint? Or something else?",
        "score": 5,
        "creationdate": "2018-08-29 13:33:49.490000",
        "viewcount": 1758,
        "tags": "<scrum><agile><sprint>",
        "answercount": 5,
        "favoritecount": 1,
        "userId": 33399,
        "comments": []
    },
    {
        "id": 24889,
        "title": "Business days calculation for the sprint",
        "body": "Our team is new to agile. We are in the phase of defining the rules for sprint planning. To start, we are keeping our Sprints at 2 weeks (10 business days). Let's say there is a public holiday in a week: then we are left with 9 business days. Should the Sprint duration be kept to 10 business days, which means two weeks and 1 more business day? Or should the user stories be chosen in a manner to fit in the 9 business days?",
        "score": 2,
        "creationdate": "2018-09-12 08:49:20.203000",
        "viewcount": 1599,
        "tags": "<scrum><agile><sprint>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 33526,
        "comments": []
    },
    {
        "id": 24897,
        "title": "How to start Data Warehouse project in agile projects when client ask just some reports?",
        "body": "Agile project management prevents coding for the future. Our client asks some reports which can be coded withing the schema of existing database structure, but the best practices strongly suggest that the client really aims for some kind of  data warehousing solution. Neither our company nor our client is ready for upfront investments and additional work that will bring rewards in future only. What to do? 1) Be satisfied with the present status quo and go with suboptimal design of reports with low maintainability? 2) strongly press for warehousing solution. Who makes such decisions? Developers see the problem, client and management does not see the problem and don't understand the concerns of developers. What should be done in this situation, what behaviour are expected by the best practices of project management methodologies?",
        "score": 1,
        "creationdate": "2018-09-13 13:14:22.793000",
        "viewcount": 91,
        "tags": "<agile>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 22925,
        "comments": []
    },
    {
        "id": 24904,
        "title": "DevOps and support organization",
        "body": "Nowadays companies go into devops practices to boost productivity. In our case we (3rd party outsourcing vendor) developed a first version of the product for our client  , it\u2019s cloud based platform.  We do have tests, the deployment is semi-automated since there are fashion manual steps (like AD requests) . We don\u2019t have continuous delivery and deployment yet, though. During development, we cooperated with client IT ops so they contributed to the product development (they built images, deployed to pre-prod, prod, fixed issues related to client infrastructure) Now it\u2019s time to go-live and client wants to formalize support but still follow devops practices. For me it\u2019s quite hard to understand how this can be built.  For example: If we keep on implementing new features and have a team working on the product, we can spend % of development time on support requests (2 and 3rd level of support), so that devs are integrated into ops, and understand the pain of users or ops, can not only fix issues but also bring some improvements to deployment, monitoring etc. to make product more reliable, faster and deliver value to business quicker.  But what if there is no new features development and just support (with 2nd and 3rd level) that either configuration and standard operations according to runbook (2nd level) or defects fixing on 3rd level.  Since those are OPEX for clients they don\u2019t tend to invest in this \u2013 hence there is no real opportunity (in terms of efforts spent) to follow and foster good devops practices during just support with no active development.  What do you think ? Is it possible to run support in devops mode with no active product development ?  how this can be done ?",
        "score": 0,
        "creationdate": "2018-09-15 06:23:28.397000",
        "viewcount": 63,
        "tags": "<devops>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 17675,
        "comments": []
    },
    {
        "id": 24992,
        "title": "What to do with a Product Owner who is not able to understand the role",
        "body": "I am a ScrumMaster for a team of developers and QA's with a Product Owner. I have tried unsuccessfully for the last year to get the PO to understand what the role of the PO entails and he just does not seem to get it. He tries my suggestions for a few weeks and then he slips into his old mode of working especially when deadlines loom:  Micromanages team members Manages the team Attempts to plan the teams day, during standups Leers at them when they are sitting in a group chatting and asks why they are not working Constantly asks for updates Attempts to design the solution Relentless in his pursuit of understanding the solution design at a low level Dominates almost every team meeting and ceremony including technical solution design meetings even though they clearly don't have solution design experience or development experience Is constantly involved in team management related work e.g. resourcing of the team etc Does not write/is not able to write user stories and acceptance criteria at a level of detail for the team to design and code effectively Spends more time on the first points than actually doing requirements elicitation   What have the team said:  They have raised the need for acceptance criteria and scenarios on numerous occasions  They have said that the requirements are not clear and do not provide enough to 'go on'  They have said they do feel 'managed' by the PO (during 1on1's with me)  My question is where should I go from here. I am at the end of my tether.  I was thinking my next step should be to talk to his manager and explain that I think he would make a very good traditional manager or project manager but I cannot see any qualities useful for a Product Owner.",
        "score": 8,
        "creationdate": "2018-10-05 07:50:37.287000",
        "viewcount": 1408,
        "tags": "<scrum><agile><scrum-master><product-owner>",
        "answercount": 3,
        "favoritecount": 1,
        "userId": 32613,
        "comments": []
    },
    {
        "id": 25105,
        "title": "What is the proper way to add/represent development tasks (like refacturing) to a sprint?",
        "body": "We coded something which works but is quite terrible. We have planned the refactoring of that piece of code in this sprint but since it doesn't really fit in a user story, how do we add or represent this? Nothing will change at front-end, just back-end.",
        "score": 0,
        "creationdate": "2018-10-20 21:30:38.873000",
        "viewcount": 87,
        "tags": "<agile><sprint><kanban-board>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 33870,
        "comments": [
            {
                "text": "It's more that I don't really know where to put it. Do I move the User Story back to `In Progress` and add it as a task or do I put it somewhere else? That part of the code is of two sprints ago.",
                "score": 0,
                "userId": 33870
            }
        ]
    },
    {
        "id": 25159,
        "title": "How to deal with a team that fails to complete a task?",
        "body": "I had been in a situation where details about the task and the target to be followed have been explained to the team. However, in spite of multiple follow-ups, they fail to complete the defined tasks in the given timeline. They come up with reasons such as 'I was occupied with personal works', 'I was not well', etc. However, at the end, I will be responsible to answer to the client for the missed deadline. How to deal with this situation with the client and convince him?",
        "score": 4,
        "creationdate": "2018-11-01 13:35:06.463000",
        "viewcount": 1244,
        "tags": "<team-management><tasks>",
        "answercount": 4,
        "favoritecount": 1,
        "userId": 33974,
        "comments": []
    },
    {
        "id": 25391,
        "title": "Moving backlog items into Sprint",
        "body": "In Agile, who's the person responsible of moving tickets in Jira (e.g. moving backlog items into Sprint).  Is this a Scrum Master's responsibility or Product Owner?",
        "score": 4,
        "creationdate": "2018-12-05 00:41:07.067000",
        "viewcount": 1969,
        "tags": "<scrum><agile><jira><sprint><backlog>",
        "answercount": 4,
        "favoritecount": 1,
        "userId": 34291,
        "comments": [
            {
                "text": "We're in the middle of the sprint.  Thanks.",
                "score": 0,
                "userId": 34291
            }
        ]
    },
    {
        "id": 25671,
        "title": "We work with fixed scope, price and time - why should we use Story points?",
        "body": "We deliver projects in fixed price, fixed time and fixed scope environment. We have a contract that specify those, specifications of features. Recently, an agile couch was trying to convince me to switch to story points but I fail to see how this would help me?  Why should I add an abstract unit that does not bring anything? Velocity is nice, but I have features estimated with time so I can clearly see whether we are making the deadline or not. By the nature of the contract, I cannot not have time estimates as high level estimates were done to calculate the price! So, I know I have 13 people, 5 months and have to deliver X features. How would story points help me in this situation? I am really trying to see the benefit here.",
        "score": 2,
        "creationdate": "2019-01-24 14:59:53.927000",
        "viewcount": 581,
        "tags": "<agile><planning><estimation>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 31435,
        "comments": [
            {
                "text": "@TiagoCardoso Yea, the upper management hired him to possibly improve things but we are a large company. To be fair, we do have R&D departments where agile might work just fine (in the end, it seems designed for product development rather than solution delivery) and they have the liberty to play with scope, time and even costs. Not for us who have to honor a strict contract with the customer.",
                "score": 0,
                "userId": 31435
            },
            {
                "text": "@Venture2099 Of course, projects are never perfect. But I have never seen a project (mind you I do not say \"product\", as with R&D agile is far easier) for a large customer where you create a contract based on story points, that just does not happen in real world. You get requirements, you estimate the effort and put a price tag on it...the customer either agrees on that or not.",
                "score": 0,
                "userId": 31435
            }
        ]
    },
    {
        "id": 25683,
        "title": "How to handle when planned work is blocked and a developer has capacity to take on a new user story that may be too big",
        "body": "Assume the following situation.  All but one user story planned in a sprint is completed. The remaining user story is blocked.   A developer would like to take on work in the highest priority work in the backlog that has been estimated. Unfortunately, the story is bigger than the time remaining.  Ideally, the developer would like to make an early start on work that will be planned for the next sprint. What is the proper way to handle this situation? Should the user assign the unplanned work to the next sprint?  In this case, the active sprint does not include all the work that is actively being worked on (ideally, we want the active sprint to be the source of truth of what developers are working on) If we assign it to the active sprint, then we will most likely have a spill-over.  Everyone would prefer not to do this unless there is a straight forward way to distinguish spill over from planned work vs spill over from unplanned work. What is the standard way for handling this situation?",
        "score": 5,
        "creationdate": "2019-01-25 18:04:53.283000",
        "viewcount": 435,
        "tags": "<scrum><user-stories><jira><sprint><sprint-planning>",
        "answercount": 1,
        "favoritecount": 1,
        "userId": 17316,
        "comments": []
    },
    {
        "id": 25719,
        "title": "Scrum for SDK development - split stories horizontally?",
        "body": "Our product is moving more and more in the direction of a software development kit (SDK) which can be used by other developers.  This brings up quite some challenges to our agile processes, though and I am searching for suggestions from people who have experience with this.  The main question we are struggling with is: how to split user stories, since we are disagreeing on who our user is. Are we planning for features from an end-user perspective (we currently ship the SDK together with a standard implementation, so everything actually has UI, etc. but customers can also adjust this standard behaviour to their needs) or is it enough to define a ticket in terms of \"There should be a method in class X doing Y\"? In \"normal\" Scrum Teams, it's a bad practice to split user stories by horizontal layers but some team members argue that if we consider the SDK consumer as a user, then a ticket \"There should be a method in class X doing Y\" should be valid and that a separate ticket for UI for the same feature can be created since that one targets a different user/use-case.  I hope I explained well enough to give you a good understanding. I am happy to hear your thoughts, experiences and suggestions!",
        "score": 5,
        "creationdate": "2019-01-30 14:22:47.593000",
        "viewcount": 721,
        "tags": "<scrum><software-development><user-stories><development-process>",
        "answercount": 2,
        "favoritecount": 1,
        "userId": 33761,
        "comments": []
    },
    {
        "id": 25767,
        "title": "How to improve team motivation with minimal wage increment but fair performance ratings?",
        "body": "How would you motivate the team when the annual wage increment is minimal (less than 5%) even though the performance ratings are very fair?",
        "score": 4,
        "creationdate": "2019-02-08 09:49:35.893000",
        "viewcount": 288,
        "tags": "<motivation><performance>",
        "answercount": 2,
        "favoritecount": 2,
        "userId": 11970,
        "comments": []
    },
    {
        "id": 25872,
        "title": "What can I do when I can't adjust scope, resources, or schedule and a team member wants a raise?",
        "body": "After almost 20y programming and 5y managing I have arrived at a state to be so confused with the basics that I need help from outside! At the project management we have 3 pillars:   Scope: features and functionality Resources: costs and budget Schedule: time  And those 3 results the product with a kind of the quality. Most of the programmers are employed. They have a fixed time based costs. But they have hidden costs too: example producing bugs. Managers or product owners usually have a yearly budget or a budget for feature set. Usually 2 they have at fixed from 3. That resulting the 3rd it is adjustable somewhat or the 4th: quality Example 1 year budget for development of X feature is Y sum. At PM level is the similar: for the next Sprint in 3 week we need to do 10 backlogs, and I know the team costs ( salary) What if somebody is asking a salary increase? if I keep him, I have higher costs. Hence probably my budget will blow up.  I can try to replace him or raise the budget. What if  I can't keep him, but can't lose him, because hard to replace him (maybe takes to much time or even higher salary requests are), and the feature set need to met and the quality can't be lowered?",
        "score": 4,
        "creationdate": "2019-02-24 04:16:00.560000",
        "viewcount": 271,
        "tags": "<team-management><cost-management><human-resources><budget><constraints>",
        "answercount": 4,
        "favoritecount": 2,
        "userId": 35133,
        "comments": [
            {
                "text": "Project Manager\nSC UBISOFT SRL1 job \n \nJOB DESCRIPTION\nIdeal candidate\nResponsibilities\n\nDeliver the project scope within budget and time",
                "score": 0,
                "userId": 35133
            }
        ]
    },
    {
        "id": 25900,
        "title": "As a Scrum Master, how to handle management expectations on delivering story points?",
        "body": "Problem - I've been appointed as a Scrum Master to a new team and senior management (CTO) expectation is that our team should deliver more than the SP capacity we can currently realistically deliver. This SP expectation is based on previous (over an year ago) estimates. A lot has changed since then. The application has become more complex since then, there are new developers and some developers left. Senior management now brought in a new developer in and they hope that will help the velocity but I told them the velocity will go down and only after a while go up. They should also consider the stress on the testers. How to approach such situation with senior management?  More background on me and what I have tried:  I was a Scrum Master for one year in another project I worked with team to break larger stories down because when they carried over a task from one sprint to another it was always big. Went with a lower velocity that is based on the latest velocity and sprints. Remove impediments and act as the scrum master (The team thought they can do it themselves) in areas such as planning, stand up's etc.. Promote pair programming (Not mentioned in scrum but helped the team a lot) I did proper retrospectives (As mentioned by Esther Derby)",
        "score": 8,
        "creationdate": "2019-02-26 16:22:20.020000",
        "viewcount": 414,
        "tags": "<scrum><agile><project-management-style><micro-management>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 34072,
        "comments": []
    },
    {
        "id": 26011,
        "title": "Is there a relationship between technical debt and velocity?",
        "body": "Per my understanding, velocity is just a metric used to forecast work for future sprints, therefore it has no significance other than for planning purposes. Even if technical debt exists, my assumption is that it would get factored in when work is estimated. I'd still like to understand if there is any relationship between technical debt and velocity, perhaps if I have missed thinking of something.",
        "score": 4,
        "creationdate": "2019-03-15 03:11:08.747000",
        "viewcount": 973,
        "tags": "<scrum><agile><sprint><velocity><technical-debt>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 35135,
        "comments": []
    },
    {
        "id": 26070,
        "title": "How to manage long-term software quality requirements?",
        "body": "As newly assigned manager on an already ongoing agile continuous delivery software development project, one of the objectives is the following.  Ensure that software quality meets long term requirements.  The project consist of 50+ software developers distributed on different sub-products. So far, the following issues has been identified, which can be possible indicators that improvement is needed of the software quality.  No big new features been released in recent time Different UX across sub-products Some software modules are barely maintained after ownership shifts Architect team is not responsible for quality Software developers started leaving project Seem too much coordinating across teams for new initiatives Often workarounds are used meet customer requirements  So far, the approach to quality has been implicit. Recently, the following has been added.  A Definition of Done of epics   This seems not to capture the above 7 issues, as it has a more narrow focus. Quality seems hard to measure in a purposeful way as suggested by this and this. Further, it seems hard to navigate after the above 7 issues. This leads to the following considerations. How to identify purposeful efforts? How to estimate the effect of the efforts? When is it enough? Anyone with any experience on how to approach managing long-term software quality focus?",
        "score": 1,
        "creationdate": "2019-03-26 16:05:13.737000",
        "viewcount": 249,
        "tags": "<software-development><quality><quality-management>",
        "answercount": 4,
        "favoritecount": 1,
        "userId": 35296,
        "comments": []
    },
    {
        "id": 26106,
        "title": "How to work with sprints having to provide support to unplanned issues?",
        "body": "All, I have to work with an Agile team that they have to attend to live system issue(tickets) fixing while working on a sprint. So that we cannot achieve the committed  SP  at the end of the sprint. Does anyone have advice for such an issue?",
        "score": 4,
        "creationdate": "2019-03-30 18:04:19.040000",
        "viewcount": 240,
        "tags": "<scrum><agile><planning>",
        "answercount": 5,
        "favoritecount": null,
        "userId": 34796,
        "comments": []
    },
    {
        "id": 26133,
        "title": "Should dev oncall fix P1 issues?",
        "body": "We have a scrum team, and are debating two approaches for fixing P1 production issues. For P0 issues, whoever is the expert in that area jumps in and fixes the issue, so that the issue can get addressed at the earliest.  The P2 issues are moved to the backlog and get prioritized for future sprints.   However, P1 issues are such that we cannot wait till the next sprint for them to get fixed.  Hence, we are debating two approaches here:  Whoever is the dev oncall fixes the issue; though they may not have the complete context of that area of code; they would get the context from the dev owner of that feature and fix the issue. The dev oncall only does the initial analysis to confirm that it is a genuine issue, and dev owner of the feature fixes the issue.  In approach 1, the advantage is that nothing planned for the current sprint is impacted, and everyone in the team gets to work on areas that they may not have previously worked on.  However, this approach will spend more of oncall bandwidth, and if there are more issues, then, we may need multiple oncall during some sprints. In approach 2, the advantage is that the P1 issues will get fixed at the earliest since the person with the complete context of the issue works on it. However, something planned in the sprint will have to be deprioritized. Do you see any other advantages / disadvantages of these two approaches, and would you advice to choose a specific one?",
        "score": 5,
        "creationdate": "2019-04-05 06:24:18.663000",
        "viewcount": 150,
        "tags": "<scrum><sprint><development-process>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 23633,
        "comments": []
    },
    {
        "id": 26149,
        "title": "Parallel Sprints Use case",
        "body": "Why do we need Parallel Sprints? I am trying to understand the use case here.  Consider our Use case  We have two developers and two testers on our scrum team We have four developers joining the team (but they are not dedicated team members) Our sprint cycle is 2 weeks  Do you recommend parallel sprints for this scenario? The team is thinking to have sprint 1 and sprint 2 (with four developers) start on the same date, but sprint 2 to have 3 weeks cycle to accommodate the testing.",
        "score": 3,
        "creationdate": "2019-04-08 18:35:26.060000",
        "viewcount": 801,
        "tags": "<scrum>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 35550,
        "comments": []
    },
    {
        "id": 26220,
        "title": "In Scrum, what should we do with partly-completed work started at the end of a Sprint?",
        "body": "I get most of Scrum. However, I can't get my head around what to do with work in progress at the end of a Sprint. If we are working in a swarm, we can defer the end of a Sprint, or bring it forward if we don't think we have enough time. However, when working as individuals or in pairs, not every one finishes at exactly the same time. Therefore some people will be sitting around, or producing work that cannot be finished. As a developer I hate it when I am halfway through my 7th bit of work, and the Sprint ends. If the unfinished work is selected for the next Sprint, all is good; but if not, then I feel disheartened. Even worse is when it is selected in a later Sprint. (This seems to go against the low work in progress philosophy). In the past I adapted our practice to focus on low work-in-progress, and regular review (but no Sprints). I later realized that this was Scrumban. Am I missing something? I would like to get a better understanding of pure Scrum. (I know we are supposed to adapt it, but understanding it first is also a very good idea).",
        "score": 8,
        "creationdate": "2019-04-16 19:51:18.107000",
        "viewcount": 419,
        "tags": "<scrum><agile><sprint-backlog>",
        "answercount": 2,
        "favoritecount": 2,
        "userId": 3424,
        "comments": []
    },
    {
        "id": 26339,
        "title": "Agile Estimation - How to estimate for bugs?",
        "body": "The story points can be used for estimate user stories and tasks will be marked in hours in Visual Studios.  When there is a critical bug (which is not in the backlog, reported by users) we incorporate to the current sprint and try to resolve it within the current sprint. In doing so, we have to make adjustments to tasks or other issues, which,in turn will probably end up in a future sprint.  Now when we want to estimate for the critical issues reported (on TFS), we can enter the effort in hours. But, this does not display in the charts and nor it is counted. I figured that, if I was to monitor the effort for bugs, I have to create them as tasks and then only I can monitor on the charts.  My question, is do you recommend this approach or is it there something that I am doing wrong?",
        "score": 2,
        "creationdate": "2019-05-03 11:03:02.877000",
        "viewcount": 397,
        "tags": "<bugs>",
        "answercount": 1,
        "favoritecount": 1,
        "userId": 35772,
        "comments": []
    },
    {
        "id": 26369,
        "title": "Multiple people working on the same new open source project and chaos",
        "body": "How to take advantage of multiple people working on a single android app when it comes to tasks and task delegation? It seems like a lot of times it is a matter of sewing multiple pieces of code done by others together. Is there a better way? Please note that the project is very new. We don't have a lot of code and are working ideas and drawings.",
        "score": -1,
        "creationdate": "2019-05-09 12:02:20.173000",
        "viewcount": 45,
        "tags": "<team-management><project-management-style><open-source>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 35858,
        "comments": []
    },
    {
        "id": 26555,
        "title": "Mark user stories as not possbile/plausible",
        "body": "Our team noticed during this Sprint that a user story is not plausible to do from a technical point of view. We approved this decision with our stakeholders and client and we want to mark this user story as \"will not be implemented\" or something similar. I can't find any official documentation on how to deal with these sort of user stories. Is there an official way to mark these user stories and are there some functionalities in the tool Jira for that?",
        "score": 2,
        "creationdate": "2019-06-03 18:29:05.967000",
        "viewcount": 180,
        "tags": "<scrum><user-stories>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 36080,
        "comments": []
    },
    {
        "id": 26602,
        "title": "WIP Limits broken by low-priority Stories - What to do?",
        "body": "Current Situation Small team of 4 developers and 2.2 QAs. I'm trying to implement work in progress (WIP) limits. There are currently many (37) Stories waiting for QA (also 22 currently being QA'd, but that's a separate issue). Of these Stories, some of them are an entirely new application that isn't yet live. Most/all (I haven't checked) have been merged to develop branches but are alone so could always just delete develop and remake it from master. It's possible (though somewhat unlikely) some of them are merged into develop with other work, though. Problem Now, as per my understanding, as per how WIP limits should work, the team should be focusing on reducing those 'waiting for QA' Stories instead of heaping more Stories into the 'Waiting for QA' by developing more stuff. Problem is, until now, the team has been working on things without much regard to priorities. So many (~2/3) of the Stories waiting to be QA'd are much lower priority than things that are waiting to be developed. Question So... what should be done? I can see these possibilities, but have no idea what is the best approach:  Ignore the low-priority Stories (and, consequently, reasonable WIP limits) until sometime in the future when they can be addressed. Create some other field or column to hide the work until such time as it's relevant. Throw away the work and move the Stories back to Ready to Develop. Ignore priorities and get the work under WIP limits as soon as possible. Some solution I've missed...?",
        "score": 3,
        "creationdate": "2019-06-10 19:54:27.200000",
        "viewcount": 98,
        "tags": "<kanban><prioritization><work-in-progress>",
        "answercount": 1,
        "favoritecount": 0,
        "userId": 25606,
        "comments": [
            {
                "text": "@ThomasOwens updated Question. Also, we do QA after integration to develop. When we go live with a revision, we merge develop to master.",
                "score": 1,
                "userId": 25606
            },
            {
                "text": "@BartvanIngenSchenau In-between. It's \"this project isn't due for a few months, but if it's late people are fired\".",
                "score": 0,
                "userId": 25606
            }
        ]
    },
    {
        "id": 26616,
        "title": "How to plan for bugs, looking for advice",
        "body": "I work in a software development company, where we use something which resembles scrum.  We have sprints of 4 weeks We have 6 sprints / release We plan a development per sprint, with an estimate We have a debug factor, this is the time per sprint allocated for debugging (varies per developer) We have maximum levels for our bugs  We run into the issue that when we are working on our developments, and the bugs start coming, we need to drop our development work and focus on debugging. When the maximum levels are reached, we don't release our software anymore and we need to first fix bugs before we make new builds for our customers. This all seems perfectly reasonable, since we only release every half year and we have customers waiting for the bugs to be fixed. However, this creates the situation where we sometimes don't find the time to work on our developments, because we have to keep debugging for weeks sometimes. How can we plan correctly for bugs? A couple of things I thought about, but I'm curious what your opinion is   Plan bugs as regular developments, with an estimate. Don't give them priority If a developer spends it's debugging budget for a sprint, don't debug anymore that sprint and continue work on the development. Other options?",
        "score": 2,
        "creationdate": "2019-06-13 08:45:46.133000",
        "viewcount": 706,
        "tags": "<scrum><planning><bugs>",
        "answercount": 5,
        "favoritecount": 1,
        "userId": 31119,
        "comments": []
    },
    {
        "id": 26621,
        "title": "How to move towards Scrum when we don't really seem to be able to fit into 'The Scrum Guide'?",
        "body": "I have previously asked a question on PM, which was not well focused, but I still received some useful tips. I do plan on putting some of the notions in front of my manager, but I would like to re-approach our issues here to see if I can't get any more insight. I work for a mid-sized American company (300ish) on a very small, not officially/organizationally recognized development team (3). Only one of us has a degree in CS (and it isn't me). Our manager is an manufacturing engineer and has negligible experience programming, designing software, or managing a development team (except for the past two years of our 'covert developing'). On top of this, our developer with a CS degree tends to work on projects solo, separate from the other two of us. We have an insane amount of projects our manager is looking to achieve. Essentially he is hoping to digitize most of our Quality & Inspection processes & paperwork, all the way to semi-automating our PPAP/PFMEA documentation. Frankly it is all way more than is chew-able by such a small, inexperienced team (in any sort of respectable time frame), in my opinion, but I admittedly tend to have a 'glass half-empty' attitude. So far our extended time frame hasn't been an serious issue to our company's President. Half of the projects are very large... our current project has more or less taken up about 70% of overall work-time for two of our developers, and has taken 2 years to develop, and still going (we had to restart the architecture and include unit-tests because we didn't know what we were doing when we started). Now, our manager (who, to his credit spends a lot of time reading on relevant subject matter to try and understand our position as developers better) wants to try and work under a Scrum framework. I have taken on the role of Scrum-Master, our manager as Product-Owner, and of course the other two developers are... developers. Other mgmt. and our President would be the 'shareholders'. My main issues that I am struggling with, and unsure how to approach are:  Our 1 'team' actually consists of two separate development teams working on unrelated projects (mentioned in second paragraph) and either team can, currently, get our priorities changed independent of the other team's priorities as well. This seems like it should be 2 separate scrum teams but our manager/PO does not have the time for that, and I don't think I have the mental energy for it, currently. Also, how are we supposed to be accountable as a team for separately developed projects? Projects are all essentially interwoven into the same 'suite' and our projects kind of have blurred borders/edges. Even if we break projects into hard-defined boundaries... the projects are still quite large and our product backlog could be too much to navigate if it is fully populated Fully and accurately populating the product backlog seems daunting, as often times 'case-scenarios' are often overlooked by shareholders in favor of 'the ideal interaction' or they state outcome but struggle to define how to get that outcome even on paper. Sometimes processes get such a vague description such as : \"The quality tech would look up the relevant specification and make sure the document conforms\"... which you can't turn into programmable logic on its own, we aren't making magical PDF parsers. More on the previous point: Getting vague, generalized process outcomes from shareholders has required us to go and talk to individual employees that actually do the paperwork, often times the nuances in their process will slightly deviate the generalized mind's-eye picture of the shareholders, which then often triggers long, grueling conversations where we as the developers are just trying to get the shareholders to understand what we need to know and why we need to know it... this seems incredibly anti-Scrum and I don't see how we are supposed to essentially design an enterprise-level software-suite if we have to re-explain why we need to understand case-scenarios and the nuanced details of the process every time we outline a new software behavior. Is there a way I can get non-programmers to understand our needs better? Especially when I have a hard time outlining our needs because we are trying to digitize processes that often rely on 'tribal knowledge' We lack personnel to be able to handle documentation, training, and maintenance (we often have to drop development work to handle these \"fires\" as they come up) EDIT: some of my other points kind of speak to this, but how granular/detailed should a PBI be? Do all PBI's have to be finishable within a sprint? Also, can Scrum Planning, Review, and Retrospective be held without any PO or Shareholders if none of them have time?",
        "score": 1,
        "creationdate": "2019-06-13 15:58:30.360000",
        "viewcount": 163,
        "tags": "<scrum><software-development>",
        "answercount": 1,
        "favoritecount": 1,
        "userId": 32932,
        "comments": []
    },
    {
        "id": 26695,
        "title": "How several teams should work on one product using Scrum?",
        "body": "Problems:  A team should be able to do the increment. But with multiple team the product may become unstable because the changes from different teams may create code or functional conflict. Who should solve this problem and how? We have no architect role (all members are developers without additional titles), and code quality rules may be different in teams. One of the teams may always add technical debt to the product and the other teams will suffer from it. How to solve this problem?  Assumption: project is a big monolith application with tight coupling.",
        "score": 0,
        "creationdate": "2019-06-23 14:07:48.650000",
        "viewcount": 567,
        "tags": "<scrum><agile>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 36314,
        "comments": []
    },
    {
        "id": 26909,
        "title": "Is there any estimation method to estimate end user testing?",
        "body": "Is there any estimation technique that can help us to estimate the number of needed test cases in traditional software projects? For example, we have a Software requirements specification (SRS) with 200 use cases; can I say \"we need 200 *10 = 2000 test cases\", as a rough estimation? We need this estimation to write a test plan for the project manager. Sometimes we don't fully understand the application from the SRS because of having spent too little time performing test planning.",
        "score": 1,
        "creationdate": "2019-07-31 17:02:16.077000",
        "viewcount": 89,
        "tags": "<estimation><testing><software>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 35136,
        "comments": [
            {
                "text": "i mean with \"end user testing\", that the software is being tested by testing team to be confirmed and ready to publish on user PC",
                "score": 0,
                "userId": 35136
            }
        ]
    },
    {
        "id": 27208,
        "title": "Is it really necessary to have a four hour meeting in Sprint planning?",
        "body": "According to Wikipedia, it is recommended that there should be a four hour meeting in a two-week sprint planning (pro-rata for other sprint durations). Is it necessary? Why?",
        "score": 15,
        "creationdate": "2019-09-18 06:11:13.413000",
        "viewcount": 9177,
        "tags": "<scrum><sprint><sprint-planning><timeboxing>",
        "answercount": 6,
        "favoritecount": null,
        "userId": 37190,
        "comments": []
    },
    {
        "id": 27773,
        "title": "What is the best methodology for a multiproject and multiteam environment?",
        "body": "I'm working in an enterprise that realizes several dozens of projects based on its own system. The problem is that there are:  several projects several teams several modules that are associated with teams  Currently, PMs work as coordinators of their projects between Teams - the same project can be done by several teams, and sometimes one part of a project depends upon other teams. Currently, we follow a Scrum-like approach:  Teams up to 9 members 2-week sprints planning of work is done at the beginning, but there is much unplanned work delivered by PMs  All this leads to some factors:  Low morale of Team members; it is very rare (~0%) that a Sprint is done in time One worker got an idea to just ignore all Scrum activities  As I see at this moment, the main problem is in many-many relationship between Teams and projects; even when there is no product itself, it spreads over the projects. So my question is the following: maybe the best way would be to use Kanban? Workers will only pull work items from the backlog, just organizing flow. Maybe we don't have VERY complex projects, to justify using Scrum, and Kanban will be useful. I want to discuss this with my bosses. Are there any obvious disadvantages that I've missed here?",
        "score": 0,
        "creationdate": "2019-12-17 08:37:50.763000",
        "viewcount": 189,
        "tags": "<scrum><kanban><project-management-style><multi-projects><multi-team>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 35731,
        "comments": []
    },
    {
        "id": 27909,
        "title": "How to motivate a team when you have nothing to offer but equity?",
        "body": "I recently got into the whole startup scene, and I was hired as CTO for an early-stage startup. I've got a fair bit of engineering experience, but when it comes to management, I'd definitely be in the junior range... I think I understand the essentials when it comes to managing people:  Align user stories with their personal aspirations Give them independence Do not criticise in public Set an example Sell the whole thing as an opportunity to gain new skills fast etc  I'm doing all those thing, and yet... the output I'm getting is minimal.  I should clarify that we hire people on a part-time basis (10 - 20 hours a week), and we offer good equity (and no actual pay). New joiners always have an enthusiastic disposition, and they can get loads done in their first couple of weeks. Then they stop appearing online on Slack; they stop responding to my messages; and, eventually, they stop posting the weekly standup messages. The people that do contribute only offer the bare minimum -- not even 10 hours worth of work weekly. I'm really at a bit of a loss here. I shared my vision, and received no pushback from anyone. I can only assume that we're aligned and everyone agrees with the vision. This begs the question: if I can't offer money, how can I possibly motivate my engineers?",
        "score": 22,
        "creationdate": "2020-01-07 19:34:09.880000",
        "viewcount": 10266,
        "tags": "<product-owner><motivation><startup>",
        "answercount": 12,
        "favoritecount": 2,
        "userId": 38229,
        "comments": [
            {
                "text": "@Mefitico They are all remote workers spread across several timezones. No office attendance required (there's no office). Everyone has a full time job and is only engaged with the startup on a part-time basis.",
                "score": 0,
                "userId": 38229
            }
        ]
    },
    {
        "id": 28012,
        "title": "User Stories in backend/frontend teams working for clients",
        "body": "We are a small software agency (15 people), currently using Jira, and implementing some Scrum practices more rigorously.  But we're struggling with understanding how User Stories would help some parts of our dev process, particularly when backend/frontend teams work asynchronously. As our allocation of people to projects may vary from sprint to sprint, it's common that one sprint there may be only backend work, and then the next only frontend work. So the User Story may be complete only after both areas finished their part. We're aware that this is not a good practice, but for the size of the company it seems useful. Problem An US may take several sprints to be finished (because of async work between frontend and backend). I'm aware that this wouldn't be a good practice. Possible solutions 1-  Not using US at all (how we're currently working). So we're using only Tasks (like implementing an endpoint for backend, or implementing a view for frontend), and Epics directly.  Cons:  Developers loose sight and ownership of the big picture of the feature.  We can't measure feature/US deviation.  2- Avoid our async practice between specializations (backend/frontend).  We should make sure that in every sprint we have a \"full-stack\" team that is able to complete the US. Cons:  It's common that we have idle people when transitioning between projects. For example, it's useful for us to work some backend tasks before the Frontend team start.  3- Use User Stories, but it may be finished after several sprints. Cons:  They may be only completed after several sprints. It's not clear who is the owner. Should it be the last person in charge? Or the PM?   I'd would appreciate some thoughts on this. Thanks for your help",
        "score": 3,
        "creationdate": "2020-01-21 21:07:59.190000",
        "viewcount": 2443,
        "tags": "<scrum><agile><jira>",
        "answercount": 2,
        "favoritecount": 1,
        "userId": 38421,
        "comments": []
    },
    {
        "id": 28023,
        "title": "Slowing down of an agile team as the development progresses",
        "body": "Let's consider an agile software project.  In the beginning of a project each Story can be implemented quite quickly because the code base is small, there're few dependecies between different parts of code, we don't have to maintain backward compatibility etc. But as the team moves forward the code base becomes larger, more complex - it requires more time to understand all the dependecies. We need to spend more time talking to other developers about the current architecture. A Story that used to be done during a few days, now becomes to require at lest a week.  Nearer to the end of the project fixing even a minor bug often becomes very difficult because the code base is huge, there are a lot of dependecies and restrictions (for example, backward compatibility). So as the team progresses its velocity should slow down. The same Story in the beginning of the project may be estimated as 1 Story Point, but the this very Story taken into development at the end of the project may be estimated by the team as 10 Story Points or greater. Agile manifest sates that an agile team should maintain a constant pace - is it really possible? The team, of course, may begin to give more points to Stories to compensate for this complexity increasing, but that would mean that Story Point itself isn't a fixed unit of measure, and threrefore we can't use Story Points for forecasting the amount of time required to complete the project.",
        "score": 0,
        "creationdate": "2020-01-23 18:39:26.253000",
        "viewcount": 127,
        "tags": "<scrum><agile><estimation><story-points>",
        "answercount": 2,
        "favoritecount": null,
        "userId": 38012,
        "comments": []
    },
    {
        "id": 28226,
        "title": "How can I make sure that the development team understand the importance of the Scrum ceremonies?",
        "body": "I heard a comment the other day from a team in our organization  As soon as release pressure increase the scrum ceremonies gets   neglected  I thought to maybe have a chat with scrum master and have a session with our organization around this subject because I think this might affect more than one team. I am not sure how to approach this meeting because I know all ceremonies are important  Scrum ceremonies are important elements of the agile software delivery   process. They are not just meetings for the sake of having meetings.   Rather, these scrum ceremonies provide the framework for teams to get   work done in a structured manner, help to set expectations, empower   the team to collaborate effectively, and ultimately drive results. If   they\u2019re not managed appropriately, however, they can overwhelm   calendars and drown out the value they are intended to provide.  As of writing this I dont know what \"neglected\" means in the context of this team but I will still have a meeting. The point is, it\u2019s not about whether or not they are doing these things perfectly but that they are doing them at all.  Each of the ceremonies has a very particular reason for its existence and continued use, so we want to target those reasons, not stick to some unnecessarily rigid definition of what\u2019s \u201cright\u201d or \u201cwrong\u201d. Agility requires us to adapt to changing conditions, but it starts by adopting processes that make us more likely to do the right things at the right times. Do you have any pointers when I talk to the teams?",
        "score": 3,
        "creationdate": "2020-02-24 09:35:05.507000",
        "viewcount": 214,
        "tags": "<scrum><agile><scrum-ceremonies>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 34072,
        "comments": []
    },
    {
        "id": 28228,
        "title": "How should a Scrum master handle disagreements about story-point estimates in Scrum?",
        "body": "For example : Some see its userstory (e.g. 2 points) and others see technical complications and judge that the story should be 20 points. The 2-point voters say, \"I understand your opinion, but don't think those complications are valid.\" The 20-point voters say, \"The past tells us that these things are always a lot more complicated then they seem.\" Now the team is in deadlock condition. can you someone  put some light on this. how to handle this suitation.",
        "score": 20,
        "creationdate": "2020-02-24 10:23:13.280000",
        "viewcount": 8220,
        "tags": "<scrum><agile><estimation><user-stories>",
        "answercount": 9,
        "favoritecount": 5,
        "userId": 38787,
        "comments": []
    },
    {
        "id": 28288,
        "title": "Single Jira project for multiple Scrum teams",
        "body": "We're going to develop a Java web application (frontend + backend's microservices) using several Scrum development teams. One team is resposible for the core product modules (microservices). Some other teams are responsible for some other modules (microservices). And yet another team is responsible for  development of the frontend. All the design and the specifications are kept in Confluence. Is it a good idea to create a single project in Jira and configure it so that each team sees only its tasks? Or is it more convenient to create different projects in Jira for each team? What are pros and cons of each approach?",
        "score": 0,
        "creationdate": "2020-03-03 18:06:00.307000",
        "viewcount": 887,
        "tags": "<scrum><agile><team-management><jira>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 38012,
        "comments": []
    },
    {
        "id": 29584,
        "title": "How do I overcome a bottleneck in a team's process, when what people are telling me doesn't match what I see",
        "body": "I started a new job a few months ago as a scrum master. The team was and still is having problems completing their tasks during the sprint.  Initially the problems seemed to be tasks that were too big and there were some blockers early on in the development process. As these problems were solved the percentage of tasks in the Testing column at the end of the sprint kept going up and up. While the done column didn't move much at all. There are two developers for each tester. Which is more testers than my previous team, but I am not sure how it compares to the industry average. I asked how the team could help the testers. I was told the developers weren't testing the changes before passing it to the tester. So we tightened up the pretesting quantity gates. Now not only do changes need to pass code review by another developer the developers also have to demo the code to the testers before the testers test it. The percentage of tasks in the testing column went up again. Now it is more than 80% of tasks by the end of the sprint. I suggested that the developers and testers pair test the tasks combining the pretest demo and testing. But the testers don't trust any testing done in the development environment and they won't let the changes into the testing environment without a pretest demo. And the suggestion that the developers and testers test in both environments in quick succession is popular with no-one. I have been talking the lead tester and the challenges they are experiencing seem significant, however I keep getting the feeling I'm missing something. I feel as if I am asking the wrong questions. I think I need to talk to someone lower on the totem pole, someone less invested in the status quo. Smaller, more concrete, subtler questions maybe during one of those pretesting demos. I'll do that next week. Also the complaints about lack of developer testing are louder. My feeling is that only a few tasks are getting bounced back, but those few are causing  disproportional pain to both developers and testers. Also much of the time the problem is not the task bounced back, but some other task in the testing queue. My feeling is the problems will get worse the longer the testing queue gets. But that is my feeling. It would be nice to have some concrete numbers. With my previous team I would open up JIRA reports and I'd get some idea about what might be causing the problem. With this team JIRA reports is giving me garbage. They are saying we are getting no work done at all which is not quite true. I'd like to get the percentage of tasks reopened after testing and the percentage of time in testing, it looks like I will have to dig into JQL as the standard reports are giving me nothing. What am I doing wrong? What am I missing?  My previous team was more cross functional. With this team I am not sure how to even begin to move them in that direction. Any suggestions in that direction are shot down immediately.",
        "score": 21,
        "creationdate": "2020-04-25 09:16:36.347000",
        "viewcount": 5164,
        "tags": "<scrum><jira><testing><bugs><velocity>",
        "answercount": 8,
        "favoritecount": 2,
        "userId": 40452,
        "comments": [
            {
                "text": "Non-developers tell me the problem is with the developers and the developers don't defend themselves but every time we improve what the developers are doing the problem gets worse.",
                "score": 1,
                "userId": 40452
            },
            {
                "text": "Bart suggests that the problem is dividing the team into developers and non-developers in the first place and I can't say he's wrong.",
                "score": 2,
                "userId": 40452
            },
            {
                "text": "By non-developers I mean the business analysis who is also the product owner, the designer and the testers. I have been trying to get the testers and developers to work more closely together and they have, but it hasn't helped. Something more radical is probably needed.",
                "score": 0,
                "userId": 40452
            },
            {
                "text": "I am not 100% sure but there seems to have been a lot of turn over in the last six months but that has been mainly with newer staff. The long term staff seems mostly unchanged. It is one reason I feel I haven't been given the whole story. A mature team should work together more seamlessly or have self imploded before now. I have been told that the lack of productivity is new, but I have been given no explanation except that it shouldn't be happening & some inappropriate anger. I think that some of them where within different teams in the same company before being shifted sideways to this team.",
                "score": 1,
                "userId": 40452
            },
            {
                "text": "Perhaps because it is Sunday. Next week is tomorrow morning.",
                "score": 1,
                "userId": 40452
            }
        ]
    },
    {
        "id": 29724,
        "title": "Team velocity declined after legacy declaration",
        "body": "I am the manager and I am struggling with a declined velocity. I have tried to discuss with the team what is going on, and they say they got better at story point estimation. But I suspect they are not motivated.  A few months ago, the director announced that the company planned to phase out the software the team had been working on and replace it a different product from the market. He said there were no timelines yet for the sunset date and it was not their intention to leave users without alternatives. It is not clear if the team will have any role in the new product, so their future is uncertain.  Ever since the announcement, the velocity has declined by up to 50%. I suspect the team are either interviewing or ramping up their skills to prepare for their next job. How do I motivate them to restore their velocity?  I know it is not common for management to rely on velocity as a measure of productivity. But in this company, velocity and individual points are how teams and individuals are evaluated.",
        "score": 1,
        "creationdate": "2020-05-19 13:16:10.110000",
        "viewcount": 180,
        "tags": "<agile><team-management><sprint><motivation><velocity>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 36006,
        "comments": []
    },
    {
        "id": 29868,
        "title": "\"View content\"-type user story/acceptance criteria",
        "body": "I'm relatively new to the acceptance criteria in GWT format, and I'm struggling with writing them for the features that involve reviewing content. For instance: the user is on the home page of e-commerce website, and reviews the items being sold on that website. My user story looks like this: As a User, I want to view the available products so that I can find the one I want to buy. But what about acceptance criteria? I've come up with the \"Given\" part (Given I've navigated to the system home page) and \"Then\" part (Then I'm able to view the available products) - however, \"When\" is a mystery for me. What is that trigger that moves the user from \"Given\" to \"Then? Maybe I'm just totally wrong with \"Given\"/\"Then\" parts? I've tried to google that, but it seems like either my requests are clumsy or it's not that big problem for everyone else. Thank you in advance and sorry if it's been posted before :)",
        "score": 3,
        "creationdate": "2020-06-17 15:50:11.507000",
        "viewcount": 132,
        "tags": "<user-stories><acceptance-criteria>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 40964,
        "comments": []
    },
    {
        "id": 29946,
        "title": "How can I effectively differentiate the Sprint Goal from the Sprint Backlog?",
        "body": "I'm facing a situation where I have to explain with an example the difference between a Sprint Goal and a Sprint Backlog. Here's how I understand it:  The Sprint Goal is an objective that needs to be achieved by the team during the sprint through the implementation of part of the Product Backlog. The Sprint Backlog is a stream or set of items from the Product/Release Backlog that are to be worked upon and some of it which will help achieve the Sprint Goal.  For example, a team is building a ratings feature for a product item on sale at an e-commerce website.  Feature 1:, As a user, I want to leave a rating for an item I have purchased. Feature 2: As a user, I want to view ratings given by other users who have purchased a product.  Now the Sprint Backlog could be a mix of User Stories for each of these:  features defects tech debt spikes/research/proofs-of-concept, etc.  but the Sprint Goal for each Sprint should be from the user's perspective. For example, goals for four different Sprints might be:  Sprint Goal:  Users should be able to see a list of stars against each product.   Sprint Goal:  Users should be able to give a rating to each product. Users should be able to view ratings of other users.   Sprint Goal:  Users should be able to change the rating at any given point of time. Users should not be able to change other users' ratings.   Sprint Goal:  Users cannot rate products that have not yet been purchased.    How can I better explain the difference?",
        "score": 2,
        "creationdate": "2020-07-08 02:22:21.943000",
        "viewcount": 167,
        "tags": "<scrum><agile><sprint><product-backlog><sprint-goal>",
        "answercount": 3,
        "favoritecount": null,
        "userId": 29308,
        "comments": []
    },
    {
        "id": 30136,
        "title": "Refactoring in Agile development",
        "body": "In an app development project, the full scope of the project was not considered in the app design. So, the frequent refactoring of codes to accommodate changes is negatively impacting the project delivery timeline, which has become necessary during a sprint. How best can this be controlled to minimize the risk of overshooting the agreed date of project delivery, since stakeholders are not willing to compromise?",
        "score": 5,
        "creationdate": "2020-08-15 14:03:16.870000",
        "viewcount": 515,
        "tags": "<scrum><agile><software-development><schedule-risk>",
        "answercount": 2,
        "favoritecount": 1,
        "userId": 42400,
        "comments": []
    },
    {
        "id": 30622,
        "title": "How can we simulate hard deadline?",
        "body": "We're working on an ongoing project. We have internal deadlines like sprint but it's not a hard deadline. Nothing will happen if we don't reach the internal goals. The team is starting to get used to not finishing things within the deadline. And I still can't find a way to simulate a hard deadline because it doesn't actually exist. How can we simulate one to make team serious about getting projects finished? What are the factors that make us successfully create internal deadlines? Process, management, communication, people?",
        "score": 2,
        "creationdate": "2020-11-19 13:37:50.543000",
        "viewcount": 279,
        "tags": "<team-management><deadline><goals>",
        "answercount": 5,
        "favoritecount": null,
        "userId": 32630,
        "comments": [
            {
                "text": "Because our next steps are not very restricted by time. We can start to do it for 6 months until 1 year from now.",
                "score": 0,
                "userId": 32630
            },
            {
                "text": "@LaurentS. So for the second team isn't that the combination of management expectation and individual responsibility issue at the same time?",
                "score": 0,
                "userId": 32630
            }
        ]
    },
    {
        "id": 30775,
        "title": "How should I deal with common dependencies when estimating stories in Scrum?",
        "body": "There's something that has always bothered me with Scrum. Hopefully I can get some insight here. With Scrum, we try to break the backlog down in vertical slices. Let's say stories A and B. These stories are supposed to be customer oriented and deliver value. Assume here that they have similar customer value. Now, let's say that, to implement, A and B both need a shared infrastructure. So let's say we're at backlog refinement. If I ask the dev team to estimate in story points, they might estimate them each at 8 points, if they are estimated separately: A8, B8. This is good for me as PO because I can move the stories around in the backlog without breaking anything. However, when forecasting, my backlog will appear heavier, because, if combined, they might be delivered with a lesser effort than the sum of the parts. If my team has a hypothetical velocity of 13, it will look like they won't be able to deliver in 1 sprint. If there are many items like this, it will be impossible to have any visibility of a timeline beyond the planned sprint. If we have multiple stories with a same shared infrastructure, the backlog will seem very heavy, and forecast will be impossible. I have seen 2 variants:  Split the infra work to a separate \"technical\" story: A3, B3, T5 This solves the estimation process, but it's a horizontal slice. The infra itself has no customer value. Also, the backlog now contains dependencies, because the stories are no longer atomic, which means that I can't reorder them without being aware of the dependencies. Without looking at the specifics, I would have chosen A and B to be done first, because they are low effort and high value. So it's going back to classic project planning.  Estimate the infra effort in one of the stories only, and estimate the second one as if the first one is already done: A8, B3. The downside here is that one story will seem more complex than the other, so if I don't look at the details, I will be inclined to prioritize story B, because it will have the same customer value as A, with less effort.   So the questions are:  Are there any documented ways to handle these? Have you found ways to deal with situations like this that don't require you to pick between the downsides mentioned here?  I have dealt with these a bit with an ad-hoc way, by using one of the two options above and by marking dependencies, so that I don't put prerequisite tasks before subsequent ones. If I do, I redistribute the story points. But it looks bad for anyone else looking at the backlog, and I prefer the backlog to be a useful and transparent artifact.",
        "score": 3,
        "creationdate": "2020-12-11 01:23:26.087000",
        "viewcount": 120,
        "tags": "<scrum><estimation><story-points><backlog><dependencies>",
        "answercount": 4,
        "favoritecount": 1,
        "userId": 43474,
        "comments": []
    },
    {
        "id": 31076,
        "title": "How to store/manage a huge amount of coder task in the backlog",
        "body": "What to do when the programmers from the dev team want to put their development tasks in the product backlog (such as refactor XXX, clean class XXX, ...)? We tried and have the users stories mixed with (a huge number of) programmers task that are hard to understand from the Product Owner point of view. Is there any good practices to store developers task?",
        "score": 2,
        "creationdate": "2021-02-01 17:42:04.777000",
        "viewcount": 100,
        "tags": "<scrum><user-stories><backlog>",
        "answercount": 1,
        "favoritecount": null,
        "userId": 40347,
        "comments": [
            {
                "text": "They are in the product backlog and I take your first answer. Yet your second answer is also relevant to my situation.",
                "score": 0,
                "userId": 40347
            }
        ]
    },
    {
        "id": 31094,
        "title": "How to handle a Sprint completed ahead of time?",
        "body": "Let's say we have a sprint of 2 weeks. In that sprint, the IT team has to implement some issues or features. How can we handle the case where the team finishes all issues/features ahead of time? Do we pull tasks from the next sprint to the current one? Do we start a new sprint with some extra days in it in order to compensate for the days that were earned? Or we see the IT team playing games on the internet until the sprint ends and a new one starts? I know that when there is not enough time in the sprint for the tasks to be implemented, some of them can go to the next sprint, but what about the opposite (when the tasks were implemented faster)?",
        "score": 1,
        "creationdate": "2021-02-05 07:50:18.123000",
        "viewcount": 142,
        "tags": "<scrum><agile><sprint><sprint-planning>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 42582,
        "comments": [
            {
                "text": "You are right @TiagoCardoso. It is almost the same and the link you provided have a very nice interesting answer. I am not project manager and as such my question was not so much clear as the one you posted. Although the answers here helped me clarify some things, if you thing so I can delete the question.",
                "score": 0,
                "userId": 42582
            }
        ]
    },
    {
        "id": 31155,
        "title": "Cadence in Scrum",
        "body": "Scrum coaches say that a Scrum Team (often Scrum Developent Team is meant) should adhere to:  predictable cadence delivering business value each Sprint  But at the same time Scrum emphasizes that completing all the PBIs planned for a Sprint can NOT be considered obligatory, it is just a forecast. These two points contradict to each other to some extent. But the second point makes much more sence to me than the first one. For example, a Scrum Team may fail to deliver any PBI at the end of a sprint, but the lessons learned during the sprint and the new knowledge obtained (e.g. the fact that their understanding of the technology used was not precise and the business goal should be achieved in a different way compared to how they thought before) also have value though not immediatelly usable or shippable. Another example - when experiencing technical problems durng a Sprint, developers may tend to use quick-hacks thus sacrificing the product's quality for achieving the Sprint Goal. So is it right to say that a Scrum Team should adhere to cadence? Isn't it a fallacy?",
        "score": 2,
        "creationdate": "2021-02-14 17:07:31.787000",
        "viewcount": 250,
        "tags": "<scrum><value>",
        "answercount": 4,
        "favoritecount": null,
        "userId": 40376,
        "comments": []
    }
]